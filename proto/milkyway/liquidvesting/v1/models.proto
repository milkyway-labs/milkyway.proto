syntax = "proto3";
package milkyway.liquidvesting.v1;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/milkyway-labs/milkyway/x/liquidvesting/types";

// UserInsuranceFund defines a user's insurance fund.
message UserInsuranceFund {
  // Amount of coins deposited into the user's insurance fund.
  repeated cosmos.base.v1beta1.Coin balance = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];

  // Amount in the user's insurance that is being used to secure the
  // restaked toknes. For example an user has 10 TIA in their insurance fund,
  // the insurance percentage is 1% so they can restake 1000 TIA.
  // The user restakes only 100 TIA, in this case the balance is 10 TIA and used
  // is 1 TIA.
  repeated cosmos.base.v1beta1.Coin used = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// BurnCoins is a struct that contains the information about the coins to burn
// once the unbonding period of the vested representation tokens ends.
message BurnCoins {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Address of who has delegated the coins.
  string delegator_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // CompletionTime is the unix time for unbonding completion.
  google.protobuf.Timestamp completion_time = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (gogoproto.stdtime) = true
  ];

  // Amount of coins to be burned from the delegator address.
  repeated cosmos.base.v1beta1.Coin amount = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// BurnCoinsList represents a list of BurnCoins.
message BurnCoinsList {
  repeated BurnCoins data = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// UserInsuranceFundState represents a user's insurance fund.
message UserInsuranceFundState {
  // Address of who owns the insurance fund.
  string user_address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // InsuranceFund represents the user's insurance fund.
  UserInsuranceFund insurance_fund = 2 [ (gogoproto.nullable) = false ];
}
