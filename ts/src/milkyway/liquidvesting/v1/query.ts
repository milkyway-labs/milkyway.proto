// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: milkyway/liquidvesting/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Params } from "./params";

export const protobufPackage = "milkyway.liquidvesting.v1";

/**
 * QueryUserInsuranceFundRequest is the request type for the
 * Query/UserInsuranceFund RPC method.
 */
export interface QueryUserInsuranceFundRequest {
  /** user_address is the address of the user to query. */
  userAddress: string;
}

/**
 * QueryUserInsuranceFundResponse is the response type for the
 * Query/UserInsuranceFund RPC method.
 */
export interface QueryUserInsuranceFundResponse {
  /** balance is the amount of tokens that is in the user's insurance fund. */
  balance: Coin[];
  /**
   * used is the amount of tokens is being used to cover the user's
   * restaked assets.
   */
  used: Coin[];
}

/**
 * QueryUserInsuranceFundsRequest is the request type for the
 * Query/UserInsuranceFunds RPC method.
 */
export interface QueryUserInsuranceFundsRequest {
  pagination: PageRequest | undefined;
}

/**
 * UserInsuranceFundData is the structure that contains the information about
 * a user's insurance fund.
 */
export interface UserInsuranceFundData {
  /** user_address is the address of who owns the insurance fund. */
  userAddress: string;
  /** balance is the amount of tokens that is in the user's insurance fund. */
  balance: Coin[];
  /**
   * used is the amount of tokens that is to cover the user's
   * restaked assets.
   */
  used: Coin[];
}

/**
 * QueryUserInsuranceFundsResponse is the response type for the
 * Query/UserInsuranceFunds RPC method.
 */
export interface QueryUserInsuranceFundsResponse {
  /** insurance_funds is the list of users insurance funds. */
  insuranceFunds: UserInsuranceFundData[];
  /** Pagination defines the pagination response */
  pagination: PageResponse | undefined;
}

/**
 * QueryUserRestakableAssetsRequest is the request type for the
 * Query/UserRestakableAssets RPC method.
 */
export interface QueryUserRestakableAssetsRequest {
  /** user_address is the address of the user to query. */
  userAddress: string;
}

/**
 * QueryUserRestakableAssetsResponse is the response type for the
 * Query/UserRestakableAssets RPC method.
 */
export interface QueryUserRestakableAssetsResponse {
  /** amount is the amount of tokens that the user can restake. */
  amount: Coin[];
}

/**
 * QueryInsuranceFundRequest is the request type for the
 * Query/InsuranceFund RPC method.
 */
export interface QueryInsuranceFundRequest {
}

/**
 * QueryInsuranceFundResponse is the response type for the
 * Query/InsuranceFund RPC method.
 */
export interface QueryInsuranceFundResponse {
  /** amount is the amount of tokens that are in the insurance fund. */
  amount: Coin[];
}

/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  params: Params | undefined;
}

function createBaseQueryUserInsuranceFundRequest(): QueryUserInsuranceFundRequest {
  return { userAddress: "" };
}

export const QueryUserInsuranceFundRequest: MessageFns<QueryUserInsuranceFundRequest> = {
  encode(message: QueryUserInsuranceFundRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userAddress !== "") {
      writer.uint32(10).string(message.userAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryUserInsuranceFundRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUserInsuranceFundRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUserInsuranceFundRequest {
    return { userAddress: isSet(object.userAddress) ? gt.String(object.userAddress) : "" };
  },

  toJSON(message: QueryUserInsuranceFundRequest): unknown {
    const obj: any = {};
    if (message.userAddress !== "") {
      obj.userAddress = message.userAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryUserInsuranceFundRequest>): QueryUserInsuranceFundRequest {
    return QueryUserInsuranceFundRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryUserInsuranceFundRequest>): QueryUserInsuranceFundRequest {
    const message = createBaseQueryUserInsuranceFundRequest();
    message.userAddress = object.userAddress ?? "";
    return message;
  },
};

function createBaseQueryUserInsuranceFundResponse(): QueryUserInsuranceFundResponse {
  return { balance: [], used: [] };
}

export const QueryUserInsuranceFundResponse: MessageFns<QueryUserInsuranceFundResponse> = {
  encode(message: QueryUserInsuranceFundResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.balance) {
      Coin.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.used) {
      Coin.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryUserInsuranceFundResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUserInsuranceFundResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.balance.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.used.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUserInsuranceFundResponse {
    return {
      balance: gt.Array.isArray(object?.balance) ? object.balance.map((e: any) => Coin.fromJSON(e)) : [],
      used: gt.Array.isArray(object?.used) ? object.used.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: QueryUserInsuranceFundResponse): unknown {
    const obj: any = {};
    if (message.balance?.length) {
      obj.balance = message.balance.map((e) => Coin.toJSON(e));
    }
    if (message.used?.length) {
      obj.used = message.used.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryUserInsuranceFundResponse>): QueryUserInsuranceFundResponse {
    return QueryUserInsuranceFundResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryUserInsuranceFundResponse>): QueryUserInsuranceFundResponse {
    const message = createBaseQueryUserInsuranceFundResponse();
    message.balance = object.balance?.map((e) => Coin.fromPartial(e)) || [];
    message.used = object.used?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryUserInsuranceFundsRequest(): QueryUserInsuranceFundsRequest {
  return { pagination: undefined };
}

export const QueryUserInsuranceFundsRequest: MessageFns<QueryUserInsuranceFundsRequest> = {
  encode(message: QueryUserInsuranceFundsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryUserInsuranceFundsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUserInsuranceFundsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUserInsuranceFundsRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryUserInsuranceFundsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryUserInsuranceFundsRequest>): QueryUserInsuranceFundsRequest {
    return QueryUserInsuranceFundsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryUserInsuranceFundsRequest>): QueryUserInsuranceFundsRequest {
    const message = createBaseQueryUserInsuranceFundsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseUserInsuranceFundData(): UserInsuranceFundData {
  return { userAddress: "", balance: [], used: [] };
}

export const UserInsuranceFundData: MessageFns<UserInsuranceFundData> = {
  encode(message: UserInsuranceFundData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userAddress !== "") {
      writer.uint32(10).string(message.userAddress);
    }
    for (const v of message.balance) {
      Coin.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.used) {
      Coin.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserInsuranceFundData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserInsuranceFundData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.balance.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.used.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserInsuranceFundData {
    return {
      userAddress: isSet(object.userAddress) ? gt.String(object.userAddress) : "",
      balance: gt.Array.isArray(object?.balance) ? object.balance.map((e: any) => Coin.fromJSON(e)) : [],
      used: gt.Array.isArray(object?.used) ? object.used.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: UserInsuranceFundData): unknown {
    const obj: any = {};
    if (message.userAddress !== "") {
      obj.userAddress = message.userAddress;
    }
    if (message.balance?.length) {
      obj.balance = message.balance.map((e) => Coin.toJSON(e));
    }
    if (message.used?.length) {
      obj.used = message.used.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UserInsuranceFundData>): UserInsuranceFundData {
    return UserInsuranceFundData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserInsuranceFundData>): UserInsuranceFundData {
    const message = createBaseUserInsuranceFundData();
    message.userAddress = object.userAddress ?? "";
    message.balance = object.balance?.map((e) => Coin.fromPartial(e)) || [];
    message.used = object.used?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryUserInsuranceFundsResponse(): QueryUserInsuranceFundsResponse {
  return { insuranceFunds: [], pagination: undefined };
}

export const QueryUserInsuranceFundsResponse: MessageFns<QueryUserInsuranceFundsResponse> = {
  encode(message: QueryUserInsuranceFundsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.insuranceFunds) {
      UserInsuranceFundData.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryUserInsuranceFundsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUserInsuranceFundsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.insuranceFunds.push(UserInsuranceFundData.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUserInsuranceFundsResponse {
    return {
      insuranceFunds: gt.Array.isArray(object?.insuranceFunds)
        ? object.insuranceFunds.map((e: any) => UserInsuranceFundData.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryUserInsuranceFundsResponse): unknown {
    const obj: any = {};
    if (message.insuranceFunds?.length) {
      obj.insuranceFunds = message.insuranceFunds.map((e) => UserInsuranceFundData.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryUserInsuranceFundsResponse>): QueryUserInsuranceFundsResponse {
    return QueryUserInsuranceFundsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryUserInsuranceFundsResponse>): QueryUserInsuranceFundsResponse {
    const message = createBaseQueryUserInsuranceFundsResponse();
    message.insuranceFunds = object.insuranceFunds?.map((e) => UserInsuranceFundData.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryUserRestakableAssetsRequest(): QueryUserRestakableAssetsRequest {
  return { userAddress: "" };
}

export const QueryUserRestakableAssetsRequest: MessageFns<QueryUserRestakableAssetsRequest> = {
  encode(message: QueryUserRestakableAssetsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userAddress !== "") {
      writer.uint32(10).string(message.userAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryUserRestakableAssetsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUserRestakableAssetsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUserRestakableAssetsRequest {
    return { userAddress: isSet(object.userAddress) ? gt.String(object.userAddress) : "" };
  },

  toJSON(message: QueryUserRestakableAssetsRequest): unknown {
    const obj: any = {};
    if (message.userAddress !== "") {
      obj.userAddress = message.userAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryUserRestakableAssetsRequest>): QueryUserRestakableAssetsRequest {
    return QueryUserRestakableAssetsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryUserRestakableAssetsRequest>): QueryUserRestakableAssetsRequest {
    const message = createBaseQueryUserRestakableAssetsRequest();
    message.userAddress = object.userAddress ?? "";
    return message;
  },
};

function createBaseQueryUserRestakableAssetsResponse(): QueryUserRestakableAssetsResponse {
  return { amount: [] };
}

export const QueryUserRestakableAssetsResponse: MessageFns<QueryUserRestakableAssetsResponse> = {
  encode(message: QueryUserRestakableAssetsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryUserRestakableAssetsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUserRestakableAssetsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUserRestakableAssetsResponse {
    return { amount: gt.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [] };
  },

  toJSON(message: QueryUserRestakableAssetsResponse): unknown {
    const obj: any = {};
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryUserRestakableAssetsResponse>): QueryUserRestakableAssetsResponse {
    return QueryUserRestakableAssetsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryUserRestakableAssetsResponse>): QueryUserRestakableAssetsResponse {
    const message = createBaseQueryUserRestakableAssetsResponse();
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryInsuranceFundRequest(): QueryInsuranceFundRequest {
  return {};
}

export const QueryInsuranceFundRequest: MessageFns<QueryInsuranceFundRequest> = {
  encode(_: QueryInsuranceFundRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryInsuranceFundRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInsuranceFundRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryInsuranceFundRequest {
    return {};
  },

  toJSON(_: QueryInsuranceFundRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryInsuranceFundRequest>): QueryInsuranceFundRequest {
    return QueryInsuranceFundRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryInsuranceFundRequest>): QueryInsuranceFundRequest {
    const message = createBaseQueryInsuranceFundRequest();
    return message;
  },
};

function createBaseQueryInsuranceFundResponse(): QueryInsuranceFundResponse {
  return { amount: [] };
}

export const QueryInsuranceFundResponse: MessageFns<QueryInsuranceFundResponse> = {
  encode(message: QueryInsuranceFundResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryInsuranceFundResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInsuranceFundResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryInsuranceFundResponse {
    return { amount: gt.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [] };
  },

  toJSON(message: QueryInsuranceFundResponse): unknown {
    const obj: any = {};
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryInsuranceFundResponse>): QueryInsuranceFundResponse {
    return QueryInsuranceFundResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryInsuranceFundResponse>): QueryInsuranceFundResponse {
    const message = createBaseQueryInsuranceFundResponse();
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /**
   * UserInsuranceFund defines a gRPC query method that returns the user's
   * insurance fund balance given their address.
   */
  UserInsuranceFund(request: QueryUserInsuranceFundRequest): Promise<QueryUserInsuranceFundResponse>;
  /**
   * UserInsuranceFunds defines a gRPC query method that returns all user's
   * insurance fund balance.
   */
  UserInsuranceFunds(request: QueryUserInsuranceFundsRequest): Promise<QueryUserInsuranceFundsResponse>;
  /**
   * UserRestakableAssets defines a gRPC query method that returns
   * the amount of assets that can be restaked from the one minted by this
   * module.
   */
  UserRestakableAssets(request: QueryUserRestakableAssetsRequest): Promise<QueryUserRestakableAssetsResponse>;
  /**
   * InsuranceFund defines a gRPC query method that returns the amount of tokens
   * that are in the insurance fund.
   */
  InsuranceFund(request: QueryInsuranceFundRequest): Promise<QueryInsuranceFundResponse>;
  /**
   * Params defines a gRPC query method that returns the parameters of the
   * module.
   */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
}

export const QueryServiceName = "milkyway.liquidvesting.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.UserInsuranceFund = this.UserInsuranceFund.bind(this);
    this.UserInsuranceFunds = this.UserInsuranceFunds.bind(this);
    this.UserRestakableAssets = this.UserRestakableAssets.bind(this);
    this.InsuranceFund = this.InsuranceFund.bind(this);
    this.Params = this.Params.bind(this);
  }
  UserInsuranceFund(request: QueryUserInsuranceFundRequest): Promise<QueryUserInsuranceFundResponse> {
    const data = QueryUserInsuranceFundRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UserInsuranceFund", data);
    return promise.then((data) => QueryUserInsuranceFundResponse.decode(new BinaryReader(data)));
  }

  UserInsuranceFunds(request: QueryUserInsuranceFundsRequest): Promise<QueryUserInsuranceFundsResponse> {
    const data = QueryUserInsuranceFundsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UserInsuranceFunds", data);
    return promise.then((data) => QueryUserInsuranceFundsResponse.decode(new BinaryReader(data)));
  }

  UserRestakableAssets(request: QueryUserRestakableAssetsRequest): Promise<QueryUserRestakableAssetsResponse> {
    const data = QueryUserRestakableAssetsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UserRestakableAssets", data);
    return promise.then((data) => QueryUserRestakableAssetsResponse.decode(new BinaryReader(data)));
  }

  InsuranceFund(request: QueryInsuranceFundRequest): Promise<QueryInsuranceFundResponse> {
    const data = QueryInsuranceFundRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "InsuranceFund", data);
    return promise.then((data) => QueryInsuranceFundResponse.decode(new BinaryReader(data)));
  }

  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
