// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: milkyway/liquidvesting/v1/messages.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Params } from "./params";

export const protobufPackage = "milkyway.liquidvesting.v1";

/**
 * MsgMintVestedRepresentation defines the message structure for the
 * MintVestedRepresentation gRPC service method. It allows an authorized
 * account to mint a user's staked vested tokens representation that can be
 * used in the liquid vesting module.
 */
export interface MsgMintVestedRepresentation {
  /** User that want to triger the tokens mint. */
  sender: string;
  /** User that will receive the minted tokens. */
  receiver: string;
  /** The amount of tokens that will be minted */
  amount: Coin[];
}

/**
 * MsgMintVestedRepresentationResponse is the return value of
 * MsgMintVestedRepresentation.
 */
export interface MsgMintVestedRepresentationResponse {
}

/**
 * MsgBurnVestedRepresentation defines the message structure for the
 * BurnVestedRepresentation gRPC service method. It allows an authorized
 * account to burn a user's staked vested tokens representation.
 */
export interface MsgBurnVestedRepresentation {
  /** User that want to triger the tokens burn. */
  sender: string;
  /** User from which we want to burn the tokens. */
  user: string;
  /** The amount of tokens that will be burned from the user's balance. */
  amount: Coin[];
}

/**
 * MsgBurnVestedRepresentationResponse is the return value of
 * MsgBurnVestedRepresentation.
 */
export interface MsgBurnVestedRepresentationResponse {
}

/**
 * MsgWithdrawInsuranceFund defines the message structure for the
 * WithdrawInsuranceFund gRPC service method.
 */
export interface MsgWithdrawInsuranceFund {
  /** User that want to withdraw the tokens. */
  sender: string;
  /** The amount of tokens that will be withdrawn from the user's insurance fund. */
  amount: Coin[];
}

export interface MsgWithdrawInsuranceFundResponse {
}

/**
 * MsgUpdateParams defines the message structure for the UpdateParams gRPC
 * service method. It allows the authority to update the module parameters.
 */
export interface MsgUpdateParams {
  /**
   * Authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   */
  authority: string;
  /**
   * Params define the parameters to update.
   *
   * NOTE: All parameters must be supplied.
   */
  params: Params | undefined;
}

/** MsgUpdateParamsResponse is the return value of MsgUpdateParams. */
export interface MsgUpdateParamsResponse {
}

function createBaseMsgMintVestedRepresentation(): MsgMintVestedRepresentation {
  return { sender: "", receiver: "", amount: [] };
}

export const MsgMintVestedRepresentation: MessageFns<MsgMintVestedRepresentation> = {
  encode(message: MsgMintVestedRepresentation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.receiver !== "") {
      writer.uint32(18).string(message.receiver);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgMintVestedRepresentation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgMintVestedRepresentation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.receiver = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgMintVestedRepresentation {
    return {
      sender: isSet(object.sender) ? gt.String(object.sender) : "",
      receiver: isSet(object.receiver) ? gt.String(object.receiver) : "",
      amount: gt.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgMintVestedRepresentation): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.receiver !== "") {
      obj.receiver = message.receiver;
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgMintVestedRepresentation>): MsgMintVestedRepresentation {
    return MsgMintVestedRepresentation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgMintVestedRepresentation>): MsgMintVestedRepresentation {
    const message = createBaseMsgMintVestedRepresentation();
    message.sender = object.sender ?? "";
    message.receiver = object.receiver ?? "";
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgMintVestedRepresentationResponse(): MsgMintVestedRepresentationResponse {
  return {};
}

export const MsgMintVestedRepresentationResponse: MessageFns<MsgMintVestedRepresentationResponse> = {
  encode(_: MsgMintVestedRepresentationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgMintVestedRepresentationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgMintVestedRepresentationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgMintVestedRepresentationResponse {
    return {};
  },

  toJSON(_: MsgMintVestedRepresentationResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgMintVestedRepresentationResponse>): MsgMintVestedRepresentationResponse {
    return MsgMintVestedRepresentationResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgMintVestedRepresentationResponse>): MsgMintVestedRepresentationResponse {
    const message = createBaseMsgMintVestedRepresentationResponse();
    return message;
  },
};

function createBaseMsgBurnVestedRepresentation(): MsgBurnVestedRepresentation {
  return { sender: "", user: "", amount: [] };
}

export const MsgBurnVestedRepresentation: MessageFns<MsgBurnVestedRepresentation> = {
  encode(message: MsgBurnVestedRepresentation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.user !== "") {
      writer.uint32(18).string(message.user);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgBurnVestedRepresentation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBurnVestedRepresentation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgBurnVestedRepresentation {
    return {
      sender: isSet(object.sender) ? gt.String(object.sender) : "",
      user: isSet(object.user) ? gt.String(object.user) : "",
      amount: gt.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgBurnVestedRepresentation): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgBurnVestedRepresentation>): MsgBurnVestedRepresentation {
    return MsgBurnVestedRepresentation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgBurnVestedRepresentation>): MsgBurnVestedRepresentation {
    const message = createBaseMsgBurnVestedRepresentation();
    message.sender = object.sender ?? "";
    message.user = object.user ?? "";
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgBurnVestedRepresentationResponse(): MsgBurnVestedRepresentationResponse {
  return {};
}

export const MsgBurnVestedRepresentationResponse: MessageFns<MsgBurnVestedRepresentationResponse> = {
  encode(_: MsgBurnVestedRepresentationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgBurnVestedRepresentationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBurnVestedRepresentationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgBurnVestedRepresentationResponse {
    return {};
  },

  toJSON(_: MsgBurnVestedRepresentationResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgBurnVestedRepresentationResponse>): MsgBurnVestedRepresentationResponse {
    return MsgBurnVestedRepresentationResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgBurnVestedRepresentationResponse>): MsgBurnVestedRepresentationResponse {
    const message = createBaseMsgBurnVestedRepresentationResponse();
    return message;
  },
};

function createBaseMsgWithdrawInsuranceFund(): MsgWithdrawInsuranceFund {
  return { sender: "", amount: [] };
}

export const MsgWithdrawInsuranceFund: MessageFns<MsgWithdrawInsuranceFund> = {
  encode(message: MsgWithdrawInsuranceFund, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgWithdrawInsuranceFund {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawInsuranceFund();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgWithdrawInsuranceFund {
    return {
      sender: isSet(object.sender) ? gt.String(object.sender) : "",
      amount: gt.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgWithdrawInsuranceFund): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgWithdrawInsuranceFund>): MsgWithdrawInsuranceFund {
    return MsgWithdrawInsuranceFund.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgWithdrawInsuranceFund>): MsgWithdrawInsuranceFund {
    const message = createBaseMsgWithdrawInsuranceFund();
    message.sender = object.sender ?? "";
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgWithdrawInsuranceFundResponse(): MsgWithdrawInsuranceFundResponse {
  return {};
}

export const MsgWithdrawInsuranceFundResponse: MessageFns<MsgWithdrawInsuranceFundResponse> = {
  encode(_: MsgWithdrawInsuranceFundResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgWithdrawInsuranceFundResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawInsuranceFundResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgWithdrawInsuranceFundResponse {
    return {};
  },

  toJSON(_: MsgWithdrawInsuranceFundResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgWithdrawInsuranceFundResponse>): MsgWithdrawInsuranceFundResponse {
    return MsgWithdrawInsuranceFundResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgWithdrawInsuranceFundResponse>): MsgWithdrawInsuranceFundResponse {
    const message = createBaseMsgWithdrawInsuranceFundResponse();
    return message;
  },
};

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? gt.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateParams>): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgUpdateParams>): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

/** Msg defines the services module's gRPC message service. */
export interface Msg {
  /**
   * MintVestedRepresentation defines the operation to mint a user's staked
   * vested tokens representation that can be used in the liquid vesting module.
   */
  MintVestedRepresentation(request: MsgMintVestedRepresentation): Promise<MsgMintVestedRepresentationResponse>;
  /**
   * BurnVestedRepresentation defines the operation to burn a user's staked
   * vested tokens representation.
   */
  BurnVestedRepresentation(request: MsgBurnVestedRepresentation): Promise<MsgBurnVestedRepresentationResponse>;
  /**
   * WithdrawInsuranceFund defines the operation to withdraw an amount
   * of tokens from the user's insurance fund.
   * This can be used from the user to withdraw their funds after
   * some of their staking representations have been burned or if the
   * balance in the insurance fund is more than the required to cover all
   * their staking representations.
   */
  WithdrawInsuranceFund(request: MsgWithdrawInsuranceFund): Promise<MsgWithdrawInsuranceFundResponse>;
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters.
   * The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}

export const MsgServiceName = "milkyway.liquidvesting.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.MintVestedRepresentation = this.MintVestedRepresentation.bind(this);
    this.BurnVestedRepresentation = this.BurnVestedRepresentation.bind(this);
    this.WithdrawInsuranceFund = this.WithdrawInsuranceFund.bind(this);
    this.UpdateParams = this.UpdateParams.bind(this);
  }
  MintVestedRepresentation(request: MsgMintVestedRepresentation): Promise<MsgMintVestedRepresentationResponse> {
    const data = MsgMintVestedRepresentation.encode(request).finish();
    const promise = this.rpc.request(this.service, "MintVestedRepresentation", data);
    return promise.then((data) => MsgMintVestedRepresentationResponse.decode(new BinaryReader(data)));
  }

  BurnVestedRepresentation(request: MsgBurnVestedRepresentation): Promise<MsgBurnVestedRepresentationResponse> {
    const data = MsgBurnVestedRepresentation.encode(request).finish();
    const promise = this.rpc.request(this.service, "BurnVestedRepresentation", data);
    return promise.then((data) => MsgBurnVestedRepresentationResponse.decode(new BinaryReader(data)));
  }

  WithdrawInsuranceFund(request: MsgWithdrawInsuranceFund): Promise<MsgWithdrawInsuranceFundResponse> {
    const data = MsgWithdrawInsuranceFund.encode(request).finish();
    const promise = this.rpc.request(this.service, "WithdrawInsuranceFund", data);
    return promise.then((data) => MsgWithdrawInsuranceFundResponse.decode(new BinaryReader(data)));
  }

  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
