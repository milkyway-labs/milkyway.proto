// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: milkyway/assets/v1/messages.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Asset } from "./models";

export const protobufPackage = "milkyway.assets.v1";

/**
 * MsgRegisterAsset defines the message structure for the RegisterAsset
 * gRPC service method. It allows the authority to register an asset.
 */
export interface MsgRegisterAsset {
  /**
   * Authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   */
  authority: string;
  /** Asset represents the asset to be registered. */
  asset: Asset | undefined;
}

/** MsgRegisterAssetResponse is the return value of MsgRegisterAsset. */
export interface MsgRegisterAssetResponse {
}

/**
 * MsgDeregisterAsset defines the message structure for the DeregisterAsset
 * gRPC service method. It allows the authority to de-register an asset with
 * the token denomination.
 */
export interface MsgDeregisterAsset {
  /**
   * Authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   */
  authority: string;
  /** Denom represents the denomination of the token associated with the asset. */
  denom: string;
}

/** MsgRegisterAssetResponse is the return value of MsgDeregisterAsset. */
export interface MsgDeregisterAssetResponse {
}

function createBaseMsgRegisterAsset(): MsgRegisterAsset {
  return { authority: "", asset: undefined };
}

export const MsgRegisterAsset: MessageFns<MsgRegisterAsset> = {
  encode(message: MsgRegisterAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.asset !== undefined) {
      Asset.encode(message.asset, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.asset = Asset.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRegisterAsset {
    return {
      authority: isSet(object.authority) ? gt.String(object.authority) : "",
      asset: isSet(object.asset) ? Asset.fromJSON(object.asset) : undefined,
    };
  },

  toJSON(message: MsgRegisterAsset): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.asset !== undefined) {
      obj.asset = Asset.toJSON(message.asset);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRegisterAsset>): MsgRegisterAsset {
    return MsgRegisterAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgRegisterAsset>): MsgRegisterAsset {
    const message = createBaseMsgRegisterAsset();
    message.authority = object.authority ?? "";
    message.asset = (object.asset !== undefined && object.asset !== null) ? Asset.fromPartial(object.asset) : undefined;
    return message;
  },
};

function createBaseMsgRegisterAssetResponse(): MsgRegisterAssetResponse {
  return {};
}

export const MsgRegisterAssetResponse: MessageFns<MsgRegisterAssetResponse> = {
  encode(_: MsgRegisterAssetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterAssetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterAssetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRegisterAssetResponse {
    return {};
  },

  toJSON(_: MsgRegisterAssetResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgRegisterAssetResponse>): MsgRegisterAssetResponse {
    return MsgRegisterAssetResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgRegisterAssetResponse>): MsgRegisterAssetResponse {
    const message = createBaseMsgRegisterAssetResponse();
    return message;
  },
};

function createBaseMsgDeregisterAsset(): MsgDeregisterAsset {
  return { authority: "", denom: "" };
}

export const MsgDeregisterAsset: MessageFns<MsgDeregisterAsset> = {
  encode(message: MsgDeregisterAsset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeregisterAsset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeregisterAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeregisterAsset {
    return {
      authority: isSet(object.authority) ? gt.String(object.authority) : "",
      denom: isSet(object.denom) ? gt.String(object.denom) : "",
    };
  },

  toJSON(message: MsgDeregisterAsset): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgDeregisterAsset>): MsgDeregisterAsset {
    return MsgDeregisterAsset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgDeregisterAsset>): MsgDeregisterAsset {
    const message = createBaseMsgDeregisterAsset();
    message.authority = object.authority ?? "";
    message.denom = object.denom ?? "";
    return message;
  },
};

function createBaseMsgDeregisterAssetResponse(): MsgDeregisterAssetResponse {
  return {};
}

export const MsgDeregisterAssetResponse: MessageFns<MsgDeregisterAssetResponse> = {
  encode(_: MsgDeregisterAssetResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeregisterAssetResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeregisterAssetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeregisterAssetResponse {
    return {};
  },

  toJSON(_: MsgDeregisterAssetResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgDeregisterAssetResponse>): MsgDeregisterAssetResponse {
    return MsgDeregisterAssetResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgDeregisterAssetResponse>): MsgDeregisterAssetResponse {
    const message = createBaseMsgDeregisterAssetResponse();
    return message;
  },
};

/** Msg defines the services module's gRPC message service. */
export interface Msg {
  /** RegisterAsset defines the operation for registering an asset. */
  RegisterAsset(request: MsgRegisterAsset): Promise<MsgRegisterAssetResponse>;
  /**
   * DeregisterAsset defines the operation for de-registering an asset with
   * its denomination.
   */
  DeregisterAsset(request: MsgDeregisterAsset): Promise<MsgDeregisterAssetResponse>;
}

export const MsgServiceName = "milkyway.assets.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.RegisterAsset = this.RegisterAsset.bind(this);
    this.DeregisterAsset = this.DeregisterAsset.bind(this);
  }
  RegisterAsset(request: MsgRegisterAsset): Promise<MsgRegisterAssetResponse> {
    const data = MsgRegisterAsset.encode(request).finish();
    const promise = this.rpc.request(this.service, "RegisterAsset", data);
    return promise.then((data) => MsgRegisterAssetResponse.decode(new BinaryReader(data)));
  }

  DeregisterAsset(request: MsgDeregisterAsset): Promise<MsgDeregisterAssetResponse> {
    const data = MsgDeregisterAsset.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeregisterAsset", data);
    return promise.then((data) => MsgDeregisterAssetResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
