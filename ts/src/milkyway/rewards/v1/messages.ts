// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: milkyway/rewards/v1/messages.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { DelegationType, delegationTypeFromJSON, delegationTypeToJSON } from "../../restaking/v1/models";
import { Distribution, UsersDistribution } from "./models";
import { Params } from "./params";

export const protobufPackage = "milkyway.rewards.v1";

/**
 * MsgCreateRewardsPlan defines the message structure for the
 * CreateRewardsPlan gRPC service method. It allows an account to create a
 * new rewards plan. It requires a sender address as well as the details of
 * the plan to be created.
 */
export interface MsgCreateRewardsPlan {
  /** Sender is the address of the user creating the rewards plan */
  sender: string;
  description: string;
  serviceId: number;
  /** Amount is the amount of rewards to be distributed. */
  amount: Coin[];
  /** StartTime is the starting time of the plan. */
  startTime:
    | Date
    | undefined;
  /** EndTime is the ending time of the plan. */
  endTime:
    | Date
    | undefined;
  /** PoolsDistribution is the rewards distribution parameters for pools. */
  poolsDistribution:
    | Distribution
    | undefined;
  /** OperatorsDistribution is the rewards distribution parameters for operators. */
  operatorsDistribution:
    | Distribution
    | undefined;
  /**
   * UsersDistribution is the rewards distribution parameters for users who
   * delegated directly to the service.
   */
  usersDistribution:
    | UsersDistribution
    | undefined;
  /**
   * FeeAmount represents the fees that are going to be paid to create the
   * rewards plan. These should always be greater or equals of any of the coins
   * specified inside the RewardsPlanCreationFee field of the modules params.
   * If no fees are specified inside the module parameters, this field can be
   * omitted.
   */
  feeAmount: Coin[];
}

/**
 * MsgCreateRewardsPlanResponse is the return value of
 * MsgCreateRewardsPlan. It returns the newly created plan ID.
 */
export interface MsgCreateRewardsPlanResponse {
  /** NewRewardsPlanID is the ID of the newly created rewards plan */
  newRewardsPlanId: number;
}

/**
 * MsgEditRewardsPlan defines the message structure for the
 * EditRewardsPlan gRPC service method. It allows an account to edit a
 * previously created rewards plan.
 */
export interface MsgEditRewardsPlan {
  /** Sender is the address of the user editing the rewards plan. */
  sender: string;
  /** ID is the ID of the rewards plan to be edited. */
  id: number;
  description: string;
  /** Amount is the amount of rewards to be distributed. */
  amount: Coin[];
  /** StartTime is the starting time of the plan. */
  startTime:
    | Date
    | undefined;
  /** EndTime is the ending time of the plan. */
  endTime:
    | Date
    | undefined;
  /** PoolsDistribution is the rewards distribution parameters for pools. */
  poolsDistribution:
    | Distribution
    | undefined;
  /** OperatorsDistribution is the rewards distribution parameters for operators. */
  operatorsDistribution:
    | Distribution
    | undefined;
  /**
   * UsersDistribution is the rewards distribution parameters for users who
   * delegated directly to the service.
   */
  usersDistribution: UsersDistribution | undefined;
}

/**
 * MsgEditRewardsPlanResponse is the return value of
 * MsgEditRewardsPlan.
 */
export interface MsgEditRewardsPlanResponse {
}

/**
 * MsgSetWithdrawAddress sets the withdraw address for a delegator(or an
 * operator when withdrawing commission).
 */
export interface MsgSetWithdrawAddress {
  sender: string;
  withdrawAddress: string;
}

/**
 * MsgSetWithdrawAddressResponse defines the Msg/SetWithdrawAddress response
 * type.
 */
export interface MsgSetWithdrawAddressResponse {
}

/**
 * MsgWithdrawDelegatorReward represents delegation withdrawal to a delegator
 * from a single delegation target.
 */
export interface MsgWithdrawDelegatorReward {
  delegatorAddress: string;
  delegationType: DelegationType;
  delegationTargetId: number;
}

/**
 * MsgWithdrawDelegatorRewardResponse defines the Msg/WithdrawDelegatorReward
 * response type.
 */
export interface MsgWithdrawDelegatorRewardResponse {
  amount: Coin[];
}

/** MsgWithdrawOperatorCommission withdraws the full commission to the operator. */
export interface MsgWithdrawOperatorCommission {
  sender: string;
  operatorId: number;
}

/**
 * MsgWithdrawOperatorCommissionResponse defines the
 * Msg/WithdrawOperatorCommission response type.
 */
export interface MsgWithdrawOperatorCommissionResponse {
  /** Since: cosmos-sdk 0.46 */
  amount: Coin[];
}

/**
 * MsgUpdateParams defines the message structure for the UpdateParams gRPC
 * service method. It allows the authority to update the module parameters.
 */
export interface MsgUpdateParams {
  /**
   * Authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   */
  authority: string;
  /**
   * Params define the parameters to update.
   *
   * NOTE: All parameters must be supplied.
   */
  params: Params | undefined;
}

/** MsgUpdateParamsResponse is the return value of MsgUpdateParams. */
export interface MsgUpdateParamsResponse {
}

function createBaseMsgCreateRewardsPlan(): MsgCreateRewardsPlan {
  return {
    sender: "",
    description: "",
    serviceId: 0,
    amount: [],
    startTime: undefined,
    endTime: undefined,
    poolsDistribution: undefined,
    operatorsDistribution: undefined,
    usersDistribution: undefined,
    feeAmount: [],
  };
}

export const MsgCreateRewardsPlan: MessageFns<MsgCreateRewardsPlan> = {
  encode(message: MsgCreateRewardsPlan, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.serviceId !== 0) {
      writer.uint32(24).uint32(message.serviceId);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(42).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(50).fork()).join();
    }
    if (message.poolsDistribution !== undefined) {
      Distribution.encode(message.poolsDistribution, writer.uint32(58).fork()).join();
    }
    if (message.operatorsDistribution !== undefined) {
      Distribution.encode(message.operatorsDistribution, writer.uint32(66).fork()).join();
    }
    if (message.usersDistribution !== undefined) {
      UsersDistribution.encode(message.usersDistribution, writer.uint32(74).fork()).join();
    }
    for (const v of message.feeAmount) {
      Coin.encode(v!, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateRewardsPlan {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateRewardsPlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.poolsDistribution = Distribution.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.operatorsDistribution = Distribution.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.usersDistribution = UsersDistribution.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.feeAmount.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateRewardsPlan {
    return {
      sender: isSet(object.sender) ? gt.String(object.sender) : "",
      description: isSet(object.description) ? gt.String(object.description) : "",
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
      amount: gt.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      poolsDistribution: isSet(object.poolsDistribution) ? Distribution.fromJSON(object.poolsDistribution) : undefined,
      operatorsDistribution: isSet(object.operatorsDistribution)
        ? Distribution.fromJSON(object.operatorsDistribution)
        : undefined,
      usersDistribution: isSet(object.usersDistribution)
        ? UsersDistribution.fromJSON(object.usersDistribution)
        : undefined,
      feeAmount: gt.Array.isArray(object?.feeAmount) ? object.feeAmount.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgCreateRewardsPlan): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.poolsDistribution !== undefined) {
      obj.poolsDistribution = Distribution.toJSON(message.poolsDistribution);
    }
    if (message.operatorsDistribution !== undefined) {
      obj.operatorsDistribution = Distribution.toJSON(message.operatorsDistribution);
    }
    if (message.usersDistribution !== undefined) {
      obj.usersDistribution = UsersDistribution.toJSON(message.usersDistribution);
    }
    if (message.feeAmount?.length) {
      obj.feeAmount = message.feeAmount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgCreateRewardsPlan>): MsgCreateRewardsPlan {
    return MsgCreateRewardsPlan.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgCreateRewardsPlan>): MsgCreateRewardsPlan {
    const message = createBaseMsgCreateRewardsPlan();
    message.sender = object.sender ?? "";
    message.description = object.description ?? "";
    message.serviceId = object.serviceId ?? 0;
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.poolsDistribution = (object.poolsDistribution !== undefined && object.poolsDistribution !== null)
      ? Distribution.fromPartial(object.poolsDistribution)
      : undefined;
    message.operatorsDistribution =
      (object.operatorsDistribution !== undefined && object.operatorsDistribution !== null)
        ? Distribution.fromPartial(object.operatorsDistribution)
        : undefined;
    message.usersDistribution = (object.usersDistribution !== undefined && object.usersDistribution !== null)
      ? UsersDistribution.fromPartial(object.usersDistribution)
      : undefined;
    message.feeAmount = object.feeAmount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgCreateRewardsPlanResponse(): MsgCreateRewardsPlanResponse {
  return { newRewardsPlanId: 0 };
}

export const MsgCreateRewardsPlanResponse: MessageFns<MsgCreateRewardsPlanResponse> = {
  encode(message: MsgCreateRewardsPlanResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.newRewardsPlanId !== 0) {
      writer.uint32(8).uint64(message.newRewardsPlanId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateRewardsPlanResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateRewardsPlanResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.newRewardsPlanId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateRewardsPlanResponse {
    return { newRewardsPlanId: isSet(object.newRewardsPlanId) ? gt.Number(object.newRewardsPlanId) : 0 };
  },

  toJSON(message: MsgCreateRewardsPlanResponse): unknown {
    const obj: any = {};
    if (message.newRewardsPlanId !== 0) {
      obj.newRewardsPlanId = Math.round(message.newRewardsPlanId);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgCreateRewardsPlanResponse>): MsgCreateRewardsPlanResponse {
    return MsgCreateRewardsPlanResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgCreateRewardsPlanResponse>): MsgCreateRewardsPlanResponse {
    const message = createBaseMsgCreateRewardsPlanResponse();
    message.newRewardsPlanId = object.newRewardsPlanId ?? 0;
    return message;
  },
};

function createBaseMsgEditRewardsPlan(): MsgEditRewardsPlan {
  return {
    sender: "",
    id: 0,
    description: "",
    amount: [],
    startTime: undefined,
    endTime: undefined,
    poolsDistribution: undefined,
    operatorsDistribution: undefined,
    usersDistribution: undefined,
  };
}

export const MsgEditRewardsPlan: MessageFns<MsgEditRewardsPlan> = {
  encode(message: MsgEditRewardsPlan, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.id !== 0) {
      writer.uint32(16).uint64(message.id);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(42).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(50).fork()).join();
    }
    if (message.poolsDistribution !== undefined) {
      Distribution.encode(message.poolsDistribution, writer.uint32(58).fork()).join();
    }
    if (message.operatorsDistribution !== undefined) {
      Distribution.encode(message.operatorsDistribution, writer.uint32(66).fork()).join();
    }
    if (message.usersDistribution !== undefined) {
      UsersDistribution.encode(message.usersDistribution, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgEditRewardsPlan {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgEditRewardsPlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.poolsDistribution = Distribution.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.operatorsDistribution = Distribution.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.usersDistribution = UsersDistribution.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgEditRewardsPlan {
    return {
      sender: isSet(object.sender) ? gt.String(object.sender) : "",
      id: isSet(object.id) ? gt.Number(object.id) : 0,
      description: isSet(object.description) ? gt.String(object.description) : "",
      amount: gt.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      poolsDistribution: isSet(object.poolsDistribution) ? Distribution.fromJSON(object.poolsDistribution) : undefined,
      operatorsDistribution: isSet(object.operatorsDistribution)
        ? Distribution.fromJSON(object.operatorsDistribution)
        : undefined,
      usersDistribution: isSet(object.usersDistribution)
        ? UsersDistribution.fromJSON(object.usersDistribution)
        : undefined,
    };
  },

  toJSON(message: MsgEditRewardsPlan): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.poolsDistribution !== undefined) {
      obj.poolsDistribution = Distribution.toJSON(message.poolsDistribution);
    }
    if (message.operatorsDistribution !== undefined) {
      obj.operatorsDistribution = Distribution.toJSON(message.operatorsDistribution);
    }
    if (message.usersDistribution !== undefined) {
      obj.usersDistribution = UsersDistribution.toJSON(message.usersDistribution);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgEditRewardsPlan>): MsgEditRewardsPlan {
    return MsgEditRewardsPlan.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgEditRewardsPlan>): MsgEditRewardsPlan {
    const message = createBaseMsgEditRewardsPlan();
    message.sender = object.sender ?? "";
    message.id = object.id ?? 0;
    message.description = object.description ?? "";
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.poolsDistribution = (object.poolsDistribution !== undefined && object.poolsDistribution !== null)
      ? Distribution.fromPartial(object.poolsDistribution)
      : undefined;
    message.operatorsDistribution =
      (object.operatorsDistribution !== undefined && object.operatorsDistribution !== null)
        ? Distribution.fromPartial(object.operatorsDistribution)
        : undefined;
    message.usersDistribution = (object.usersDistribution !== undefined && object.usersDistribution !== null)
      ? UsersDistribution.fromPartial(object.usersDistribution)
      : undefined;
    return message;
  },
};

function createBaseMsgEditRewardsPlanResponse(): MsgEditRewardsPlanResponse {
  return {};
}

export const MsgEditRewardsPlanResponse: MessageFns<MsgEditRewardsPlanResponse> = {
  encode(_: MsgEditRewardsPlanResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgEditRewardsPlanResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgEditRewardsPlanResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgEditRewardsPlanResponse {
    return {};
  },

  toJSON(_: MsgEditRewardsPlanResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgEditRewardsPlanResponse>): MsgEditRewardsPlanResponse {
    return MsgEditRewardsPlanResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgEditRewardsPlanResponse>): MsgEditRewardsPlanResponse {
    const message = createBaseMsgEditRewardsPlanResponse();
    return message;
  },
};

function createBaseMsgSetWithdrawAddress(): MsgSetWithdrawAddress {
  return { sender: "", withdrawAddress: "" };
}

export const MsgSetWithdrawAddress: MessageFns<MsgSetWithdrawAddress> = {
  encode(message: MsgSetWithdrawAddress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.withdrawAddress !== "") {
      writer.uint32(18).string(message.withdrawAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSetWithdrawAddress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetWithdrawAddress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.withdrawAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSetWithdrawAddress {
    return {
      sender: isSet(object.sender) ? gt.String(object.sender) : "",
      withdrawAddress: isSet(object.withdrawAddress) ? gt.String(object.withdrawAddress) : "",
    };
  },

  toJSON(message: MsgSetWithdrawAddress): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.withdrawAddress !== "") {
      obj.withdrawAddress = message.withdrawAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgSetWithdrawAddress>): MsgSetWithdrawAddress {
    return MsgSetWithdrawAddress.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgSetWithdrawAddress>): MsgSetWithdrawAddress {
    const message = createBaseMsgSetWithdrawAddress();
    message.sender = object.sender ?? "";
    message.withdrawAddress = object.withdrawAddress ?? "";
    return message;
  },
};

function createBaseMsgSetWithdrawAddressResponse(): MsgSetWithdrawAddressResponse {
  return {};
}

export const MsgSetWithdrawAddressResponse: MessageFns<MsgSetWithdrawAddressResponse> = {
  encode(_: MsgSetWithdrawAddressResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSetWithdrawAddressResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetWithdrawAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSetWithdrawAddressResponse {
    return {};
  },

  toJSON(_: MsgSetWithdrawAddressResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgSetWithdrawAddressResponse>): MsgSetWithdrawAddressResponse {
    return MsgSetWithdrawAddressResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgSetWithdrawAddressResponse>): MsgSetWithdrawAddressResponse {
    const message = createBaseMsgSetWithdrawAddressResponse();
    return message;
  },
};

function createBaseMsgWithdrawDelegatorReward(): MsgWithdrawDelegatorReward {
  return { delegatorAddress: "", delegationType: 0, delegationTargetId: 0 };
}

export const MsgWithdrawDelegatorReward: MessageFns<MsgWithdrawDelegatorReward> = {
  encode(message: MsgWithdrawDelegatorReward, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.delegationType !== 0) {
      writer.uint32(16).int32(message.delegationType);
    }
    if (message.delegationTargetId !== 0) {
      writer.uint32(24).uint32(message.delegationTargetId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgWithdrawDelegatorReward {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawDelegatorReward();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.delegationType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.delegationTargetId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgWithdrawDelegatorReward {
    return {
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
      delegationType: isSet(object.delegationType) ? delegationTypeFromJSON(object.delegationType) : 0,
      delegationTargetId: isSet(object.delegationTargetId) ? gt.Number(object.delegationTargetId) : 0,
    };
  },

  toJSON(message: MsgWithdrawDelegatorReward): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.delegationType !== 0) {
      obj.delegationType = delegationTypeToJSON(message.delegationType);
    }
    if (message.delegationTargetId !== 0) {
      obj.delegationTargetId = Math.round(message.delegationTargetId);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgWithdrawDelegatorReward>): MsgWithdrawDelegatorReward {
    return MsgWithdrawDelegatorReward.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgWithdrawDelegatorReward>): MsgWithdrawDelegatorReward {
    const message = createBaseMsgWithdrawDelegatorReward();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.delegationType = object.delegationType ?? 0;
    message.delegationTargetId = object.delegationTargetId ?? 0;
    return message;
  },
};

function createBaseMsgWithdrawDelegatorRewardResponse(): MsgWithdrawDelegatorRewardResponse {
  return { amount: [] };
}

export const MsgWithdrawDelegatorRewardResponse: MessageFns<MsgWithdrawDelegatorRewardResponse> = {
  encode(message: MsgWithdrawDelegatorRewardResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgWithdrawDelegatorRewardResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawDelegatorRewardResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgWithdrawDelegatorRewardResponse {
    return { amount: gt.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [] };
  },

  toJSON(message: MsgWithdrawDelegatorRewardResponse): unknown {
    const obj: any = {};
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgWithdrawDelegatorRewardResponse>): MsgWithdrawDelegatorRewardResponse {
    return MsgWithdrawDelegatorRewardResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgWithdrawDelegatorRewardResponse>): MsgWithdrawDelegatorRewardResponse {
    const message = createBaseMsgWithdrawDelegatorRewardResponse();
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgWithdrawOperatorCommission(): MsgWithdrawOperatorCommission {
  return { sender: "", operatorId: 0 };
}

export const MsgWithdrawOperatorCommission: MessageFns<MsgWithdrawOperatorCommission> = {
  encode(message: MsgWithdrawOperatorCommission, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.operatorId !== 0) {
      writer.uint32(16).uint32(message.operatorId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgWithdrawOperatorCommission {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawOperatorCommission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgWithdrawOperatorCommission {
    return {
      sender: isSet(object.sender) ? gt.String(object.sender) : "",
      operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0,
    };
  },

  toJSON(message: MsgWithdrawOperatorCommission): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgWithdrawOperatorCommission>): MsgWithdrawOperatorCommission {
    return MsgWithdrawOperatorCommission.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgWithdrawOperatorCommission>): MsgWithdrawOperatorCommission {
    const message = createBaseMsgWithdrawOperatorCommission();
    message.sender = object.sender ?? "";
    message.operatorId = object.operatorId ?? 0;
    return message;
  },
};

function createBaseMsgWithdrawOperatorCommissionResponse(): MsgWithdrawOperatorCommissionResponse {
  return { amount: [] };
}

export const MsgWithdrawOperatorCommissionResponse: MessageFns<MsgWithdrawOperatorCommissionResponse> = {
  encode(message: MsgWithdrawOperatorCommissionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgWithdrawOperatorCommissionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawOperatorCommissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgWithdrawOperatorCommissionResponse {
    return { amount: gt.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [] };
  },

  toJSON(message: MsgWithdrawOperatorCommissionResponse): unknown {
    const obj: any = {};
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgWithdrawOperatorCommissionResponse>): MsgWithdrawOperatorCommissionResponse {
    return MsgWithdrawOperatorCommissionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgWithdrawOperatorCommissionResponse>): MsgWithdrawOperatorCommissionResponse {
    const message = createBaseMsgWithdrawOperatorCommissionResponse();
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? gt.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateParams>): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgUpdateParams>): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

/** Msg defines the services module's gRPC message service. */
export interface Msg {
  /**
   * CreateRewardsPlan defines the operation for creating a new
   * rewards plan.
   */
  CreateRewardsPlan(request: MsgCreateRewardsPlan): Promise<MsgCreateRewardsPlanResponse>;
  /**
   * EditRewardsPlan defines the operation to edit an existing
   * rewards plan.
   */
  EditRewardsPlan(request: MsgEditRewardsPlan): Promise<MsgEditRewardsPlanResponse>;
  /**
   * SetWithdrawAddress defines a method to change the withdraw address
   * for a delegator(or an operator, when withdrawing commission).
   */
  SetWithdrawAddress(request: MsgSetWithdrawAddress): Promise<MsgSetWithdrawAddressResponse>;
  /**
   * WithdrawDelegatorReward defines a method to withdraw rewards of delegator
   * from a single delegation target.
   */
  WithdrawDelegatorReward(request: MsgWithdrawDelegatorReward): Promise<MsgWithdrawDelegatorRewardResponse>;
  /**
   * WithdrawOperatorCommission defines a method to withdraw the
   * full commission to the operator.
   */
  WithdrawOperatorCommission(request: MsgWithdrawOperatorCommission): Promise<MsgWithdrawOperatorCommissionResponse>;
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters.
   * The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}

export const MsgServiceName = "milkyway.rewards.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.CreateRewardsPlan = this.CreateRewardsPlan.bind(this);
    this.EditRewardsPlan = this.EditRewardsPlan.bind(this);
    this.SetWithdrawAddress = this.SetWithdrawAddress.bind(this);
    this.WithdrawDelegatorReward = this.WithdrawDelegatorReward.bind(this);
    this.WithdrawOperatorCommission = this.WithdrawOperatorCommission.bind(this);
    this.UpdateParams = this.UpdateParams.bind(this);
  }
  CreateRewardsPlan(request: MsgCreateRewardsPlan): Promise<MsgCreateRewardsPlanResponse> {
    const data = MsgCreateRewardsPlan.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateRewardsPlan", data);
    return promise.then((data) => MsgCreateRewardsPlanResponse.decode(new BinaryReader(data)));
  }

  EditRewardsPlan(request: MsgEditRewardsPlan): Promise<MsgEditRewardsPlanResponse> {
    const data = MsgEditRewardsPlan.encode(request).finish();
    const promise = this.rpc.request(this.service, "EditRewardsPlan", data);
    return promise.then((data) => MsgEditRewardsPlanResponse.decode(new BinaryReader(data)));
  }

  SetWithdrawAddress(request: MsgSetWithdrawAddress): Promise<MsgSetWithdrawAddressResponse> {
    const data = MsgSetWithdrawAddress.encode(request).finish();
    const promise = this.rpc.request(this.service, "SetWithdrawAddress", data);
    return promise.then((data) => MsgSetWithdrawAddressResponse.decode(new BinaryReader(data)));
  }

  WithdrawDelegatorReward(request: MsgWithdrawDelegatorReward): Promise<MsgWithdrawDelegatorRewardResponse> {
    const data = MsgWithdrawDelegatorReward.encode(request).finish();
    const promise = this.rpc.request(this.service, "WithdrawDelegatorReward", data);
    return promise.then((data) => MsgWithdrawDelegatorRewardResponse.decode(new BinaryReader(data)));
  }

  WithdrawOperatorCommission(request: MsgWithdrawOperatorCommission): Promise<MsgWithdrawOperatorCommissionResponse> {
    const data = MsgWithdrawOperatorCommission.encode(request).finish();
    const promise = this.rpc.request(this.service, "WithdrawOperatorCommission", data);
    return promise.then((data) => MsgWithdrawOperatorCommissionResponse.decode(new BinaryReader(data)));
  }

  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new gt.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof gt.Date) {
    return o;
  } else if (typeof o === "string") {
    return new gt.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = gt.Number(int64.toString());
  if (num > gt.Number.MAX_SAFE_INTEGER) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < gt.Number.MIN_SAFE_INTEGER) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
