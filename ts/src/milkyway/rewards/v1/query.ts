// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: milkyway/rewards/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { AccumulatedCommission, DecPool, DelegationDelegatorReward, OutstandingRewards, RewardsPlan } from "./models";
import { Params } from "./params";

export const protobufPackage = "milkyway.rewards.v1";

/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  params: Params | undefined;
}

/**
 * QueryRewardsPlansRequest is the request type for the Query/RewardsPlans RPC
 * method.
 */
export interface QueryRewardsPlansRequest {
  /** pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryRewardsPlansResponse is the response type for the Query/RewardsPlans
 * RPC method.
 */
export interface QueryRewardsPlansResponse {
  rewardsPlans: RewardsPlan[];
  /** pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryRewardsPlanRequest is the request type for the Query/RewardsPlan RPC
 * method.
 */
export interface QueryRewardsPlanRequest {
  planId: number;
}

/**
 * QueryRewardsPlanResponse is the response type for the Query/RewardsPlan RPC
 * method.
 */
export interface QueryRewardsPlanResponse {
  rewardsPlan: RewardsPlan | undefined;
}

/**
 * QueryPoolOutstandingRewardsRequest is the request type for the
 * Query/PoolOutstandingRewards RPC method.
 */
export interface QueryPoolOutstandingRewardsRequest {
  /** pool_id defines the pool ID to query for. */
  poolId: number;
}

/**
 * QueryPoolOutstandingRewardsResponse is the response type for the
 * Query/PoolOutstandingRewards RPC method.
 */
export interface QueryPoolOutstandingRewardsResponse {
  rewards: OutstandingRewards | undefined;
}

/**
 * QueryOperatorOutstandingRewardsRequest is the request type for the
 * Query/OperatorOutstandingRewards RPC method.
 */
export interface QueryOperatorOutstandingRewardsRequest {
  /** operator_id defines the operator ID to query for. */
  operatorId: number;
}

/**
 * QueryOperatorOutstandingRewardsResponse is the response type for the
 * Query/OperatorOutstandingRewards RPC method.
 */
export interface QueryOperatorOutstandingRewardsResponse {
  rewards: OutstandingRewards | undefined;
}

/**
 * QueryServiceOutstandingRewardsRequest is the request type for the
 * Query/ServiceOutstandingRewards RPC method.
 */
export interface QueryServiceOutstandingRewardsRequest {
  /** service_id defines the service ID to query for. */
  serviceId: number;
}

/**
 * QueryServiceOutstandingRewardsResponse is the response type for the
 * Query/ServiceOutstandingRewards RPC method.
 */
export interface QueryServiceOutstandingRewardsResponse {
  rewards: OutstandingRewards | undefined;
}

/**
 * QueryOperatorCommissionRequest is the request type for the
 * Query/OperatorCommission RPC method
 */
export interface QueryOperatorCommissionRequest {
  /** operator_id defines the validator address to query for. */
  operatorId: number;
}

/**
 * QueryOperatorCommissionResponse is the response type for the
 * Query/OperatorCommission RPC method
 */
export interface QueryOperatorCommissionResponse {
  /** commission defines the commission the operator received. */
  commission: AccumulatedCommission | undefined;
}

/**
 * QueryPoolDelegationRewardsRequest is the request type for the
 * Query/PoolDelegationRewards RPC method.
 */
export interface QueryPoolDelegationRewardsRequest {
  /** delegator_address defines the delegator address to query for. */
  delegatorAddress: string;
  /** pool_id defines the pool ID to query for. */
  poolId: number;
}

/**
 * QueryPoolDelegationRewardsResponse is the response type for the
 * Query/PoolDelegationRewards RPC method.
 */
export interface QueryPoolDelegationRewardsResponse {
  /** rewards defines the rewards accrued by a delegation. */
  rewards: DecPool[];
}

/**
 * QueryOperatorDelegationRewardsRequest is the request type for the
 * Query/OperatorDelegationRewards RPC method.
 */
export interface QueryOperatorDelegationRewardsRequest {
  /** delegator_address defines the delegator address to query for. */
  delegatorAddress: string;
  /** operator_id defines the operator ID to query for. */
  operatorId: number;
}

/**
 * QueryOperatorDelegationRewardsResponse is the response type for the
 * Query/OperatorDelegationRewards RPC method.
 */
export interface QueryOperatorDelegationRewardsResponse {
  /** rewards defines the rewards accrued by a delegation. */
  rewards: DecPool[];
}

/**
 * QueryServiceDelegationRewardsRequest is the request type for the
 * Query/ServiceDelegationRewards RPC method.
 */
export interface QueryServiceDelegationRewardsRequest {
  /** delegator_address defines the delegator address to query for. */
  delegatorAddress: string;
  /** service_id defines the service ID to query for. */
  serviceId: number;
}

/**
 * QueryServiceDelegationRewardsResponse is the response type for the
 * Query/ServiceDelegationRewards RPC method.
 */
export interface QueryServiceDelegationRewardsResponse {
  /** rewards defines the rewards accrued by a delegation. */
  rewards: DecPool[];
}

/**
 * QueryDelegatorTotalRewardsRequest is the request type for the
 * Query/DelegatorTotalRewards RPC method.
 */
export interface QueryDelegatorTotalRewardsRequest {
  /** delegator_address defines the delegator address to query for. */
  delegatorAddress: string;
}

/**
 * QueryDelegatorTotalRewardsResponse is the response type for the
 * Query/DelegatorTotalRewards RPC method.
 */
export interface QueryDelegatorTotalRewardsResponse {
  /** rewards defines all the rewards accrued by a delegator. */
  rewards: DelegationDelegatorReward[];
  /** total defines the sum of all the rewards. */
  total: DecPool[];
}

/**
 * QueryDelegatorWithdrawAddressRequest is the request type for the
 * Query/DelegatorWithdrawAddress RPC method.
 */
export interface QueryDelegatorWithdrawAddressRequest {
  /** delegator_address defines the delegator address to query for. */
  delegatorAddress: string;
}

/**
 * QueryDelegatorWithdrawAddressResponse is the response type for the
 * Query/DelegatorWithdrawAddress RPC method.
 */
export interface QueryDelegatorWithdrawAddressResponse {
  /** withdraw_address defines the delegator address to query for. */
  withdrawAddress: string;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryRewardsPlansRequest(): QueryRewardsPlansRequest {
  return { pagination: undefined };
}

export const QueryRewardsPlansRequest: MessageFns<QueryRewardsPlansRequest> = {
  encode(message: QueryRewardsPlansRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRewardsPlansRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRewardsPlansRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRewardsPlansRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryRewardsPlansRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryRewardsPlansRequest>): QueryRewardsPlansRequest {
    return QueryRewardsPlansRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryRewardsPlansRequest>): QueryRewardsPlansRequest {
    const message = createBaseQueryRewardsPlansRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryRewardsPlansResponse(): QueryRewardsPlansResponse {
  return { rewardsPlans: [], pagination: undefined };
}

export const QueryRewardsPlansResponse: MessageFns<QueryRewardsPlansResponse> = {
  encode(message: QueryRewardsPlansResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rewardsPlans) {
      RewardsPlan.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRewardsPlansResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRewardsPlansResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rewardsPlans.push(RewardsPlan.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRewardsPlansResponse {
    return {
      rewardsPlans: gt.Array.isArray(object?.rewardsPlans)
        ? object.rewardsPlans.map((e: any) => RewardsPlan.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryRewardsPlansResponse): unknown {
    const obj: any = {};
    if (message.rewardsPlans?.length) {
      obj.rewardsPlans = message.rewardsPlans.map((e) => RewardsPlan.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryRewardsPlansResponse>): QueryRewardsPlansResponse {
    return QueryRewardsPlansResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryRewardsPlansResponse>): QueryRewardsPlansResponse {
    const message = createBaseQueryRewardsPlansResponse();
    message.rewardsPlans = object.rewardsPlans?.map((e) => RewardsPlan.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryRewardsPlanRequest(): QueryRewardsPlanRequest {
  return { planId: 0 };
}

export const QueryRewardsPlanRequest: MessageFns<QueryRewardsPlanRequest> = {
  encode(message: QueryRewardsPlanRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.planId !== 0) {
      writer.uint32(8).uint64(message.planId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRewardsPlanRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRewardsPlanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.planId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRewardsPlanRequest {
    return { planId: isSet(object.planId) ? gt.Number(object.planId) : 0 };
  },

  toJSON(message: QueryRewardsPlanRequest): unknown {
    const obj: any = {};
    if (message.planId !== 0) {
      obj.planId = Math.round(message.planId);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryRewardsPlanRequest>): QueryRewardsPlanRequest {
    return QueryRewardsPlanRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryRewardsPlanRequest>): QueryRewardsPlanRequest {
    const message = createBaseQueryRewardsPlanRequest();
    message.planId = object.planId ?? 0;
    return message;
  },
};

function createBaseQueryRewardsPlanResponse(): QueryRewardsPlanResponse {
  return { rewardsPlan: undefined };
}

export const QueryRewardsPlanResponse: MessageFns<QueryRewardsPlanResponse> = {
  encode(message: QueryRewardsPlanResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rewardsPlan !== undefined) {
      RewardsPlan.encode(message.rewardsPlan, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryRewardsPlanResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryRewardsPlanResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rewardsPlan = RewardsPlan.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryRewardsPlanResponse {
    return { rewardsPlan: isSet(object.rewardsPlan) ? RewardsPlan.fromJSON(object.rewardsPlan) : undefined };
  },

  toJSON(message: QueryRewardsPlanResponse): unknown {
    const obj: any = {};
    if (message.rewardsPlan !== undefined) {
      obj.rewardsPlan = RewardsPlan.toJSON(message.rewardsPlan);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryRewardsPlanResponse>): QueryRewardsPlanResponse {
    return QueryRewardsPlanResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryRewardsPlanResponse>): QueryRewardsPlanResponse {
    const message = createBaseQueryRewardsPlanResponse();
    message.rewardsPlan = (object.rewardsPlan !== undefined && object.rewardsPlan !== null)
      ? RewardsPlan.fromPartial(object.rewardsPlan)
      : undefined;
    return message;
  },
};

function createBaseQueryPoolOutstandingRewardsRequest(): QueryPoolOutstandingRewardsRequest {
  return { poolId: 0 };
}

export const QueryPoolOutstandingRewardsRequest: MessageFns<QueryPoolOutstandingRewardsRequest> = {
  encode(message: QueryPoolOutstandingRewardsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.poolId !== 0) {
      writer.uint32(8).uint32(message.poolId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoolOutstandingRewardsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolOutstandingRewardsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.poolId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolOutstandingRewardsRequest {
    return { poolId: isSet(object.poolId) ? gt.Number(object.poolId) : 0 };
  },

  toJSON(message: QueryPoolOutstandingRewardsRequest): unknown {
    const obj: any = {};
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPoolOutstandingRewardsRequest>): QueryPoolOutstandingRewardsRequest {
    return QueryPoolOutstandingRewardsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryPoolOutstandingRewardsRequest>): QueryPoolOutstandingRewardsRequest {
    const message = createBaseQueryPoolOutstandingRewardsRequest();
    message.poolId = object.poolId ?? 0;
    return message;
  },
};

function createBaseQueryPoolOutstandingRewardsResponse(): QueryPoolOutstandingRewardsResponse {
  return { rewards: undefined };
}

export const QueryPoolOutstandingRewardsResponse: MessageFns<QueryPoolOutstandingRewardsResponse> = {
  encode(message: QueryPoolOutstandingRewardsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rewards !== undefined) {
      OutstandingRewards.encode(message.rewards, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoolOutstandingRewardsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolOutstandingRewardsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rewards = OutstandingRewards.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolOutstandingRewardsResponse {
    return { rewards: isSet(object.rewards) ? OutstandingRewards.fromJSON(object.rewards) : undefined };
  },

  toJSON(message: QueryPoolOutstandingRewardsResponse): unknown {
    const obj: any = {};
    if (message.rewards !== undefined) {
      obj.rewards = OutstandingRewards.toJSON(message.rewards);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPoolOutstandingRewardsResponse>): QueryPoolOutstandingRewardsResponse {
    return QueryPoolOutstandingRewardsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryPoolOutstandingRewardsResponse>): QueryPoolOutstandingRewardsResponse {
    const message = createBaseQueryPoolOutstandingRewardsResponse();
    message.rewards = (object.rewards !== undefined && object.rewards !== null)
      ? OutstandingRewards.fromPartial(object.rewards)
      : undefined;
    return message;
  },
};

function createBaseQueryOperatorOutstandingRewardsRequest(): QueryOperatorOutstandingRewardsRequest {
  return { operatorId: 0 };
}

export const QueryOperatorOutstandingRewardsRequest: MessageFns<QueryOperatorOutstandingRewardsRequest> = {
  encode(message: QueryOperatorOutstandingRewardsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operatorId !== 0) {
      writer.uint32(8).uint32(message.operatorId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorOutstandingRewardsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorOutstandingRewardsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorOutstandingRewardsRequest {
    return { operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0 };
  },

  toJSON(message: QueryOperatorOutstandingRewardsRequest): unknown {
    const obj: any = {};
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorOutstandingRewardsRequest>): QueryOperatorOutstandingRewardsRequest {
    return QueryOperatorOutstandingRewardsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorOutstandingRewardsRequest>): QueryOperatorOutstandingRewardsRequest {
    const message = createBaseQueryOperatorOutstandingRewardsRequest();
    message.operatorId = object.operatorId ?? 0;
    return message;
  },
};

function createBaseQueryOperatorOutstandingRewardsResponse(): QueryOperatorOutstandingRewardsResponse {
  return { rewards: undefined };
}

export const QueryOperatorOutstandingRewardsResponse: MessageFns<QueryOperatorOutstandingRewardsResponse> = {
  encode(message: QueryOperatorOutstandingRewardsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rewards !== undefined) {
      OutstandingRewards.encode(message.rewards, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorOutstandingRewardsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorOutstandingRewardsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rewards = OutstandingRewards.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorOutstandingRewardsResponse {
    return { rewards: isSet(object.rewards) ? OutstandingRewards.fromJSON(object.rewards) : undefined };
  },

  toJSON(message: QueryOperatorOutstandingRewardsResponse): unknown {
    const obj: any = {};
    if (message.rewards !== undefined) {
      obj.rewards = OutstandingRewards.toJSON(message.rewards);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorOutstandingRewardsResponse>): QueryOperatorOutstandingRewardsResponse {
    return QueryOperatorOutstandingRewardsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorOutstandingRewardsResponse>): QueryOperatorOutstandingRewardsResponse {
    const message = createBaseQueryOperatorOutstandingRewardsResponse();
    message.rewards = (object.rewards !== undefined && object.rewards !== null)
      ? OutstandingRewards.fromPartial(object.rewards)
      : undefined;
    return message;
  },
};

function createBaseQueryServiceOutstandingRewardsRequest(): QueryServiceOutstandingRewardsRequest {
  return { serviceId: 0 };
}

export const QueryServiceOutstandingRewardsRequest: MessageFns<QueryServiceOutstandingRewardsRequest> = {
  encode(message: QueryServiceOutstandingRewardsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceId !== 0) {
      writer.uint32(8).uint32(message.serviceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryServiceOutstandingRewardsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryServiceOutstandingRewardsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryServiceOutstandingRewardsRequest {
    return { serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0 };
  },

  toJSON(message: QueryServiceOutstandingRewardsRequest): unknown {
    const obj: any = {};
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryServiceOutstandingRewardsRequest>): QueryServiceOutstandingRewardsRequest {
    return QueryServiceOutstandingRewardsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryServiceOutstandingRewardsRequest>): QueryServiceOutstandingRewardsRequest {
    const message = createBaseQueryServiceOutstandingRewardsRequest();
    message.serviceId = object.serviceId ?? 0;
    return message;
  },
};

function createBaseQueryServiceOutstandingRewardsResponse(): QueryServiceOutstandingRewardsResponse {
  return { rewards: undefined };
}

export const QueryServiceOutstandingRewardsResponse: MessageFns<QueryServiceOutstandingRewardsResponse> = {
  encode(message: QueryServiceOutstandingRewardsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rewards !== undefined) {
      OutstandingRewards.encode(message.rewards, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryServiceOutstandingRewardsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryServiceOutstandingRewardsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rewards = OutstandingRewards.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryServiceOutstandingRewardsResponse {
    return { rewards: isSet(object.rewards) ? OutstandingRewards.fromJSON(object.rewards) : undefined };
  },

  toJSON(message: QueryServiceOutstandingRewardsResponse): unknown {
    const obj: any = {};
    if (message.rewards !== undefined) {
      obj.rewards = OutstandingRewards.toJSON(message.rewards);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryServiceOutstandingRewardsResponse>): QueryServiceOutstandingRewardsResponse {
    return QueryServiceOutstandingRewardsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryServiceOutstandingRewardsResponse>): QueryServiceOutstandingRewardsResponse {
    const message = createBaseQueryServiceOutstandingRewardsResponse();
    message.rewards = (object.rewards !== undefined && object.rewards !== null)
      ? OutstandingRewards.fromPartial(object.rewards)
      : undefined;
    return message;
  },
};

function createBaseQueryOperatorCommissionRequest(): QueryOperatorCommissionRequest {
  return { operatorId: 0 };
}

export const QueryOperatorCommissionRequest: MessageFns<QueryOperatorCommissionRequest> = {
  encode(message: QueryOperatorCommissionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operatorId !== 0) {
      writer.uint32(8).uint32(message.operatorId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorCommissionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorCommissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorCommissionRequest {
    return { operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0 };
  },

  toJSON(message: QueryOperatorCommissionRequest): unknown {
    const obj: any = {};
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorCommissionRequest>): QueryOperatorCommissionRequest {
    return QueryOperatorCommissionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorCommissionRequest>): QueryOperatorCommissionRequest {
    const message = createBaseQueryOperatorCommissionRequest();
    message.operatorId = object.operatorId ?? 0;
    return message;
  },
};

function createBaseQueryOperatorCommissionResponse(): QueryOperatorCommissionResponse {
  return { commission: undefined };
}

export const QueryOperatorCommissionResponse: MessageFns<QueryOperatorCommissionResponse> = {
  encode(message: QueryOperatorCommissionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commission !== undefined) {
      AccumulatedCommission.encode(message.commission, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorCommissionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorCommissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.commission = AccumulatedCommission.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorCommissionResponse {
    return { commission: isSet(object.commission) ? AccumulatedCommission.fromJSON(object.commission) : undefined };
  },

  toJSON(message: QueryOperatorCommissionResponse): unknown {
    const obj: any = {};
    if (message.commission !== undefined) {
      obj.commission = AccumulatedCommission.toJSON(message.commission);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorCommissionResponse>): QueryOperatorCommissionResponse {
    return QueryOperatorCommissionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorCommissionResponse>): QueryOperatorCommissionResponse {
    const message = createBaseQueryOperatorCommissionResponse();
    message.commission = (object.commission !== undefined && object.commission !== null)
      ? AccumulatedCommission.fromPartial(object.commission)
      : undefined;
    return message;
  },
};

function createBaseQueryPoolDelegationRewardsRequest(): QueryPoolDelegationRewardsRequest {
  return { delegatorAddress: "", poolId: 0 };
}

export const QueryPoolDelegationRewardsRequest: MessageFns<QueryPoolDelegationRewardsRequest> = {
  encode(message: QueryPoolDelegationRewardsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.poolId !== 0) {
      writer.uint32(16).uint32(message.poolId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoolDelegationRewardsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolDelegationRewardsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.poolId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolDelegationRewardsRequest {
    return {
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
      poolId: isSet(object.poolId) ? gt.Number(object.poolId) : 0,
    };
  },

  toJSON(message: QueryPoolDelegationRewardsRequest): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPoolDelegationRewardsRequest>): QueryPoolDelegationRewardsRequest {
    return QueryPoolDelegationRewardsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryPoolDelegationRewardsRequest>): QueryPoolDelegationRewardsRequest {
    const message = createBaseQueryPoolDelegationRewardsRequest();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.poolId = object.poolId ?? 0;
    return message;
  },
};

function createBaseQueryPoolDelegationRewardsResponse(): QueryPoolDelegationRewardsResponse {
  return { rewards: [] };
}

export const QueryPoolDelegationRewardsResponse: MessageFns<QueryPoolDelegationRewardsResponse> = {
  encode(message: QueryPoolDelegationRewardsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rewards) {
      DecPool.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoolDelegationRewardsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolDelegationRewardsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rewards.push(DecPool.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolDelegationRewardsResponse {
    return { rewards: gt.Array.isArray(object?.rewards) ? object.rewards.map((e: any) => DecPool.fromJSON(e)) : [] };
  },

  toJSON(message: QueryPoolDelegationRewardsResponse): unknown {
    const obj: any = {};
    if (message.rewards?.length) {
      obj.rewards = message.rewards.map((e) => DecPool.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPoolDelegationRewardsResponse>): QueryPoolDelegationRewardsResponse {
    return QueryPoolDelegationRewardsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryPoolDelegationRewardsResponse>): QueryPoolDelegationRewardsResponse {
    const message = createBaseQueryPoolDelegationRewardsResponse();
    message.rewards = object.rewards?.map((e) => DecPool.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryOperatorDelegationRewardsRequest(): QueryOperatorDelegationRewardsRequest {
  return { delegatorAddress: "", operatorId: 0 };
}

export const QueryOperatorDelegationRewardsRequest: MessageFns<QueryOperatorDelegationRewardsRequest> = {
  encode(message: QueryOperatorDelegationRewardsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.operatorId !== 0) {
      writer.uint32(16).uint32(message.operatorId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorDelegationRewardsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorDelegationRewardsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorDelegationRewardsRequest {
    return {
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
      operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0,
    };
  },

  toJSON(message: QueryOperatorDelegationRewardsRequest): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorDelegationRewardsRequest>): QueryOperatorDelegationRewardsRequest {
    return QueryOperatorDelegationRewardsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorDelegationRewardsRequest>): QueryOperatorDelegationRewardsRequest {
    const message = createBaseQueryOperatorDelegationRewardsRequest();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.operatorId = object.operatorId ?? 0;
    return message;
  },
};

function createBaseQueryOperatorDelegationRewardsResponse(): QueryOperatorDelegationRewardsResponse {
  return { rewards: [] };
}

export const QueryOperatorDelegationRewardsResponse: MessageFns<QueryOperatorDelegationRewardsResponse> = {
  encode(message: QueryOperatorDelegationRewardsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rewards) {
      DecPool.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorDelegationRewardsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorDelegationRewardsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rewards.push(DecPool.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorDelegationRewardsResponse {
    return { rewards: gt.Array.isArray(object?.rewards) ? object.rewards.map((e: any) => DecPool.fromJSON(e)) : [] };
  },

  toJSON(message: QueryOperatorDelegationRewardsResponse): unknown {
    const obj: any = {};
    if (message.rewards?.length) {
      obj.rewards = message.rewards.map((e) => DecPool.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorDelegationRewardsResponse>): QueryOperatorDelegationRewardsResponse {
    return QueryOperatorDelegationRewardsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorDelegationRewardsResponse>): QueryOperatorDelegationRewardsResponse {
    const message = createBaseQueryOperatorDelegationRewardsResponse();
    message.rewards = object.rewards?.map((e) => DecPool.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryServiceDelegationRewardsRequest(): QueryServiceDelegationRewardsRequest {
  return { delegatorAddress: "", serviceId: 0 };
}

export const QueryServiceDelegationRewardsRequest: MessageFns<QueryServiceDelegationRewardsRequest> = {
  encode(message: QueryServiceDelegationRewardsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.serviceId !== 0) {
      writer.uint32(16).uint32(message.serviceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryServiceDelegationRewardsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryServiceDelegationRewardsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryServiceDelegationRewardsRequest {
    return {
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
    };
  },

  toJSON(message: QueryServiceDelegationRewardsRequest): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryServiceDelegationRewardsRequest>): QueryServiceDelegationRewardsRequest {
    return QueryServiceDelegationRewardsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryServiceDelegationRewardsRequest>): QueryServiceDelegationRewardsRequest {
    const message = createBaseQueryServiceDelegationRewardsRequest();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.serviceId = object.serviceId ?? 0;
    return message;
  },
};

function createBaseQueryServiceDelegationRewardsResponse(): QueryServiceDelegationRewardsResponse {
  return { rewards: [] };
}

export const QueryServiceDelegationRewardsResponse: MessageFns<QueryServiceDelegationRewardsResponse> = {
  encode(message: QueryServiceDelegationRewardsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rewards) {
      DecPool.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryServiceDelegationRewardsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryServiceDelegationRewardsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rewards.push(DecPool.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryServiceDelegationRewardsResponse {
    return { rewards: gt.Array.isArray(object?.rewards) ? object.rewards.map((e: any) => DecPool.fromJSON(e)) : [] };
  },

  toJSON(message: QueryServiceDelegationRewardsResponse): unknown {
    const obj: any = {};
    if (message.rewards?.length) {
      obj.rewards = message.rewards.map((e) => DecPool.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryServiceDelegationRewardsResponse>): QueryServiceDelegationRewardsResponse {
    return QueryServiceDelegationRewardsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryServiceDelegationRewardsResponse>): QueryServiceDelegationRewardsResponse {
    const message = createBaseQueryServiceDelegationRewardsResponse();
    message.rewards = object.rewards?.map((e) => DecPool.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryDelegatorTotalRewardsRequest(): QueryDelegatorTotalRewardsRequest {
  return { delegatorAddress: "" };
}

export const QueryDelegatorTotalRewardsRequest: MessageFns<QueryDelegatorTotalRewardsRequest> = {
  encode(message: QueryDelegatorTotalRewardsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorTotalRewardsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorTotalRewardsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorTotalRewardsRequest {
    return { delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "" };
  },

  toJSON(message: QueryDelegatorTotalRewardsRequest): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorTotalRewardsRequest>): QueryDelegatorTotalRewardsRequest {
    return QueryDelegatorTotalRewardsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorTotalRewardsRequest>): QueryDelegatorTotalRewardsRequest {
    const message = createBaseQueryDelegatorTotalRewardsRequest();
    message.delegatorAddress = object.delegatorAddress ?? "";
    return message;
  },
};

function createBaseQueryDelegatorTotalRewardsResponse(): QueryDelegatorTotalRewardsResponse {
  return { rewards: [], total: [] };
}

export const QueryDelegatorTotalRewardsResponse: MessageFns<QueryDelegatorTotalRewardsResponse> = {
  encode(message: QueryDelegatorTotalRewardsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rewards) {
      DelegationDelegatorReward.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.total) {
      DecPool.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorTotalRewardsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorTotalRewardsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rewards.push(DelegationDelegatorReward.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.total.push(DecPool.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorTotalRewardsResponse {
    return {
      rewards: gt.Array.isArray(object?.rewards)
        ? object.rewards.map((e: any) => DelegationDelegatorReward.fromJSON(e))
        : [],
      total: gt.Array.isArray(object?.total) ? object.total.map((e: any) => DecPool.fromJSON(e)) : [],
    };
  },

  toJSON(message: QueryDelegatorTotalRewardsResponse): unknown {
    const obj: any = {};
    if (message.rewards?.length) {
      obj.rewards = message.rewards.map((e) => DelegationDelegatorReward.toJSON(e));
    }
    if (message.total?.length) {
      obj.total = message.total.map((e) => DecPool.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorTotalRewardsResponse>): QueryDelegatorTotalRewardsResponse {
    return QueryDelegatorTotalRewardsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorTotalRewardsResponse>): QueryDelegatorTotalRewardsResponse {
    const message = createBaseQueryDelegatorTotalRewardsResponse();
    message.rewards = object.rewards?.map((e) => DelegationDelegatorReward.fromPartial(e)) || [];
    message.total = object.total?.map((e) => DecPool.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryDelegatorWithdrawAddressRequest(): QueryDelegatorWithdrawAddressRequest {
  return { delegatorAddress: "" };
}

export const QueryDelegatorWithdrawAddressRequest: MessageFns<QueryDelegatorWithdrawAddressRequest> = {
  encode(message: QueryDelegatorWithdrawAddressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorWithdrawAddressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorWithdrawAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorWithdrawAddressRequest {
    return { delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "" };
  },

  toJSON(message: QueryDelegatorWithdrawAddressRequest): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorWithdrawAddressRequest>): QueryDelegatorWithdrawAddressRequest {
    return QueryDelegatorWithdrawAddressRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorWithdrawAddressRequest>): QueryDelegatorWithdrawAddressRequest {
    const message = createBaseQueryDelegatorWithdrawAddressRequest();
    message.delegatorAddress = object.delegatorAddress ?? "";
    return message;
  },
};

function createBaseQueryDelegatorWithdrawAddressResponse(): QueryDelegatorWithdrawAddressResponse {
  return { withdrawAddress: "" };
}

export const QueryDelegatorWithdrawAddressResponse: MessageFns<QueryDelegatorWithdrawAddressResponse> = {
  encode(message: QueryDelegatorWithdrawAddressResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.withdrawAddress !== "") {
      writer.uint32(10).string(message.withdrawAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorWithdrawAddressResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorWithdrawAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.withdrawAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorWithdrawAddressResponse {
    return { withdrawAddress: isSet(object.withdrawAddress) ? gt.String(object.withdrawAddress) : "" };
  },

  toJSON(message: QueryDelegatorWithdrawAddressResponse): unknown {
    const obj: any = {};
    if (message.withdrawAddress !== "") {
      obj.withdrawAddress = message.withdrawAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorWithdrawAddressResponse>): QueryDelegatorWithdrawAddressResponse {
    return QueryDelegatorWithdrawAddressResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorWithdrawAddressResponse>): QueryDelegatorWithdrawAddressResponse {
    const message = createBaseQueryDelegatorWithdrawAddressResponse();
    message.withdrawAddress = object.withdrawAddress ?? "";
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /**
   * Params defines a gRPC query method that returns the parameters of the
   * module.
   */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** RewardsPlans queries all rewards plans. */
  RewardsPlans(request: QueryRewardsPlansRequest): Promise<QueryRewardsPlansResponse>;
  /** RewardsPlan queries a specific rewards plan by its ID. */
  RewardsPlan(request: QueryRewardsPlanRequest): Promise<QueryRewardsPlanResponse>;
  /** PoolOutstandingRewards queries rewards of a pool. */
  PoolOutstandingRewards(request: QueryPoolOutstandingRewardsRequest): Promise<QueryPoolOutstandingRewardsResponse>;
  /** OperatorOutstandingRewards queries rewards of an operator. */
  OperatorOutstandingRewards(
    request: QueryOperatorOutstandingRewardsRequest,
  ): Promise<QueryOperatorOutstandingRewardsResponse>;
  /** ServiceOutstandingRewards queries rewards of a service. */
  ServiceOutstandingRewards(
    request: QueryServiceOutstandingRewardsRequest,
  ): Promise<QueryServiceOutstandingRewardsResponse>;
  /** OperatorCommission queries accumulated commission for an operator. */
  OperatorCommission(request: QueryOperatorCommissionRequest): Promise<QueryOperatorCommissionResponse>;
  /**
   * PoolDelegationRewards queries the total rewards accrued by a pool
   * delegation.
   */
  PoolDelegationRewards(request: QueryPoolDelegationRewardsRequest): Promise<QueryPoolDelegationRewardsResponse>;
  /**
   * OperatorDelegationRewards queries the total rewards accrued by a operator
   * delegation.
   */
  OperatorDelegationRewards(
    request: QueryOperatorDelegationRewardsRequest,
  ): Promise<QueryOperatorDelegationRewardsResponse>;
  /**
   * ServiceDelegationRewards queries the total rewards accrued by a service
   * delegation.
   */
  ServiceDelegationRewards(
    request: QueryServiceDelegationRewardsRequest,
  ): Promise<QueryServiceDelegationRewardsResponse>;
  /**
   * DelegatorTotalRewards queries the total rewards accrued by a single
   * delegator
   */
  DelegatorTotalRewards(request: QueryDelegatorTotalRewardsRequest): Promise<QueryDelegatorTotalRewardsResponse>;
  /** DelegatorWithdrawAddress queries withdraw address of a delegator. */
  DelegatorWithdrawAddress(
    request: QueryDelegatorWithdrawAddressRequest,
  ): Promise<QueryDelegatorWithdrawAddressResponse>;
}

export const QueryServiceName = "milkyway.rewards.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.RewardsPlans = this.RewardsPlans.bind(this);
    this.RewardsPlan = this.RewardsPlan.bind(this);
    this.PoolOutstandingRewards = this.PoolOutstandingRewards.bind(this);
    this.OperatorOutstandingRewards = this.OperatorOutstandingRewards.bind(this);
    this.ServiceOutstandingRewards = this.ServiceOutstandingRewards.bind(this);
    this.OperatorCommission = this.OperatorCommission.bind(this);
    this.PoolDelegationRewards = this.PoolDelegationRewards.bind(this);
    this.OperatorDelegationRewards = this.OperatorDelegationRewards.bind(this);
    this.ServiceDelegationRewards = this.ServiceDelegationRewards.bind(this);
    this.DelegatorTotalRewards = this.DelegatorTotalRewards.bind(this);
    this.DelegatorWithdrawAddress = this.DelegatorWithdrawAddress.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  RewardsPlans(request: QueryRewardsPlansRequest): Promise<QueryRewardsPlansResponse> {
    const data = QueryRewardsPlansRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RewardsPlans", data);
    return promise.then((data) => QueryRewardsPlansResponse.decode(new BinaryReader(data)));
  }

  RewardsPlan(request: QueryRewardsPlanRequest): Promise<QueryRewardsPlanResponse> {
    const data = QueryRewardsPlanRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RewardsPlan", data);
    return promise.then((data) => QueryRewardsPlanResponse.decode(new BinaryReader(data)));
  }

  PoolOutstandingRewards(request: QueryPoolOutstandingRewardsRequest): Promise<QueryPoolOutstandingRewardsResponse> {
    const data = QueryPoolOutstandingRewardsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PoolOutstandingRewards", data);
    return promise.then((data) => QueryPoolOutstandingRewardsResponse.decode(new BinaryReader(data)));
  }

  OperatorOutstandingRewards(
    request: QueryOperatorOutstandingRewardsRequest,
  ): Promise<QueryOperatorOutstandingRewardsResponse> {
    const data = QueryOperatorOutstandingRewardsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "OperatorOutstandingRewards", data);
    return promise.then((data) => QueryOperatorOutstandingRewardsResponse.decode(new BinaryReader(data)));
  }

  ServiceOutstandingRewards(
    request: QueryServiceOutstandingRewardsRequest,
  ): Promise<QueryServiceOutstandingRewardsResponse> {
    const data = QueryServiceOutstandingRewardsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ServiceOutstandingRewards", data);
    return promise.then((data) => QueryServiceOutstandingRewardsResponse.decode(new BinaryReader(data)));
  }

  OperatorCommission(request: QueryOperatorCommissionRequest): Promise<QueryOperatorCommissionResponse> {
    const data = QueryOperatorCommissionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "OperatorCommission", data);
    return promise.then((data) => QueryOperatorCommissionResponse.decode(new BinaryReader(data)));
  }

  PoolDelegationRewards(request: QueryPoolDelegationRewardsRequest): Promise<QueryPoolDelegationRewardsResponse> {
    const data = QueryPoolDelegationRewardsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PoolDelegationRewards", data);
    return promise.then((data) => QueryPoolDelegationRewardsResponse.decode(new BinaryReader(data)));
  }

  OperatorDelegationRewards(
    request: QueryOperatorDelegationRewardsRequest,
  ): Promise<QueryOperatorDelegationRewardsResponse> {
    const data = QueryOperatorDelegationRewardsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "OperatorDelegationRewards", data);
    return promise.then((data) => QueryOperatorDelegationRewardsResponse.decode(new BinaryReader(data)));
  }

  ServiceDelegationRewards(
    request: QueryServiceDelegationRewardsRequest,
  ): Promise<QueryServiceDelegationRewardsResponse> {
    const data = QueryServiceDelegationRewardsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ServiceDelegationRewards", data);
    return promise.then((data) => QueryServiceDelegationRewardsResponse.decode(new BinaryReader(data)));
  }

  DelegatorTotalRewards(request: QueryDelegatorTotalRewardsRequest): Promise<QueryDelegatorTotalRewardsResponse> {
    const data = QueryDelegatorTotalRewardsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DelegatorTotalRewards", data);
    return promise.then((data) => QueryDelegatorTotalRewardsResponse.decode(new BinaryReader(data)));
  }

  DelegatorWithdrawAddress(
    request: QueryDelegatorWithdrawAddressRequest,
  ): Promise<QueryDelegatorWithdrawAddressResponse> {
    const data = QueryDelegatorWithdrawAddressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DelegatorWithdrawAddress", data);
    return promise.then((data) => QueryDelegatorWithdrawAddressResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = gt.Number(int64.toString());
  if (num > gt.Number.MAX_SAFE_INTEGER) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < gt.Number.MIN_SAFE_INTEGER) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
