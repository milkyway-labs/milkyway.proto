// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: milkyway/rewards/v1/models.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin, DecCoin } from "../../../cosmos/base/v1beta1/coin";
import { Any } from "../../../google/protobuf/any";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { DelegationType, delegationTypeFromJSON, delegationTypeToJSON } from "../../restaking/v1/models";

export const protobufPackage = "milkyway.rewards.v1";

/** RewardsPlan represents a rewards allocation plan. */
export interface RewardsPlan {
  /** ID is the unique identifier of the plan. */
  id: number;
  /** Description is the description of the plan. */
  description: string;
  /** ServiceID is the service ID which the plan is related to. */
  serviceId: number;
  /**
   * AmountPerDay is the amount of rewards to be distributed, per day.
   * The rewards amount for every block will be calculated based on this.
   */
  amountPerDay: Coin[];
  /** StartTime is the starting time of the plan. */
  startTime:
    | Date
    | undefined;
  /** EndTime is the ending time of the plan. */
  endTime:
    | Date
    | undefined;
  /**
   * RewardsPool is the address where rewards to be distributed are stored.
   * If the rewards pool doesn't have enough funds to be distributed, then
   * the rewards allocation for this plan will be skipped.
   */
  rewardsPool: string;
  /** PoolsDistribution is the rewards distribution parameters for pools. */
  poolsDistribution:
    | Distribution
    | undefined;
  /** OperatorsDistribution is the rewards distribution parameters for operators. */
  operatorsDistribution:
    | Distribution
    | undefined;
  /** UsersDistribution is the rewards distribution parameters for users. */
  usersDistribution: UsersDistribution | undefined;
}

/**
 * Distribution represents distribution parameters for restaking
 * pools/operators.
 */
export interface Distribution {
  /**
   * DelegationType is the type of delegation target which this distribution
   * parameters are for. It can be one of DELEGATION_TYPE_POOL and
   * DELEGATION_TYPE_OPERATOR.
   */
  delegationType: DelegationType;
  /**
   * Weight is the rewards distribution weight among other types of delegation
   * targets.
   */
  weight: number;
  /** Type is one of basic/weighted/egalitarian distributions. */
  type: Any | undefined;
}

/**
 * DistributionTypeBasic represents the simplest form of distribution.
 * Rewards are allocated to entities based on their delegation values.
 * For example, if there are three operators with delegation values of
 * $1000, $1500, and $2000, their rewards will be distributed in a
 * 2:3:4 ratio.
 */
export interface DistributionTypeBasic {
}

/**
 * DistributionTypeWeighted is a type of distribution where the reward
 * weights for each entity are explicitly defined. Only the specified
 * delegation targets will receive rewards.
 */
export interface DistributionTypeWeighted {
  weights: DistributionWeight[];
}

/** DistributionWeight defines a delegation target and its assigned weight. */
export interface DistributionWeight {
  delegationTargetId: number;
  weight: number;
}

/**
 * DistributionTypeEgalitarian is a distribution method where all entities
 * receive an equal share of rewards(a.k.a. egalitarian method).
 */
export interface DistributionTypeEgalitarian {
}

/**
 * Distribution represents distribution parameters for delegators who directly
 * staked their tokens to the service.
 */
export interface UsersDistribution {
  /**
   * Weight is the rewards distribution weight among other types of delegation
   * targets.
   */
  weight: number;
  /**
   * Type defines the rewards distribution method. Currently only the basic
   * distribution is allowed.
   */
  type: Any | undefined;
}

/**
 * UsersDistributionTypeBasic represents the simplest form of distribution.
 * Rewards are allocated to entities based on their delegation values.
 * For example, if there are three users with delegation values of
 * $1000, $1500, and $2000, their rewards will be distributed in a
 * 2:3:4 ratio.
 */
export interface UsersDistributionTypeBasic {
}

/**
 * HistoricalRewards represents historical rewards for a delegation target.
 * Height is implicit within the store key.
 * Cumulative reward ratio is the sum from the zeroeth period
 * until this period of rewards / tokens, per the spec.
 * The reference count indicates the number of objects
 * which might need to reference this historical entry at any point.
 * ReferenceCount =
 *    number of outstanding delegations which ended the associated period (and
 *    might need to read that record)
 *  + number of slashes which ended the associated period (and might need to
 *  read that record)
 *  + one per validator for the zeroeth period, set on initialization
 */
export interface HistoricalRewards {
  cumulativeRewardRatios: ServicePool[];
  referenceCount: number;
}

/**
 * CurrentRewards represents current rewards and current
 * period for a delegation target kept as a running counter and incremented
 * each block as long as the delegation target's tokens remain constant.
 */
export interface CurrentRewards {
  rewards: ServicePool[];
  period: number;
}

/**
 * OutstandingRewards represents outstanding (un-withdrawn) rewards
 * for a delegation target inexpensive to track, allows simple sanity checks.
 */
export interface OutstandingRewards {
  rewards: DecPool[];
}

/**
 * AccumulatedCommission represents accumulated commission
 * for a delegation target kept as a running counter, can be withdrawn at any
 * time.
 */
export interface AccumulatedCommission {
  commissions: DecPool[];
}

/**
 * DelegatorStartingInfo represents the starting info for a delegator reward
 * period. It tracks the previous delegation target period, the delegation's
 * amount of staking token, and the creation height (to check later on if any
 * slashes have occurred). NOTE: Even though validators are slashed to whole
 * staking tokens, the delegators within the validator may be left with less
 * than a full token, thus sdk.Dec is used.
 */
export interface DelegatorStartingInfo {
  previousPeriod: number;
  stakes: DecCoin[];
  height: number;
}

/**
 * DelegationDelegatorReward represents the properties of a delegator's
 * delegation reward. The delegator address implicit in the within the
 * query request.
 */
export interface DelegationDelegatorReward {
  delegationType: DelegationType;
  delegationTargetId: number;
  reward: DecPool[];
}

/**
 * PoolServiceTotalDelegatorShares represents the total delegator shares for a
 * pool-service pair.
 */
export interface PoolServiceTotalDelegatorShares {
  poolId: number;
  serviceId: number;
  shares: DecCoin[];
}

/**
 * Pool is a Coins wrapper with denom which represents the rewards pool for the
 * given denom. It is used to represent the rewards associated with the denom.
 */
export interface Pool {
  denom: string;
  coins: Coin[];
}

/**
 * DecPool is a DecCoins wrapper with denom which represents the rewards pool
 * for the given denom. It is used to represent the rewards associated with the
 * denom.
 */
export interface DecPool {
  denom: string;
  decCoins: DecCoin[];
}

/** ServicePool represents the rewards pool for a service. */
export interface ServicePool {
  serviceId: number;
  decPools: DecPool[];
}

function createBaseRewardsPlan(): RewardsPlan {
  return {
    id: 0,
    description: "",
    serviceId: 0,
    amountPerDay: [],
    startTime: undefined,
    endTime: undefined,
    rewardsPool: "",
    poolsDistribution: undefined,
    operatorsDistribution: undefined,
    usersDistribution: undefined,
  };
}

export const RewardsPlan: MessageFns<RewardsPlan> = {
  encode(message: RewardsPlan, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.serviceId !== 0) {
      writer.uint32(24).uint32(message.serviceId);
    }
    for (const v of message.amountPerDay) {
      Coin.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(42).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(50).fork()).join();
    }
    if (message.rewardsPool !== "") {
      writer.uint32(58).string(message.rewardsPool);
    }
    if (message.poolsDistribution !== undefined) {
      Distribution.encode(message.poolsDistribution, writer.uint32(66).fork()).join();
    }
    if (message.operatorsDistribution !== undefined) {
      Distribution.encode(message.operatorsDistribution, writer.uint32(74).fork()).join();
    }
    if (message.usersDistribution !== undefined) {
      UsersDistribution.encode(message.usersDistribution, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RewardsPlan {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRewardsPlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.amountPerDay.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.rewardsPool = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.poolsDistribution = Distribution.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.operatorsDistribution = Distribution.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.usersDistribution = UsersDistribution.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RewardsPlan {
    return {
      id: isSet(object.id) ? gt.Number(object.id) : 0,
      description: isSet(object.description) ? gt.String(object.description) : "",
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
      amountPerDay: gt.Array.isArray(object?.amountPerDay) ? object.amountPerDay.map((e: any) => Coin.fromJSON(e)) : [],
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      rewardsPool: isSet(object.rewardsPool) ? gt.String(object.rewardsPool) : "",
      poolsDistribution: isSet(object.poolsDistribution) ? Distribution.fromJSON(object.poolsDistribution) : undefined,
      operatorsDistribution: isSet(object.operatorsDistribution)
        ? Distribution.fromJSON(object.operatorsDistribution)
        : undefined,
      usersDistribution: isSet(object.usersDistribution)
        ? UsersDistribution.fromJSON(object.usersDistribution)
        : undefined,
    };
  },

  toJSON(message: RewardsPlan): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    if (message.amountPerDay?.length) {
      obj.amountPerDay = message.amountPerDay.map((e) => Coin.toJSON(e));
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.rewardsPool !== "") {
      obj.rewardsPool = message.rewardsPool;
    }
    if (message.poolsDistribution !== undefined) {
      obj.poolsDistribution = Distribution.toJSON(message.poolsDistribution);
    }
    if (message.operatorsDistribution !== undefined) {
      obj.operatorsDistribution = Distribution.toJSON(message.operatorsDistribution);
    }
    if (message.usersDistribution !== undefined) {
      obj.usersDistribution = UsersDistribution.toJSON(message.usersDistribution);
    }
    return obj;
  },

  create(base?: DeepPartial<RewardsPlan>): RewardsPlan {
    return RewardsPlan.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RewardsPlan>): RewardsPlan {
    const message = createBaseRewardsPlan();
    message.id = object.id ?? 0;
    message.description = object.description ?? "";
    message.serviceId = object.serviceId ?? 0;
    message.amountPerDay = object.amountPerDay?.map((e) => Coin.fromPartial(e)) || [];
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.rewardsPool = object.rewardsPool ?? "";
    message.poolsDistribution = (object.poolsDistribution !== undefined && object.poolsDistribution !== null)
      ? Distribution.fromPartial(object.poolsDistribution)
      : undefined;
    message.operatorsDistribution =
      (object.operatorsDistribution !== undefined && object.operatorsDistribution !== null)
        ? Distribution.fromPartial(object.operatorsDistribution)
        : undefined;
    message.usersDistribution = (object.usersDistribution !== undefined && object.usersDistribution !== null)
      ? UsersDistribution.fromPartial(object.usersDistribution)
      : undefined;
    return message;
  },
};

function createBaseDistribution(): Distribution {
  return { delegationType: 0, weight: 0, type: undefined };
}

export const Distribution: MessageFns<Distribution> = {
  encode(message: Distribution, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegationType !== 0) {
      writer.uint32(8).int32(message.delegationType);
    }
    if (message.weight !== 0) {
      writer.uint32(16).uint32(message.weight);
    }
    if (message.type !== undefined) {
      Any.encode(message.type, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Distribution {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDistribution();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.delegationType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.weight = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Distribution {
    return {
      delegationType: isSet(object.delegationType) ? delegationTypeFromJSON(object.delegationType) : 0,
      weight: isSet(object.weight) ? gt.Number(object.weight) : 0,
      type: isSet(object.type) ? Any.fromJSON(object.type) : undefined,
    };
  },

  toJSON(message: Distribution): unknown {
    const obj: any = {};
    if (message.delegationType !== 0) {
      obj.delegationType = delegationTypeToJSON(message.delegationType);
    }
    if (message.weight !== 0) {
      obj.weight = Math.round(message.weight);
    }
    if (message.type !== undefined) {
      obj.type = Any.toJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<Distribution>): Distribution {
    return Distribution.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Distribution>): Distribution {
    const message = createBaseDistribution();
    message.delegationType = object.delegationType ?? 0;
    message.weight = object.weight ?? 0;
    message.type = (object.type !== undefined && object.type !== null) ? Any.fromPartial(object.type) : undefined;
    return message;
  },
};

function createBaseDistributionTypeBasic(): DistributionTypeBasic {
  return {};
}

export const DistributionTypeBasic: MessageFns<DistributionTypeBasic> = {
  encode(_: DistributionTypeBasic, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DistributionTypeBasic {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDistributionTypeBasic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DistributionTypeBasic {
    return {};
  },

  toJSON(_: DistributionTypeBasic): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DistributionTypeBasic>): DistributionTypeBasic {
    return DistributionTypeBasic.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DistributionTypeBasic>): DistributionTypeBasic {
    const message = createBaseDistributionTypeBasic();
    return message;
  },
};

function createBaseDistributionTypeWeighted(): DistributionTypeWeighted {
  return { weights: [] };
}

export const DistributionTypeWeighted: MessageFns<DistributionTypeWeighted> = {
  encode(message: DistributionTypeWeighted, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.weights) {
      DistributionWeight.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DistributionTypeWeighted {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDistributionTypeWeighted();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.weights.push(DistributionWeight.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DistributionTypeWeighted {
    return {
      weights: gt.Array.isArray(object?.weights) ? object.weights.map((e: any) => DistributionWeight.fromJSON(e)) : [],
    };
  },

  toJSON(message: DistributionTypeWeighted): unknown {
    const obj: any = {};
    if (message.weights?.length) {
      obj.weights = message.weights.map((e) => DistributionWeight.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DistributionTypeWeighted>): DistributionTypeWeighted {
    return DistributionTypeWeighted.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DistributionTypeWeighted>): DistributionTypeWeighted {
    const message = createBaseDistributionTypeWeighted();
    message.weights = object.weights?.map((e) => DistributionWeight.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDistributionWeight(): DistributionWeight {
  return { delegationTargetId: 0, weight: 0 };
}

export const DistributionWeight: MessageFns<DistributionWeight> = {
  encode(message: DistributionWeight, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegationTargetId !== 0) {
      writer.uint32(8).uint32(message.delegationTargetId);
    }
    if (message.weight !== 0) {
      writer.uint32(16).uint32(message.weight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DistributionWeight {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDistributionWeight();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.delegationTargetId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.weight = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DistributionWeight {
    return {
      delegationTargetId: isSet(object.delegationTargetId) ? gt.Number(object.delegationTargetId) : 0,
      weight: isSet(object.weight) ? gt.Number(object.weight) : 0,
    };
  },

  toJSON(message: DistributionWeight): unknown {
    const obj: any = {};
    if (message.delegationTargetId !== 0) {
      obj.delegationTargetId = Math.round(message.delegationTargetId);
    }
    if (message.weight !== 0) {
      obj.weight = Math.round(message.weight);
    }
    return obj;
  },

  create(base?: DeepPartial<DistributionWeight>): DistributionWeight {
    return DistributionWeight.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DistributionWeight>): DistributionWeight {
    const message = createBaseDistributionWeight();
    message.delegationTargetId = object.delegationTargetId ?? 0;
    message.weight = object.weight ?? 0;
    return message;
  },
};

function createBaseDistributionTypeEgalitarian(): DistributionTypeEgalitarian {
  return {};
}

export const DistributionTypeEgalitarian: MessageFns<DistributionTypeEgalitarian> = {
  encode(_: DistributionTypeEgalitarian, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DistributionTypeEgalitarian {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDistributionTypeEgalitarian();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DistributionTypeEgalitarian {
    return {};
  },

  toJSON(_: DistributionTypeEgalitarian): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DistributionTypeEgalitarian>): DistributionTypeEgalitarian {
    return DistributionTypeEgalitarian.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DistributionTypeEgalitarian>): DistributionTypeEgalitarian {
    const message = createBaseDistributionTypeEgalitarian();
    return message;
  },
};

function createBaseUsersDistribution(): UsersDistribution {
  return { weight: 0, type: undefined };
}

export const UsersDistribution: MessageFns<UsersDistribution> = {
  encode(message: UsersDistribution, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.weight !== 0) {
      writer.uint32(8).uint32(message.weight);
    }
    if (message.type !== undefined) {
      Any.encode(message.type, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsersDistribution {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsersDistribution();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.weight = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UsersDistribution {
    return {
      weight: isSet(object.weight) ? gt.Number(object.weight) : 0,
      type: isSet(object.type) ? Any.fromJSON(object.type) : undefined,
    };
  },

  toJSON(message: UsersDistribution): unknown {
    const obj: any = {};
    if (message.weight !== 0) {
      obj.weight = Math.round(message.weight);
    }
    if (message.type !== undefined) {
      obj.type = Any.toJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<UsersDistribution>): UsersDistribution {
    return UsersDistribution.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UsersDistribution>): UsersDistribution {
    const message = createBaseUsersDistribution();
    message.weight = object.weight ?? 0;
    message.type = (object.type !== undefined && object.type !== null) ? Any.fromPartial(object.type) : undefined;
    return message;
  },
};

function createBaseUsersDistributionTypeBasic(): UsersDistributionTypeBasic {
  return {};
}

export const UsersDistributionTypeBasic: MessageFns<UsersDistributionTypeBasic> = {
  encode(_: UsersDistributionTypeBasic, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsersDistributionTypeBasic {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUsersDistributionTypeBasic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UsersDistributionTypeBasic {
    return {};
  },

  toJSON(_: UsersDistributionTypeBasic): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UsersDistributionTypeBasic>): UsersDistributionTypeBasic {
    return UsersDistributionTypeBasic.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UsersDistributionTypeBasic>): UsersDistributionTypeBasic {
    const message = createBaseUsersDistributionTypeBasic();
    return message;
  },
};

function createBaseHistoricalRewards(): HistoricalRewards {
  return { cumulativeRewardRatios: [], referenceCount: 0 };
}

export const HistoricalRewards: MessageFns<HistoricalRewards> = {
  encode(message: HistoricalRewards, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.cumulativeRewardRatios) {
      ServicePool.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.referenceCount !== 0) {
      writer.uint32(16).uint32(message.referenceCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HistoricalRewards {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHistoricalRewards();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cumulativeRewardRatios.push(ServicePool.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.referenceCount = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HistoricalRewards {
    return {
      cumulativeRewardRatios: gt.Array.isArray(object?.cumulativeRewardRatios)
        ? object.cumulativeRewardRatios.map((e: any) => ServicePool.fromJSON(e))
        : [],
      referenceCount: isSet(object.referenceCount) ? gt.Number(object.referenceCount) : 0,
    };
  },

  toJSON(message: HistoricalRewards): unknown {
    const obj: any = {};
    if (message.cumulativeRewardRatios?.length) {
      obj.cumulativeRewardRatios = message.cumulativeRewardRatios.map((e) => ServicePool.toJSON(e));
    }
    if (message.referenceCount !== 0) {
      obj.referenceCount = Math.round(message.referenceCount);
    }
    return obj;
  },

  create(base?: DeepPartial<HistoricalRewards>): HistoricalRewards {
    return HistoricalRewards.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HistoricalRewards>): HistoricalRewards {
    const message = createBaseHistoricalRewards();
    message.cumulativeRewardRatios = object.cumulativeRewardRatios?.map((e) => ServicePool.fromPartial(e)) || [];
    message.referenceCount = object.referenceCount ?? 0;
    return message;
  },
};

function createBaseCurrentRewards(): CurrentRewards {
  return { rewards: [], period: 0 };
}

export const CurrentRewards: MessageFns<CurrentRewards> = {
  encode(message: CurrentRewards, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rewards) {
      ServicePool.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.period !== 0) {
      writer.uint32(16).uint64(message.period);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CurrentRewards {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCurrentRewards();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rewards.push(ServicePool.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.period = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CurrentRewards {
    return {
      rewards: gt.Array.isArray(object?.rewards) ? object.rewards.map((e: any) => ServicePool.fromJSON(e)) : [],
      period: isSet(object.period) ? gt.Number(object.period) : 0,
    };
  },

  toJSON(message: CurrentRewards): unknown {
    const obj: any = {};
    if (message.rewards?.length) {
      obj.rewards = message.rewards.map((e) => ServicePool.toJSON(e));
    }
    if (message.period !== 0) {
      obj.period = Math.round(message.period);
    }
    return obj;
  },

  create(base?: DeepPartial<CurrentRewards>): CurrentRewards {
    return CurrentRewards.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CurrentRewards>): CurrentRewards {
    const message = createBaseCurrentRewards();
    message.rewards = object.rewards?.map((e) => ServicePool.fromPartial(e)) || [];
    message.period = object.period ?? 0;
    return message;
  },
};

function createBaseOutstandingRewards(): OutstandingRewards {
  return { rewards: [] };
}

export const OutstandingRewards: MessageFns<OutstandingRewards> = {
  encode(message: OutstandingRewards, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rewards) {
      DecPool.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutstandingRewards {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutstandingRewards();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rewards.push(DecPool.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutstandingRewards {
    return { rewards: gt.Array.isArray(object?.rewards) ? object.rewards.map((e: any) => DecPool.fromJSON(e)) : [] };
  },

  toJSON(message: OutstandingRewards): unknown {
    const obj: any = {};
    if (message.rewards?.length) {
      obj.rewards = message.rewards.map((e) => DecPool.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<OutstandingRewards>): OutstandingRewards {
    return OutstandingRewards.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OutstandingRewards>): OutstandingRewards {
    const message = createBaseOutstandingRewards();
    message.rewards = object.rewards?.map((e) => DecPool.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAccumulatedCommission(): AccumulatedCommission {
  return { commissions: [] };
}

export const AccumulatedCommission: MessageFns<AccumulatedCommission> = {
  encode(message: AccumulatedCommission, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.commissions) {
      DecPool.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccumulatedCommission {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccumulatedCommission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.commissions.push(DecPool.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccumulatedCommission {
    return {
      commissions: gt.Array.isArray(object?.commissions) ? object.commissions.map((e: any) => DecPool.fromJSON(e)) : [],
    };
  },

  toJSON(message: AccumulatedCommission): unknown {
    const obj: any = {};
    if (message.commissions?.length) {
      obj.commissions = message.commissions.map((e) => DecPool.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AccumulatedCommission>): AccumulatedCommission {
    return AccumulatedCommission.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccumulatedCommission>): AccumulatedCommission {
    const message = createBaseAccumulatedCommission();
    message.commissions = object.commissions?.map((e) => DecPool.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDelegatorStartingInfo(): DelegatorStartingInfo {
  return { previousPeriod: 0, stakes: [], height: 0 };
}

export const DelegatorStartingInfo: MessageFns<DelegatorStartingInfo> = {
  encode(message: DelegatorStartingInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.previousPeriod !== 0) {
      writer.uint32(8).uint64(message.previousPeriod);
    }
    for (const v of message.stakes) {
      DecCoin.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.height !== 0) {
      writer.uint32(24).uint64(message.height);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DelegatorStartingInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDelegatorStartingInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.previousPeriod = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stakes.push(DecCoin.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.height = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DelegatorStartingInfo {
    return {
      previousPeriod: isSet(object.previousPeriod) ? gt.Number(object.previousPeriod) : 0,
      stakes: gt.Array.isArray(object?.stakes) ? object.stakes.map((e: any) => DecCoin.fromJSON(e)) : [],
      height: isSet(object.height) ? gt.Number(object.height) : 0,
    };
  },

  toJSON(message: DelegatorStartingInfo): unknown {
    const obj: any = {};
    if (message.previousPeriod !== 0) {
      obj.previousPeriod = Math.round(message.previousPeriod);
    }
    if (message.stakes?.length) {
      obj.stakes = message.stakes.map((e) => DecCoin.toJSON(e));
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },

  create(base?: DeepPartial<DelegatorStartingInfo>): DelegatorStartingInfo {
    return DelegatorStartingInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DelegatorStartingInfo>): DelegatorStartingInfo {
    const message = createBaseDelegatorStartingInfo();
    message.previousPeriod = object.previousPeriod ?? 0;
    message.stakes = object.stakes?.map((e) => DecCoin.fromPartial(e)) || [];
    message.height = object.height ?? 0;
    return message;
  },
};

function createBaseDelegationDelegatorReward(): DelegationDelegatorReward {
  return { delegationType: 0, delegationTargetId: 0, reward: [] };
}

export const DelegationDelegatorReward: MessageFns<DelegationDelegatorReward> = {
  encode(message: DelegationDelegatorReward, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegationType !== 0) {
      writer.uint32(8).int32(message.delegationType);
    }
    if (message.delegationTargetId !== 0) {
      writer.uint32(16).uint32(message.delegationTargetId);
    }
    for (const v of message.reward) {
      DecPool.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DelegationDelegatorReward {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDelegationDelegatorReward();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.delegationType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.delegationTargetId = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reward.push(DecPool.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DelegationDelegatorReward {
    return {
      delegationType: isSet(object.delegationType) ? delegationTypeFromJSON(object.delegationType) : 0,
      delegationTargetId: isSet(object.delegationTargetId) ? gt.Number(object.delegationTargetId) : 0,
      reward: gt.Array.isArray(object?.reward) ? object.reward.map((e: any) => DecPool.fromJSON(e)) : [],
    };
  },

  toJSON(message: DelegationDelegatorReward): unknown {
    const obj: any = {};
    if (message.delegationType !== 0) {
      obj.delegationType = delegationTypeToJSON(message.delegationType);
    }
    if (message.delegationTargetId !== 0) {
      obj.delegationTargetId = Math.round(message.delegationTargetId);
    }
    if (message.reward?.length) {
      obj.reward = message.reward.map((e) => DecPool.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DelegationDelegatorReward>): DelegationDelegatorReward {
    return DelegationDelegatorReward.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DelegationDelegatorReward>): DelegationDelegatorReward {
    const message = createBaseDelegationDelegatorReward();
    message.delegationType = object.delegationType ?? 0;
    message.delegationTargetId = object.delegationTargetId ?? 0;
    message.reward = object.reward?.map((e) => DecPool.fromPartial(e)) || [];
    return message;
  },
};

function createBasePoolServiceTotalDelegatorShares(): PoolServiceTotalDelegatorShares {
  return { poolId: 0, serviceId: 0, shares: [] };
}

export const PoolServiceTotalDelegatorShares: MessageFns<PoolServiceTotalDelegatorShares> = {
  encode(message: PoolServiceTotalDelegatorShares, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.poolId !== 0) {
      writer.uint32(8).uint32(message.poolId);
    }
    if (message.serviceId !== 0) {
      writer.uint32(16).uint32(message.serviceId);
    }
    for (const v of message.shares) {
      DecCoin.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PoolServiceTotalDelegatorShares {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePoolServiceTotalDelegatorShares();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.poolId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.shares.push(DecCoin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PoolServiceTotalDelegatorShares {
    return {
      poolId: isSet(object.poolId) ? gt.Number(object.poolId) : 0,
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
      shares: gt.Array.isArray(object?.shares) ? object.shares.map((e: any) => DecCoin.fromJSON(e)) : [],
    };
  },

  toJSON(message: PoolServiceTotalDelegatorShares): unknown {
    const obj: any = {};
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    if (message.shares?.length) {
      obj.shares = message.shares.map((e) => DecCoin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PoolServiceTotalDelegatorShares>): PoolServiceTotalDelegatorShares {
    return PoolServiceTotalDelegatorShares.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PoolServiceTotalDelegatorShares>): PoolServiceTotalDelegatorShares {
    const message = createBasePoolServiceTotalDelegatorShares();
    message.poolId = object.poolId ?? 0;
    message.serviceId = object.serviceId ?? 0;
    message.shares = object.shares?.map((e) => DecCoin.fromPartial(e)) || [];
    return message;
  },
};

function createBasePool(): Pool {
  return { denom: "", coins: [] };
}

export const Pool: MessageFns<Pool> = {
  encode(message: Pool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    for (const v of message.coins) {
      Coin.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Pool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.coins.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Pool {
    return {
      denom: isSet(object.denom) ? gt.String(object.denom) : "",
      coins: gt.Array.isArray(object?.coins) ? object.coins.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: Pool): unknown {
    const obj: any = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.coins?.length) {
      obj.coins = message.coins.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Pool>): Pool {
    return Pool.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Pool>): Pool {
    const message = createBasePool();
    message.denom = object.denom ?? "";
    message.coins = object.coins?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDecPool(): DecPool {
  return { denom: "", decCoins: [] };
}

export const DecPool: MessageFns<DecPool> = {
  encode(message: DecPool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    for (const v of message.decCoins) {
      DecCoin.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DecPool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDecPool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.decCoins.push(DecCoin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DecPool {
    return {
      denom: isSet(object.denom) ? gt.String(object.denom) : "",
      decCoins: gt.Array.isArray(object?.decCoins) ? object.decCoins.map((e: any) => DecCoin.fromJSON(e)) : [],
    };
  },

  toJSON(message: DecPool): unknown {
    const obj: any = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.decCoins?.length) {
      obj.decCoins = message.decCoins.map((e) => DecCoin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DecPool>): DecPool {
    return DecPool.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DecPool>): DecPool {
    const message = createBaseDecPool();
    message.denom = object.denom ?? "";
    message.decCoins = object.decCoins?.map((e) => DecCoin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseServicePool(): ServicePool {
  return { serviceId: 0, decPools: [] };
}

export const ServicePool: MessageFns<ServicePool> = {
  encode(message: ServicePool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceId !== 0) {
      writer.uint32(8).uint32(message.serviceId);
    }
    for (const v of message.decPools) {
      DecPool.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServicePool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServicePool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.decPools.push(DecPool.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServicePool {
    return {
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
      decPools: gt.Array.isArray(object?.decPools) ? object.decPools.map((e: any) => DecPool.fromJSON(e)) : [],
    };
  },

  toJSON(message: ServicePool): unknown {
    const obj: any = {};
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    if (message.decPools?.length) {
      obj.decPools = message.decPools.map((e) => DecPool.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ServicePool>): ServicePool {
    return ServicePool.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServicePool>): ServicePool {
    const message = createBaseServicePool();
    message.serviceId = object.serviceId ?? 0;
    message.decPools = object.decPools?.map((e) => DecPool.fromPartial(e)) || [];
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new gt.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof gt.Date) {
    return o;
  } else if (typeof o === "string") {
    return new gt.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = gt.Number(int64.toString());
  if (num > gt.Number.MAX_SAFE_INTEGER) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < gt.Number.MIN_SAFE_INTEGER) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
