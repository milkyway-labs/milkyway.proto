// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: milkyway/services/v1/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Service, ServiceParams } from "./models";
import { Params } from "./params";

export const protobufPackage = "milkyway.services.v1";

/** GenesisState defines the services module's genesis state. */
export interface GenesisState {
  /** Params defines the parameters of the module. */
  params:
    | Params
    | undefined;
  /** Services defines the list of services. */
  services: Service[];
  /**
   * NextServiceID defines the ID that will be assigned to the
   * next service that gets created.
   */
  nextServiceId: number;
  /** ServicesParams defines the list of service parameters. */
  servicesParams: ServiceParamsRecord[];
}

/**
 * ServiceParamsRecord represents the parameters that have been set for
 * a specific service.
 */
export interface ServiceParamsRecord {
  /**
   * ServiceID represents the ID of the service to which the parameters
   * should be set.
   */
  serviceId: number;
  /**
   * Params represents the parameters that should be set to the
   * service.
   */
  params: ServiceParams | undefined;
}

function createBaseGenesisState(): GenesisState {
  return { params: undefined, services: [], nextServiceId: 0, servicesParams: [] };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    for (const v of message.services) {
      Service.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.nextServiceId !== 0) {
      writer.uint32(24).uint32(message.nextServiceId);
    }
    for (const v of message.servicesParams) {
      ServiceParamsRecord.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.services.push(Service.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.nextServiceId = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.servicesParams.push(ServiceParamsRecord.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      services: gt.Array.isArray(object?.services) ? object.services.map((e: any) => Service.fromJSON(e)) : [],
      nextServiceId: isSet(object.nextServiceId) ? gt.Number(object.nextServiceId) : 0,
      servicesParams: gt.Array.isArray(object?.servicesParams)
        ? object.servicesParams.map((e: any) => ServiceParamsRecord.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.services?.length) {
      obj.services = message.services.map((e) => Service.toJSON(e));
    }
    if (message.nextServiceId !== 0) {
      obj.nextServiceId = Math.round(message.nextServiceId);
    }
    if (message.servicesParams?.length) {
      obj.servicesParams = message.servicesParams.map((e) => ServiceParamsRecord.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GenesisState>): GenesisState {
    return GenesisState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenesisState>): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.services = object.services?.map((e) => Service.fromPartial(e)) || [];
    message.nextServiceId = object.nextServiceId ?? 0;
    message.servicesParams = object.servicesParams?.map((e) => ServiceParamsRecord.fromPartial(e)) || [];
    return message;
  },
};

function createBaseServiceParamsRecord(): ServiceParamsRecord {
  return { serviceId: 0, params: undefined };
}

export const ServiceParamsRecord: MessageFns<ServiceParamsRecord> = {
  encode(message: ServiceParamsRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceId !== 0) {
      writer.uint32(8).uint32(message.serviceId);
    }
    if (message.params !== undefined) {
      ServiceParams.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceParamsRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceParamsRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = ServiceParams.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceParamsRecord {
    return {
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
      params: isSet(object.params) ? ServiceParams.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: ServiceParamsRecord): unknown {
    const obj: any = {};
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    if (message.params !== undefined) {
      obj.params = ServiceParams.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<ServiceParamsRecord>): ServiceParamsRecord {
    return ServiceParamsRecord.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServiceParamsRecord>): ServiceParamsRecord {
    const message = createBaseServiceParamsRecord();
    message.serviceId = object.serviceId ?? 0;
    message.params = (object.params !== undefined && object.params !== null)
      ? ServiceParams.fromPartial(object.params)
      : undefined;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
