// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: milkyway/operators/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Operator, OperatorParams } from "./models";
import { Params } from "./params";

export const protobufPackage = "milkyway.operators.v1";

/** QueryOperatorRequest is the request type for the Query/Operator RPC method. */
export interface QueryOperatorRequest {
  /** OperatorId is the ID of the operator to query */
  operatorId: number;
}

/** QueryOperatorResponse is the response type for the Query/Operator RPC method. */
export interface QueryOperatorResponse {
  operator: Operator | undefined;
}

/**
 * QueryOperatorParamsRequest is the request type for the Query/OperatorParams
 * RPC method.
 */
export interface QueryOperatorParamsRequest {
  /** OperatorID is the ID of the operator for which to query the params */
  operatorId: number;
}

/**
 * QueryOperatorParamsResponse is the response type for the Query/OperatorParams
 * RPC method.
 */
export interface QueryOperatorParamsResponse {
  operatorParams: OperatorParams | undefined;
}

/** QueryOperatorsRequest is the request type for the Query/Operators RPC method. */
export interface QueryOperatorsRequest {
  pagination: PageRequest | undefined;
}

/**
 * QueryOperatorsResponse is the response type for the Query/Operators RPC
 * method.
 */
export interface QueryOperatorsResponse {
  /** Operators is the list of operators */
  operators: Operator[];
  /** Pagination defines the pagination response */
  pagination: PageResponse | undefined;
}

/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  params: Params | undefined;
}

function createBaseQueryOperatorRequest(): QueryOperatorRequest {
  return { operatorId: 0 };
}

export const QueryOperatorRequest: MessageFns<QueryOperatorRequest> = {
  encode(message: QueryOperatorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operatorId !== 0) {
      writer.uint32(8).uint32(message.operatorId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorRequest {
    return { operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0 };
  },

  toJSON(message: QueryOperatorRequest): unknown {
    const obj: any = {};
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorRequest>): QueryOperatorRequest {
    return QueryOperatorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorRequest>): QueryOperatorRequest {
    const message = createBaseQueryOperatorRequest();
    message.operatorId = object.operatorId ?? 0;
    return message;
  },
};

function createBaseQueryOperatorResponse(): QueryOperatorResponse {
  return { operator: undefined };
}

export const QueryOperatorResponse: MessageFns<QueryOperatorResponse> = {
  encode(message: QueryOperatorResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operator !== undefined) {
      Operator.encode(message.operator, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.operator = Operator.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorResponse {
    return { operator: isSet(object.operator) ? Operator.fromJSON(object.operator) : undefined };
  },

  toJSON(message: QueryOperatorResponse): unknown {
    const obj: any = {};
    if (message.operator !== undefined) {
      obj.operator = Operator.toJSON(message.operator);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorResponse>): QueryOperatorResponse {
    return QueryOperatorResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorResponse>): QueryOperatorResponse {
    const message = createBaseQueryOperatorResponse();
    message.operator = (object.operator !== undefined && object.operator !== null)
      ? Operator.fromPartial(object.operator)
      : undefined;
    return message;
  },
};

function createBaseQueryOperatorParamsRequest(): QueryOperatorParamsRequest {
  return { operatorId: 0 };
}

export const QueryOperatorParamsRequest: MessageFns<QueryOperatorParamsRequest> = {
  encode(message: QueryOperatorParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operatorId !== 0) {
      writer.uint32(8).uint32(message.operatorId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorParamsRequest {
    return { operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0 };
  },

  toJSON(message: QueryOperatorParamsRequest): unknown {
    const obj: any = {};
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorParamsRequest>): QueryOperatorParamsRequest {
    return QueryOperatorParamsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorParamsRequest>): QueryOperatorParamsRequest {
    const message = createBaseQueryOperatorParamsRequest();
    message.operatorId = object.operatorId ?? 0;
    return message;
  },
};

function createBaseQueryOperatorParamsResponse(): QueryOperatorParamsResponse {
  return { operatorParams: undefined };
}

export const QueryOperatorParamsResponse: MessageFns<QueryOperatorParamsResponse> = {
  encode(message: QueryOperatorParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operatorParams !== undefined) {
      OperatorParams.encode(message.operatorParams, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.operatorParams = OperatorParams.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorParamsResponse {
    return {
      operatorParams: isSet(object.operatorParams) ? OperatorParams.fromJSON(object.operatorParams) : undefined,
    };
  },

  toJSON(message: QueryOperatorParamsResponse): unknown {
    const obj: any = {};
    if (message.operatorParams !== undefined) {
      obj.operatorParams = OperatorParams.toJSON(message.operatorParams);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorParamsResponse>): QueryOperatorParamsResponse {
    return QueryOperatorParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorParamsResponse>): QueryOperatorParamsResponse {
    const message = createBaseQueryOperatorParamsResponse();
    message.operatorParams = (object.operatorParams !== undefined && object.operatorParams !== null)
      ? OperatorParams.fromPartial(object.operatorParams)
      : undefined;
    return message;
  },
};

function createBaseQueryOperatorsRequest(): QueryOperatorsRequest {
  return { pagination: undefined };
}

export const QueryOperatorsRequest: MessageFns<QueryOperatorsRequest> = {
  encode(message: QueryOperatorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorsRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryOperatorsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorsRequest>): QueryOperatorsRequest {
    return QueryOperatorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorsRequest>): QueryOperatorsRequest {
    const message = createBaseQueryOperatorsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryOperatorsResponse(): QueryOperatorsResponse {
  return { operators: [], pagination: undefined };
}

export const QueryOperatorsResponse: MessageFns<QueryOperatorsResponse> = {
  encode(message: QueryOperatorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.operators) {
      Operator.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.operators.push(Operator.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorsResponse {
    return {
      operators: gt.Array.isArray(object?.operators) ? object.operators.map((e: any) => Operator.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryOperatorsResponse): unknown {
    const obj: any = {};
    if (message.operators?.length) {
      obj.operators = message.operators.map((e) => Operator.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorsResponse>): QueryOperatorsResponse {
    return QueryOperatorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorsResponse>): QueryOperatorsResponse {
    const message = createBaseQueryOperatorsResponse();
    message.operators = object.operators?.map((e) => Operator.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /**
   * Operator defines a gRPC query method that returns the operator by the given
   * operator id.
   */
  Operator(request: QueryOperatorRequest): Promise<QueryOperatorResponse>;
  /**
   * OperatorParams defines a gRPC query method that returns the operator's
   * params by the given operator id.
   */
  OperatorParams(request: QueryOperatorParamsRequest): Promise<QueryOperatorParamsResponse>;
  /** Operators defines a gRPC query method that returns the list of operators. */
  Operators(request: QueryOperatorsRequest): Promise<QueryOperatorsResponse>;
  /**
   * Params defines a gRPC query method that returns the parameters of the
   * module.
   */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
}

export const QueryServiceName = "milkyway.operators.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Operator = this.Operator.bind(this);
    this.OperatorParams = this.OperatorParams.bind(this);
    this.Operators = this.Operators.bind(this);
    this.Params = this.Params.bind(this);
  }
  Operator(request: QueryOperatorRequest): Promise<QueryOperatorResponse> {
    const data = QueryOperatorRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Operator", data);
    return promise.then((data) => QueryOperatorResponse.decode(new BinaryReader(data)));
  }

  OperatorParams(request: QueryOperatorParamsRequest): Promise<QueryOperatorParamsResponse> {
    const data = QueryOperatorParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "OperatorParams", data);
    return promise.then((data) => QueryOperatorParamsResponse.decode(new BinaryReader(data)));
  }

  Operators(request: QueryOperatorsRequest): Promise<QueryOperatorsResponse> {
    const data = QueryOperatorsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Operators", data);
    return promise.then((data) => QueryOperatorsResponse.decode(new BinaryReader(data)));
  }

  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
