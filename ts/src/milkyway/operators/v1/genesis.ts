// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: milkyway/operators/v1/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { Operator, OperatorParams } from "./models";
import { Params } from "./params";

export const protobufPackage = "milkyway.operators.v1";

/** GenesisState defines the operators module's genesis state. */
export interface GenesisState {
  /** Params defines the parameters of the module. */
  params:
    | Params
    | undefined;
  /**
   * NextOperatorID defines the ID that will be assigned to the
   * next operator that gets created.
   */
  nextOperatorId: number;
  /** Operators defines the list of operators. */
  operators: Operator[];
  /**
   * UnbondingOperators defines the list of operators that are currently being
   * unbonded.
   */
  unbondingOperators: UnbondingOperator[];
  /** OperatorsParams defines the list of operators params. */
  operatorsParams: OperatorParamsRecord[];
}

/**
 * UnbondingOperator contains the data about an operator that is currently being
 * unbonded.
 */
export interface UnbondingOperator {
  /** OperatorID is the ID of the operator that is being unbonded. */
  operatorId: number;
  /**
   * UnbondingCompletionTime is the time at which the unbonding of the operator
   * will be completed
   */
  unbondingCompletionTime: Date | undefined;
}

/**
 * OperatorParamsRecord represents the params that have been set for an
 * individual operator.
 */
export interface OperatorParamsRecord {
  /** OperatorID is the ID of the operator. */
  operatorId: number;
  /** Params defines the parameters for the operators module. */
  params: OperatorParams | undefined;
}

function createBaseGenesisState(): GenesisState {
  return { params: undefined, nextOperatorId: 0, operators: [], unbondingOperators: [], operatorsParams: [] };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    if (message.nextOperatorId !== 0) {
      writer.uint32(16).uint32(message.nextOperatorId);
    }
    for (const v of message.operators) {
      Operator.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.unbondingOperators) {
      UnbondingOperator.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.operatorsParams) {
      OperatorParamsRecord.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.nextOperatorId = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.operators.push(Operator.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.unbondingOperators.push(UnbondingOperator.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.operatorsParams.push(OperatorParamsRecord.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      nextOperatorId: isSet(object.nextOperatorId) ? gt.Number(object.nextOperatorId) : 0,
      operators: gt.Array.isArray(object?.operators) ? object.operators.map((e: any) => Operator.fromJSON(e)) : [],
      unbondingOperators: gt.Array.isArray(object?.unbondingOperators)
        ? object.unbondingOperators.map((e: any) => UnbondingOperator.fromJSON(e))
        : [],
      operatorsParams: gt.Array.isArray(object?.operatorsParams)
        ? object.operatorsParams.map((e: any) => OperatorParamsRecord.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.nextOperatorId !== 0) {
      obj.nextOperatorId = Math.round(message.nextOperatorId);
    }
    if (message.operators?.length) {
      obj.operators = message.operators.map((e) => Operator.toJSON(e));
    }
    if (message.unbondingOperators?.length) {
      obj.unbondingOperators = message.unbondingOperators.map((e) => UnbondingOperator.toJSON(e));
    }
    if (message.operatorsParams?.length) {
      obj.operatorsParams = message.operatorsParams.map((e) => OperatorParamsRecord.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GenesisState>): GenesisState {
    return GenesisState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenesisState>): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.nextOperatorId = object.nextOperatorId ?? 0;
    message.operators = object.operators?.map((e) => Operator.fromPartial(e)) || [];
    message.unbondingOperators = object.unbondingOperators?.map((e) => UnbondingOperator.fromPartial(e)) || [];
    message.operatorsParams = object.operatorsParams?.map((e) => OperatorParamsRecord.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUnbondingOperator(): UnbondingOperator {
  return { operatorId: 0, unbondingCompletionTime: undefined };
}

export const UnbondingOperator: MessageFns<UnbondingOperator> = {
  encode(message: UnbondingOperator, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operatorId !== 0) {
      writer.uint32(8).uint32(message.operatorId);
    }
    if (message.unbondingCompletionTime !== undefined) {
      Timestamp.encode(toTimestamp(message.unbondingCompletionTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnbondingOperator {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnbondingOperator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.unbondingCompletionTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnbondingOperator {
    return {
      operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0,
      unbondingCompletionTime: isSet(object.unbondingCompletionTime)
        ? fromJsonTimestamp(object.unbondingCompletionTime)
        : undefined,
    };
  },

  toJSON(message: UnbondingOperator): unknown {
    const obj: any = {};
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    if (message.unbondingCompletionTime !== undefined) {
      obj.unbondingCompletionTime = message.unbondingCompletionTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<UnbondingOperator>): UnbondingOperator {
    return UnbondingOperator.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnbondingOperator>): UnbondingOperator {
    const message = createBaseUnbondingOperator();
    message.operatorId = object.operatorId ?? 0;
    message.unbondingCompletionTime = object.unbondingCompletionTime ?? undefined;
    return message;
  },
};

function createBaseOperatorParamsRecord(): OperatorParamsRecord {
  return { operatorId: 0, params: undefined };
}

export const OperatorParamsRecord: MessageFns<OperatorParamsRecord> = {
  encode(message: OperatorParamsRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operatorId !== 0) {
      writer.uint32(8).uint32(message.operatorId);
    }
    if (message.params !== undefined) {
      OperatorParams.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperatorParamsRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperatorParamsRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = OperatorParams.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperatorParamsRecord {
    return {
      operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0,
      params: isSet(object.params) ? OperatorParams.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: OperatorParamsRecord): unknown {
    const obj: any = {};
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    if (message.params !== undefined) {
      obj.params = OperatorParams.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<OperatorParamsRecord>): OperatorParamsRecord {
    return OperatorParamsRecord.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperatorParamsRecord>): OperatorParamsRecord {
    const message = createBaseOperatorParamsRecord();
    message.operatorId = object.operatorId ?? 0;
    message.params = (object.params !== undefined && object.params !== null)
      ? OperatorParams.fromPartial(object.params)
      : undefined;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new gt.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof gt.Date) {
    return o;
  } else if (typeof o === "string") {
    return new gt.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
