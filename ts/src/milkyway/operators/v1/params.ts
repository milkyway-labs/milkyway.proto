// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: milkyway/operators/v1/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../../cosmos/base/v1beta1/coin";

export const protobufPackage = "milkyway.operators.v1";

/** Params defines the parameters for the operators module. */
export interface Params {
  /**
   * OperatorRegistrationFee represents the fee that an operator must pay in
   * order to register itself with the network.
   * The fee is drawn from the MsgRegisterOperator sender's account and
   * transferred to the community pool.
   */
  operatorRegistrationFee: Coin[];
  /**
   * DeactivationTime represents the amount of time that will pass between
   * the time that an operator signals its willingness to deactivate and the
   * time that it actually becomes inactive.
   */
  deactivationTime: number;
}

function createBaseParams(): Params {
  return { operatorRegistrationFee: [], deactivationTime: 0 };
}

export const Params: MessageFns<Params> = {
  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.operatorRegistrationFee) {
      Coin.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.deactivationTime !== 0) {
      writer.uint32(16).int64(message.deactivationTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.operatorRegistrationFee.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.deactivationTime = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      operatorRegistrationFee: gt.Array.isArray(object?.operatorRegistrationFee)
        ? object.operatorRegistrationFee.map((e: any) => Coin.fromJSON(e))
        : [],
      deactivationTime: isSet(object.deactivationTime) ? gt.Number(object.deactivationTime) : 0,
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.operatorRegistrationFee?.length) {
      obj.operatorRegistrationFee = message.operatorRegistrationFee.map((e) => Coin.toJSON(e));
    }
    if (message.deactivationTime !== 0) {
      obj.deactivationTime = Math.round(message.deactivationTime);
    }
    return obj;
  },

  create(base?: DeepPartial<Params>): Params {
    return Params.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Params>): Params {
    const message = createBaseParams();
    message.operatorRegistrationFee = object.operatorRegistrationFee?.map((e) => Coin.fromPartial(e)) || [];
    message.deactivationTime = object.deactivationTime ?? 0;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = gt.Number(int64.toString());
  if (num > gt.Number.MAX_SAFE_INTEGER) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < gt.Number.MIN_SAFE_INTEGER) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
