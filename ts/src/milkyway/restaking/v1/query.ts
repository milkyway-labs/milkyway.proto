// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: milkyway/restaking/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { Operator } from "../../operators/v1/models";
import { Pool } from "../../pools/v1/models";
import { Service } from "../../services/v1/models";
import { DelegationResponse, UnbondingDelegation, UserPreferences } from "./models";
import { Params } from "./params";

export const protobufPackage = "milkyway.restaking.v1";

/**
 * QueryOperatorJoinedServicesRequest is request type for the
 * Query/OperatorJoinedServices RPC method.
 */
export interface QueryOperatorJoinedServicesRequest {
  /** OperatorId is the ID of the operator to query */
  operatorId: number;
  /** Pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryOperatorJoinedServicesResponse is response type for the
 * Query/OperatorJoinedServices RPC method.
 */
export interface QueryOperatorJoinedServicesResponse {
  /** ServiceIds is the list of services joined by the operator. */
  serviceIds: number[];
  /** Pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryServiceAllowedOperatorsRequest is request type for the
 * Query/ServiceAllowedOperators RPC method.
 */
export interface QueryServiceAllowedOperatorsRequest {
  /** ServiceId is the ID of the service to query */
  serviceId: number;
  /** Pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryServiceAllowedOperatorsResponse is response type for the
 * Query/ServiceAllowedOperators RPC method.
 */
export interface QueryServiceAllowedOperatorsResponse {
  /** OperatorIds is the list of operators allowed to validate the service */
  operatorIds: number[];
  /** Pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryServiceSecuringPoolsRequest is request type for the
 * Query/ServiceSecuringPools RPC method.
 */
export interface QueryServiceSecuringPoolsRequest {
  /** ServiceId is the ID of the service to query. */
  serviceId: number;
  /** Pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryServiceSecuringPoolsResponse is response type for the
 * Query/ServiceSecuringPools RPC method.
 */
export interface QueryServiceSecuringPoolsResponse {
  /**
   * PoolIds is the list of pools from which the service is allowed to borrow
   * security.
   */
  poolIds: number[];
  /** Pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryServiceOperatorsRequest is request type for the Query/ServiceOperators
 * RPC method.
 */
export interface QueryServiceOperatorsRequest {
  /** ServiceId is the ID of the service to query */
  serviceId: number;
  /** Pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryServiceOperatorsResponse is response type for the Query/ServiceOperators
 * RPC method.
 */
export interface QueryServiceOperatorsResponse {
  /** Operators is the list of operators */
  operators: Operator[];
  /** Pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryPoolDelegationsRequest is request type for the Query/PoolDelegations RPC
 * method.
 */
export interface QueryPoolDelegationsRequest {
  /** PoolId is the ID of the pool to query. */
  poolId: number;
  /** Pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryPoolDelegationsResponse is response type for the Query/PoolDelegations
 * RPC method.
 */
export interface QueryPoolDelegationsResponse {
  /** Delegations is the list of delegations. */
  delegations: DelegationResponse[];
  /** Pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryPoolDelegationRequest is request type for the Query/PoolDelegation RPC
 * method.
 */
export interface QueryPoolDelegationRequest {
  /** PoolId is the ID of the pool to query */
  poolId: number;
  /** DelegatorAddress is the address of the delegator to query */
  delegatorAddress: string;
}

/**
 * QueryPoolDelegationResponse is response type for the Query/PoolDelegation RPC
 * method.
 */
export interface QueryPoolDelegationResponse {
  /** Delegation is the delegation */
  delegation: DelegationResponse | undefined;
}

/**
 * QueryPoolUnbondingDelegationsRequest is request type for the
 * Query/PoolUnbondingDelegations RPC method.
 */
export interface QueryPoolUnbondingDelegationsRequest {
  poolId: number;
  pagination: PageRequest | undefined;
}

/**
 * QueryPoolUnbondingDelegationsResponse is response type for the
 * Query/PoolUnbondingDelegations RPC method.
 */
export interface QueryPoolUnbondingDelegationsResponse {
  unbondingDelegations: UnbondingDelegation[];
  pagination: PageResponse | undefined;
}

/**
 * QueryPoolUnbondingDelegationRequest is request type for the
 * Query/PoolUnbondingDelegation RPC method.
 */
export interface QueryPoolUnbondingDelegationRequest {
  poolId: number;
  delegatorAddress: string;
}

/**
 * QueryPoolUnbondingDelegationResponse is response type for the
 * Query/PoolUnbondingDelegation RPC method.
 */
export interface QueryPoolUnbondingDelegationResponse {
  unbondingDelegation: UnbondingDelegation | undefined;
}

/**
 * QueryOperatorDelegationsRequest is request type for the
 * Query/OperatorDelegations RPC method.
 */
export interface QueryOperatorDelegationsRequest {
  /** OperatorId is the ID of the operator to query */
  operatorId: number;
  /** Pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryOperatorDelegationsResponse is response type for the
 * Query/OperatorDelegations RPC method.
 */
export interface QueryOperatorDelegationsResponse {
  /** Delegations is the list of delegations */
  delegations: DelegationResponse[];
  /** Pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryOperatorDelegationRequest is request type for the
 * Query/OperatorDelegation RPC method.
 */
export interface QueryOperatorDelegationRequest {
  /** OperatorId is the ID of the operator to query */
  operatorId: number;
  /** DelegatorAddress is the address of the delegator to query */
  delegatorAddress: string;
}

/**
 * QueryOperatorDelegationResponse is response type for the
 * Query/OperatorDelegation RPC method.
 */
export interface QueryOperatorDelegationResponse {
  /** Delegation is the delegation */
  delegation: DelegationResponse | undefined;
}

/**
 * QueryOperatorUnbondingDelegationsRequest is request type for the
 * Query/OperatorUnbondingDelegations RPC method.
 */
export interface QueryOperatorUnbondingDelegationsRequest {
  /** OperatorId is the ID of the operator to query */
  operatorId: number;
  /** Pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryOperatorUnbondingDelegationsResponse is response type for the
 * Query/OperatorUnbondingDelegations RPC method.
 */
export interface QueryOperatorUnbondingDelegationsResponse {
  /** UnbondingDelegations is the list of unbonding delegations */
  unbondingDelegations: UnbondingDelegation[];
  /** Pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryOperatorUnbondingDelegationRequest is request type for the
 * Query/OperatorUnbondingDelegation RPC method.
 */
export interface QueryOperatorUnbondingDelegationRequest {
  /** OperatorId is the ID of the operator to query */
  operatorId: number;
  /** DelegatorAddress is the address of the delegator to query */
  delegatorAddress: string;
}

/**
 * QueryOperatorUnbondingDelegationResponse is response type for the
 * Query/OperatorUnbondingDelegation RPC method.
 */
export interface QueryOperatorUnbondingDelegationResponse {
  /** UnbondingDelegation is the unbonding delegation */
  unbondingDelegation: UnbondingDelegation | undefined;
}

/**
 * QueryServiceDelegationsRequest is request type for the
 * Query/ServiceDelegations RPC method.
 */
export interface QueryServiceDelegationsRequest {
  /** ServiceId is the ID of the service to query */
  serviceId: number;
  /** Pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryServiceDelegationsResponse is response type for the
 * Query/ServiceDelegations RPC method.
 */
export interface QueryServiceDelegationsResponse {
  /** Delegations is the list of delegations */
  delegations: DelegationResponse[];
  /** Pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryServiceDelegationRequest is request type for the Query/ServiceDelegation
 * RPC method.
 */
export interface QueryServiceDelegationRequest {
  /** ServiceId is the ID of the service to query */
  serviceId: number;
  /** DelegatorAddress is the address of the delegator to query */
  delegatorAddress: string;
}

/**
 * QueryServiceDelegationResponse is response type for the
 * Query/ServiceDelegation RPC method.
 */
export interface QueryServiceDelegationResponse {
  /** Delegation is the delegation */
  delegation: DelegationResponse | undefined;
}

/**
 * QueryServiceUnbondingDelegationsRequest is request type for the
 * Query/ServiceUnbondingDelegations RPC method.
 */
export interface QueryServiceUnbondingDelegationsRequest {
  /** ServiceId is the ID of the service to query */
  serviceId: number;
  /** Pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryServiceUnbondingDelegationsResponse is response type for the
 * Query/ServiceUnbondingDelegations RPC method.
 */
export interface QueryServiceUnbondingDelegationsResponse {
  /** UnbondingDelegations is the list of unbonding delegations */
  unbondingDelegations: UnbondingDelegation[];
  /** Pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryServiceUnbondingDelegationRequest is request type for the
 * Query/ServiceUnbondingDelegation RPC method.
 */
export interface QueryServiceUnbondingDelegationRequest {
  /** ServiceId is the ID of the service to query */
  serviceId: number;
  /** DelegatorAddress is the address of the delegator to query */
  delegatorAddress: string;
}

/**
 * QueryServiceUnbondingDelegationResponse is response type for the
 * Query/ServiceUnbondingDelegation RPC method.
 */
export interface QueryServiceUnbondingDelegationResponse {
  /** UnbondingDelegation is the unbonding delegation */
  unbondingDelegation: UnbondingDelegation | undefined;
}

/**
 * QueryDelegatorPoolDelegationsRequest is request type for the
 * Query/DelegatorPoolDelegations RPC method.
 */
export interface QueryDelegatorPoolDelegationsRequest {
  /** DelegatorAddress is the address of the delegator to query */
  delegatorAddress: string;
  /** Pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryDelegatorPoolDelegationsResponse is response type for the
 * Query/DelegatorPoolDelegations RPC method.
 */
export interface QueryDelegatorPoolDelegationsResponse {
  /** Delegations is the list of delegations */
  delegations: DelegationResponse[];
  /** Pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryDelegatorPoolUnbondingDelegationsRequest is request type for the
 * Query/DelegatorPoolUnbondingDelegations RPC method.
 */
export interface QueryDelegatorPoolUnbondingDelegationsRequest {
  /** DelegatorAddress is the address of the delegator to query */
  delegatorAddress: string;
  /** Pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryDelegatorPoolUnbondingDelegationsResponse is response type for the
 * Query/DelegatorPoolUnbondingDelegations RPC method.
 */
export interface QueryDelegatorPoolUnbondingDelegationsResponse {
  /** UnbondingDelegations is the list of unbonding delegations */
  unbondingDelegations: UnbondingDelegation[];
  /** Pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryDelegatorOperatorDelegationsRequest is request type for the
 * Query/DelegatorOperatorDelegations RPC method.
 */
export interface QueryDelegatorOperatorDelegationsRequest {
  /** DelegatorAddress is the address of the delegator to query */
  delegatorAddress: string;
  /** Pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryDelegatorOperatorDelegationsResponse is response type for the
 * Query/DelegatorOperatorDelegations RPC method.
 */
export interface QueryDelegatorOperatorDelegationsResponse {
  /** Delegations is the list of delegations */
  delegations: DelegationResponse[];
  /** Pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryDelegatorOperatorUnbondingDelegationsRequest is request type for the
 * Query/DelegatorOperatorUnbondingDelegations RPC method.
 */
export interface QueryDelegatorOperatorUnbondingDelegationsRequest {
  /** DelegatorAddress is the address of the delegator to query */
  delegatorAddress: string;
  /** Pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryDelegatorOperatorUnbondingDelegationsResponse is response type for the
 * Query/DelegatorOperatorUnbondingDelegations RPC method.
 */
export interface QueryDelegatorOperatorUnbondingDelegationsResponse {
  /** UnbondingDelegations is the list of unbonding delegations */
  unbondingDelegations: UnbondingDelegation[];
  /** Pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryDelegatorServiceDelegationsRequest is request type for the
 * Query/DelegatorServiceDelegations RPC method.
 */
export interface QueryDelegatorServiceDelegationsRequest {
  /** DelegatorAddress is the address of the delegator to query */
  delegatorAddress: string;
  /** Pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryDelegatorServiceDelegationsResponse is response type for the
 * Query/DelegatorServiceDelegations RPC method.
 */
export interface QueryDelegatorServiceDelegationsResponse {
  /** Delegations is the list of delegations */
  delegations: DelegationResponse[];
  /** Pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryDelegatorServiceUnbondingDelegationsRequest is request type for the
 * Query/DelegatorServiceUnbondingDelegations RPC method.
 */
export interface QueryDelegatorServiceUnbondingDelegationsRequest {
  /** DelegatorAddress is the address of the delegator to query */
  delegatorAddress: string;
  /** Pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryDelegatorServiceUnbondingDelegationsResponse is response type for the
 * Query/DelegatorServiceUnbondingDelegations RPC method.
 */
export interface QueryDelegatorServiceUnbondingDelegationsResponse {
  /** UnbondingDelegations is the list of unbonding delegations */
  unbondingDelegations: UnbondingDelegation[];
  /** Pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryDelegatorPoolsRequest is request type for the Query/DelegatorPools RPC
 * method.
 */
export interface QueryDelegatorPoolsRequest {
  /** DelegatorAddress is the address of the delegator to query */
  delegatorAddress: string;
  /** Pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryDelegatorPoolsResponse is response type for the Query/DelegatorPools RPC
 * method.
 */
export interface QueryDelegatorPoolsResponse {
  /** Pools is the list of pools */
  pools: Pool[];
  /** Pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryDelegatorPoolRequest is request type for the Query/DelegatorPool RPC
 * method.
 */
export interface QueryDelegatorPoolRequest {
  /** DelegatorAddress is the address of the delegator to query */
  delegatorAddress: string;
  /** PoolId is the ID of the pool to query */
  poolId: number;
}

/**
 * QueryDelegatorPoolResponse is response type for the Query/DelegatorPool RPC
 * method.
 */
export interface QueryDelegatorPoolResponse {
  /** Pool is the pool */
  pool: Pool | undefined;
}

/**
 * QueryDelegatorOperatorsRequest is request type for the
 * Query/DelegatorOperators RPC method.
 */
export interface QueryDelegatorOperatorsRequest {
  /** DelegatorAddress is the address of the delegator to query */
  delegatorAddress: string;
  /** Pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryDelegatorOperatorsResponse is response type for the
 * Query/DelegatorOperators RPC method.
 */
export interface QueryDelegatorOperatorsResponse {
  /** Operators is the list of operators */
  operators: Operator[];
  /** Pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryDelegatorOperatorRequest is request type for the Query/DelegatorOperator
 * RPC method.
 */
export interface QueryDelegatorOperatorRequest {
  /** DelegatorAddress is the address of the delegator to query */
  delegatorAddress: string;
  /** OperatorId is the ID of the operator to query */
  operatorId: number;
}

/**
 * QueryDelegatorOperatorResponse is response type for the
 * Query/DelegatorOperator RPC method.
 */
export interface QueryDelegatorOperatorResponse {
  /** Operator is the operator */
  operator: Operator | undefined;
}

/**
 * QueryDelegatorServicesRequest is request type for the Query/DelegatorServices
 * RPC method.
 */
export interface QueryDelegatorServicesRequest {
  /** DelegatorAddress is the address of the delegator to query */
  delegatorAddress: string;
  /** Pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryDelegatorServicesResponse is response type for the
 * Query/DelegatorServices RPC method.
 */
export interface QueryDelegatorServicesResponse {
  /** Services is the list of services */
  services: Service[];
  /** Pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryDelegatorServiceRequest is request type for the Query/DelegatorService
 * RPC method.
 */
export interface QueryDelegatorServiceRequest {
  /** DelegatorAddress is the address of the delegator to query */
  delegatorAddress: string;
  /** ServiceId is the ID of the service to query */
  serviceId: number;
}

/**
 * QueryDelegatorServiceResponse is response type for the Query/DelegatorService
 * RPC method.
 */
export interface QueryDelegatorServiceResponse {
  /** Service is the service */
  service: Service | undefined;
}

/**
 * QueryUserPreferences is request type for the Query/UserPreferences RPC
 * method.
 */
export interface QueryUserPreferencesRequest {
  /** UserAddress is the address of the user to query the preferences for */
  userAddress: string;
}

/**
 * QueryUserPreferencesResponse is response type for the Query/UserPreferences
 * RPC method.
 */
export interface QueryUserPreferencesResponse {
  /** Preferences is the user preferences */
  preferences: UserPreferences | undefined;
}

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

function createBaseQueryOperatorJoinedServicesRequest(): QueryOperatorJoinedServicesRequest {
  return { operatorId: 0, pagination: undefined };
}

export const QueryOperatorJoinedServicesRequest: MessageFns<QueryOperatorJoinedServicesRequest> = {
  encode(message: QueryOperatorJoinedServicesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operatorId !== 0) {
      writer.uint32(8).uint32(message.operatorId);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorJoinedServicesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorJoinedServicesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorJoinedServicesRequest {
    return {
      operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0,
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryOperatorJoinedServicesRequest): unknown {
    const obj: any = {};
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorJoinedServicesRequest>): QueryOperatorJoinedServicesRequest {
    return QueryOperatorJoinedServicesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorJoinedServicesRequest>): QueryOperatorJoinedServicesRequest {
    const message = createBaseQueryOperatorJoinedServicesRequest();
    message.operatorId = object.operatorId ?? 0;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryOperatorJoinedServicesResponse(): QueryOperatorJoinedServicesResponse {
  return { serviceIds: [], pagination: undefined };
}

export const QueryOperatorJoinedServicesResponse: MessageFns<QueryOperatorJoinedServicesResponse> = {
  encode(message: QueryOperatorJoinedServicesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.serviceIds) {
      writer.uint32(v);
    }
    writer.join();
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorJoinedServicesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorJoinedServicesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.serviceIds.push(reader.uint32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.serviceIds.push(reader.uint32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorJoinedServicesResponse {
    return {
      serviceIds: gt.Array.isArray(object?.serviceIds) ? object.serviceIds.map((e: any) => gt.Number(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryOperatorJoinedServicesResponse): unknown {
    const obj: any = {};
    if (message.serviceIds?.length) {
      obj.serviceIds = message.serviceIds.map((e) => Math.round(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorJoinedServicesResponse>): QueryOperatorJoinedServicesResponse {
    return QueryOperatorJoinedServicesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorJoinedServicesResponse>): QueryOperatorJoinedServicesResponse {
    const message = createBaseQueryOperatorJoinedServicesResponse();
    message.serviceIds = object.serviceIds?.map((e) => e) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryServiceAllowedOperatorsRequest(): QueryServiceAllowedOperatorsRequest {
  return { serviceId: 0, pagination: undefined };
}

export const QueryServiceAllowedOperatorsRequest: MessageFns<QueryServiceAllowedOperatorsRequest> = {
  encode(message: QueryServiceAllowedOperatorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceId !== 0) {
      writer.uint32(8).uint32(message.serviceId);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryServiceAllowedOperatorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryServiceAllowedOperatorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryServiceAllowedOperatorsRequest {
    return {
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryServiceAllowedOperatorsRequest): unknown {
    const obj: any = {};
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryServiceAllowedOperatorsRequest>): QueryServiceAllowedOperatorsRequest {
    return QueryServiceAllowedOperatorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryServiceAllowedOperatorsRequest>): QueryServiceAllowedOperatorsRequest {
    const message = createBaseQueryServiceAllowedOperatorsRequest();
    message.serviceId = object.serviceId ?? 0;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryServiceAllowedOperatorsResponse(): QueryServiceAllowedOperatorsResponse {
  return { operatorIds: [], pagination: undefined };
}

export const QueryServiceAllowedOperatorsResponse: MessageFns<QueryServiceAllowedOperatorsResponse> = {
  encode(message: QueryServiceAllowedOperatorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.operatorIds) {
      writer.uint32(v);
    }
    writer.join();
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryServiceAllowedOperatorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryServiceAllowedOperatorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.operatorIds.push(reader.uint32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.operatorIds.push(reader.uint32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryServiceAllowedOperatorsResponse {
    return {
      operatorIds: gt.Array.isArray(object?.operatorIds) ? object.operatorIds.map((e: any) => gt.Number(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryServiceAllowedOperatorsResponse): unknown {
    const obj: any = {};
    if (message.operatorIds?.length) {
      obj.operatorIds = message.operatorIds.map((e) => Math.round(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryServiceAllowedOperatorsResponse>): QueryServiceAllowedOperatorsResponse {
    return QueryServiceAllowedOperatorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryServiceAllowedOperatorsResponse>): QueryServiceAllowedOperatorsResponse {
    const message = createBaseQueryServiceAllowedOperatorsResponse();
    message.operatorIds = object.operatorIds?.map((e) => e) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryServiceSecuringPoolsRequest(): QueryServiceSecuringPoolsRequest {
  return { serviceId: 0, pagination: undefined };
}

export const QueryServiceSecuringPoolsRequest: MessageFns<QueryServiceSecuringPoolsRequest> = {
  encode(message: QueryServiceSecuringPoolsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceId !== 0) {
      writer.uint32(8).uint32(message.serviceId);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryServiceSecuringPoolsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryServiceSecuringPoolsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryServiceSecuringPoolsRequest {
    return {
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryServiceSecuringPoolsRequest): unknown {
    const obj: any = {};
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryServiceSecuringPoolsRequest>): QueryServiceSecuringPoolsRequest {
    return QueryServiceSecuringPoolsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryServiceSecuringPoolsRequest>): QueryServiceSecuringPoolsRequest {
    const message = createBaseQueryServiceSecuringPoolsRequest();
    message.serviceId = object.serviceId ?? 0;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryServiceSecuringPoolsResponse(): QueryServiceSecuringPoolsResponse {
  return { poolIds: [], pagination: undefined };
}

export const QueryServiceSecuringPoolsResponse: MessageFns<QueryServiceSecuringPoolsResponse> = {
  encode(message: QueryServiceSecuringPoolsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.poolIds) {
      writer.uint32(v);
    }
    writer.join();
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryServiceSecuringPoolsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryServiceSecuringPoolsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.poolIds.push(reader.uint32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.poolIds.push(reader.uint32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryServiceSecuringPoolsResponse {
    return {
      poolIds: gt.Array.isArray(object?.poolIds) ? object.poolIds.map((e: any) => gt.Number(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryServiceSecuringPoolsResponse): unknown {
    const obj: any = {};
    if (message.poolIds?.length) {
      obj.poolIds = message.poolIds.map((e) => Math.round(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryServiceSecuringPoolsResponse>): QueryServiceSecuringPoolsResponse {
    return QueryServiceSecuringPoolsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryServiceSecuringPoolsResponse>): QueryServiceSecuringPoolsResponse {
    const message = createBaseQueryServiceSecuringPoolsResponse();
    message.poolIds = object.poolIds?.map((e) => e) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryServiceOperatorsRequest(): QueryServiceOperatorsRequest {
  return { serviceId: 0, pagination: undefined };
}

export const QueryServiceOperatorsRequest: MessageFns<QueryServiceOperatorsRequest> = {
  encode(message: QueryServiceOperatorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceId !== 0) {
      writer.uint32(8).uint32(message.serviceId);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryServiceOperatorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryServiceOperatorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryServiceOperatorsRequest {
    return {
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryServiceOperatorsRequest): unknown {
    const obj: any = {};
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryServiceOperatorsRequest>): QueryServiceOperatorsRequest {
    return QueryServiceOperatorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryServiceOperatorsRequest>): QueryServiceOperatorsRequest {
    const message = createBaseQueryServiceOperatorsRequest();
    message.serviceId = object.serviceId ?? 0;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryServiceOperatorsResponse(): QueryServiceOperatorsResponse {
  return { operators: [], pagination: undefined };
}

export const QueryServiceOperatorsResponse: MessageFns<QueryServiceOperatorsResponse> = {
  encode(message: QueryServiceOperatorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.operators) {
      Operator.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryServiceOperatorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryServiceOperatorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.operators.push(Operator.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryServiceOperatorsResponse {
    return {
      operators: gt.Array.isArray(object?.operators) ? object.operators.map((e: any) => Operator.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryServiceOperatorsResponse): unknown {
    const obj: any = {};
    if (message.operators?.length) {
      obj.operators = message.operators.map((e) => Operator.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryServiceOperatorsResponse>): QueryServiceOperatorsResponse {
    return QueryServiceOperatorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryServiceOperatorsResponse>): QueryServiceOperatorsResponse {
    const message = createBaseQueryServiceOperatorsResponse();
    message.operators = object.operators?.map((e) => Operator.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryPoolDelegationsRequest(): QueryPoolDelegationsRequest {
  return { poolId: 0, pagination: undefined };
}

export const QueryPoolDelegationsRequest: MessageFns<QueryPoolDelegationsRequest> = {
  encode(message: QueryPoolDelegationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.poolId !== 0) {
      writer.uint32(8).uint32(message.poolId);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoolDelegationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolDelegationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.poolId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolDelegationsRequest {
    return {
      poolId: isSet(object.poolId) ? gt.Number(object.poolId) : 0,
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryPoolDelegationsRequest): unknown {
    const obj: any = {};
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPoolDelegationsRequest>): QueryPoolDelegationsRequest {
    return QueryPoolDelegationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryPoolDelegationsRequest>): QueryPoolDelegationsRequest {
    const message = createBaseQueryPoolDelegationsRequest();
    message.poolId = object.poolId ?? 0;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryPoolDelegationsResponse(): QueryPoolDelegationsResponse {
  return { delegations: [], pagination: undefined };
}

export const QueryPoolDelegationsResponse: MessageFns<QueryPoolDelegationsResponse> = {
  encode(message: QueryPoolDelegationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.delegations) {
      DelegationResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoolDelegationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolDelegationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegations.push(DelegationResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolDelegationsResponse {
    return {
      delegations: gt.Array.isArray(object?.delegations)
        ? object.delegations.map((e: any) => DelegationResponse.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryPoolDelegationsResponse): unknown {
    const obj: any = {};
    if (message.delegations?.length) {
      obj.delegations = message.delegations.map((e) => DelegationResponse.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPoolDelegationsResponse>): QueryPoolDelegationsResponse {
    return QueryPoolDelegationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryPoolDelegationsResponse>): QueryPoolDelegationsResponse {
    const message = createBaseQueryPoolDelegationsResponse();
    message.delegations = object.delegations?.map((e) => DelegationResponse.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryPoolDelegationRequest(): QueryPoolDelegationRequest {
  return { poolId: 0, delegatorAddress: "" };
}

export const QueryPoolDelegationRequest: MessageFns<QueryPoolDelegationRequest> = {
  encode(message: QueryPoolDelegationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.poolId !== 0) {
      writer.uint32(8).uint32(message.poolId);
    }
    if (message.delegatorAddress !== "") {
      writer.uint32(18).string(message.delegatorAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoolDelegationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolDelegationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.poolId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolDelegationRequest {
    return {
      poolId: isSet(object.poolId) ? gt.Number(object.poolId) : 0,
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
    };
  },

  toJSON(message: QueryPoolDelegationRequest): unknown {
    const obj: any = {};
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPoolDelegationRequest>): QueryPoolDelegationRequest {
    return QueryPoolDelegationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryPoolDelegationRequest>): QueryPoolDelegationRequest {
    const message = createBaseQueryPoolDelegationRequest();
    message.poolId = object.poolId ?? 0;
    message.delegatorAddress = object.delegatorAddress ?? "";
    return message;
  },
};

function createBaseQueryPoolDelegationResponse(): QueryPoolDelegationResponse {
  return { delegation: undefined };
}

export const QueryPoolDelegationResponse: MessageFns<QueryPoolDelegationResponse> = {
  encode(message: QueryPoolDelegationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegation !== undefined) {
      DelegationResponse.encode(message.delegation, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoolDelegationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolDelegationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegation = DelegationResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolDelegationResponse {
    return { delegation: isSet(object.delegation) ? DelegationResponse.fromJSON(object.delegation) : undefined };
  },

  toJSON(message: QueryPoolDelegationResponse): unknown {
    const obj: any = {};
    if (message.delegation !== undefined) {
      obj.delegation = DelegationResponse.toJSON(message.delegation);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPoolDelegationResponse>): QueryPoolDelegationResponse {
    return QueryPoolDelegationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryPoolDelegationResponse>): QueryPoolDelegationResponse {
    const message = createBaseQueryPoolDelegationResponse();
    message.delegation = (object.delegation !== undefined && object.delegation !== null)
      ? DelegationResponse.fromPartial(object.delegation)
      : undefined;
    return message;
  },
};

function createBaseQueryPoolUnbondingDelegationsRequest(): QueryPoolUnbondingDelegationsRequest {
  return { poolId: 0, pagination: undefined };
}

export const QueryPoolUnbondingDelegationsRequest: MessageFns<QueryPoolUnbondingDelegationsRequest> = {
  encode(message: QueryPoolUnbondingDelegationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.poolId !== 0) {
      writer.uint32(8).uint32(message.poolId);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoolUnbondingDelegationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolUnbondingDelegationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.poolId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolUnbondingDelegationsRequest {
    return {
      poolId: isSet(object.poolId) ? gt.Number(object.poolId) : 0,
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryPoolUnbondingDelegationsRequest): unknown {
    const obj: any = {};
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPoolUnbondingDelegationsRequest>): QueryPoolUnbondingDelegationsRequest {
    return QueryPoolUnbondingDelegationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryPoolUnbondingDelegationsRequest>): QueryPoolUnbondingDelegationsRequest {
    const message = createBaseQueryPoolUnbondingDelegationsRequest();
    message.poolId = object.poolId ?? 0;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryPoolUnbondingDelegationsResponse(): QueryPoolUnbondingDelegationsResponse {
  return { unbondingDelegations: [], pagination: undefined };
}

export const QueryPoolUnbondingDelegationsResponse: MessageFns<QueryPoolUnbondingDelegationsResponse> = {
  encode(message: QueryPoolUnbondingDelegationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.unbondingDelegations) {
      UnbondingDelegation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoolUnbondingDelegationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolUnbondingDelegationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.unbondingDelegations.push(UnbondingDelegation.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolUnbondingDelegationsResponse {
    return {
      unbondingDelegations: gt.Array.isArray(object?.unbondingDelegations)
        ? object.unbondingDelegations.map((e: any) => UnbondingDelegation.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryPoolUnbondingDelegationsResponse): unknown {
    const obj: any = {};
    if (message.unbondingDelegations?.length) {
      obj.unbondingDelegations = message.unbondingDelegations.map((e) => UnbondingDelegation.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPoolUnbondingDelegationsResponse>): QueryPoolUnbondingDelegationsResponse {
    return QueryPoolUnbondingDelegationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryPoolUnbondingDelegationsResponse>): QueryPoolUnbondingDelegationsResponse {
    const message = createBaseQueryPoolUnbondingDelegationsResponse();
    message.unbondingDelegations = object.unbondingDelegations?.map((e) => UnbondingDelegation.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryPoolUnbondingDelegationRequest(): QueryPoolUnbondingDelegationRequest {
  return { poolId: 0, delegatorAddress: "" };
}

export const QueryPoolUnbondingDelegationRequest: MessageFns<QueryPoolUnbondingDelegationRequest> = {
  encode(message: QueryPoolUnbondingDelegationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.poolId !== 0) {
      writer.uint32(8).uint32(message.poolId);
    }
    if (message.delegatorAddress !== "") {
      writer.uint32(18).string(message.delegatorAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoolUnbondingDelegationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolUnbondingDelegationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.poolId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolUnbondingDelegationRequest {
    return {
      poolId: isSet(object.poolId) ? gt.Number(object.poolId) : 0,
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
    };
  },

  toJSON(message: QueryPoolUnbondingDelegationRequest): unknown {
    const obj: any = {};
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPoolUnbondingDelegationRequest>): QueryPoolUnbondingDelegationRequest {
    return QueryPoolUnbondingDelegationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryPoolUnbondingDelegationRequest>): QueryPoolUnbondingDelegationRequest {
    const message = createBaseQueryPoolUnbondingDelegationRequest();
    message.poolId = object.poolId ?? 0;
    message.delegatorAddress = object.delegatorAddress ?? "";
    return message;
  },
};

function createBaseQueryPoolUnbondingDelegationResponse(): QueryPoolUnbondingDelegationResponse {
  return { unbondingDelegation: undefined };
}

export const QueryPoolUnbondingDelegationResponse: MessageFns<QueryPoolUnbondingDelegationResponse> = {
  encode(message: QueryPoolUnbondingDelegationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.unbondingDelegation !== undefined) {
      UnbondingDelegation.encode(message.unbondingDelegation, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPoolUnbondingDelegationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPoolUnbondingDelegationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.unbondingDelegation = UnbondingDelegation.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPoolUnbondingDelegationResponse {
    return {
      unbondingDelegation: isSet(object.unbondingDelegation)
        ? UnbondingDelegation.fromJSON(object.unbondingDelegation)
        : undefined,
    };
  },

  toJSON(message: QueryPoolUnbondingDelegationResponse): unknown {
    const obj: any = {};
    if (message.unbondingDelegation !== undefined) {
      obj.unbondingDelegation = UnbondingDelegation.toJSON(message.unbondingDelegation);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPoolUnbondingDelegationResponse>): QueryPoolUnbondingDelegationResponse {
    return QueryPoolUnbondingDelegationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryPoolUnbondingDelegationResponse>): QueryPoolUnbondingDelegationResponse {
    const message = createBaseQueryPoolUnbondingDelegationResponse();
    message.unbondingDelegation = (object.unbondingDelegation !== undefined && object.unbondingDelegation !== null)
      ? UnbondingDelegation.fromPartial(object.unbondingDelegation)
      : undefined;
    return message;
  },
};

function createBaseQueryOperatorDelegationsRequest(): QueryOperatorDelegationsRequest {
  return { operatorId: 0, pagination: undefined };
}

export const QueryOperatorDelegationsRequest: MessageFns<QueryOperatorDelegationsRequest> = {
  encode(message: QueryOperatorDelegationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operatorId !== 0) {
      writer.uint32(8).uint32(message.operatorId);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorDelegationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorDelegationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorDelegationsRequest {
    return {
      operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0,
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryOperatorDelegationsRequest): unknown {
    const obj: any = {};
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorDelegationsRequest>): QueryOperatorDelegationsRequest {
    return QueryOperatorDelegationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorDelegationsRequest>): QueryOperatorDelegationsRequest {
    const message = createBaseQueryOperatorDelegationsRequest();
    message.operatorId = object.operatorId ?? 0;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryOperatorDelegationsResponse(): QueryOperatorDelegationsResponse {
  return { delegations: [], pagination: undefined };
}

export const QueryOperatorDelegationsResponse: MessageFns<QueryOperatorDelegationsResponse> = {
  encode(message: QueryOperatorDelegationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.delegations) {
      DelegationResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorDelegationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorDelegationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegations.push(DelegationResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorDelegationsResponse {
    return {
      delegations: gt.Array.isArray(object?.delegations)
        ? object.delegations.map((e: any) => DelegationResponse.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryOperatorDelegationsResponse): unknown {
    const obj: any = {};
    if (message.delegations?.length) {
      obj.delegations = message.delegations.map((e) => DelegationResponse.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorDelegationsResponse>): QueryOperatorDelegationsResponse {
    return QueryOperatorDelegationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorDelegationsResponse>): QueryOperatorDelegationsResponse {
    const message = createBaseQueryOperatorDelegationsResponse();
    message.delegations = object.delegations?.map((e) => DelegationResponse.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryOperatorDelegationRequest(): QueryOperatorDelegationRequest {
  return { operatorId: 0, delegatorAddress: "" };
}

export const QueryOperatorDelegationRequest: MessageFns<QueryOperatorDelegationRequest> = {
  encode(message: QueryOperatorDelegationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operatorId !== 0) {
      writer.uint32(8).uint32(message.operatorId);
    }
    if (message.delegatorAddress !== "") {
      writer.uint32(18).string(message.delegatorAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorDelegationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorDelegationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorDelegationRequest {
    return {
      operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0,
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
    };
  },

  toJSON(message: QueryOperatorDelegationRequest): unknown {
    const obj: any = {};
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorDelegationRequest>): QueryOperatorDelegationRequest {
    return QueryOperatorDelegationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorDelegationRequest>): QueryOperatorDelegationRequest {
    const message = createBaseQueryOperatorDelegationRequest();
    message.operatorId = object.operatorId ?? 0;
    message.delegatorAddress = object.delegatorAddress ?? "";
    return message;
  },
};

function createBaseQueryOperatorDelegationResponse(): QueryOperatorDelegationResponse {
  return { delegation: undefined };
}

export const QueryOperatorDelegationResponse: MessageFns<QueryOperatorDelegationResponse> = {
  encode(message: QueryOperatorDelegationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegation !== undefined) {
      DelegationResponse.encode(message.delegation, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorDelegationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorDelegationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegation = DelegationResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorDelegationResponse {
    return { delegation: isSet(object.delegation) ? DelegationResponse.fromJSON(object.delegation) : undefined };
  },

  toJSON(message: QueryOperatorDelegationResponse): unknown {
    const obj: any = {};
    if (message.delegation !== undefined) {
      obj.delegation = DelegationResponse.toJSON(message.delegation);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorDelegationResponse>): QueryOperatorDelegationResponse {
    return QueryOperatorDelegationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorDelegationResponse>): QueryOperatorDelegationResponse {
    const message = createBaseQueryOperatorDelegationResponse();
    message.delegation = (object.delegation !== undefined && object.delegation !== null)
      ? DelegationResponse.fromPartial(object.delegation)
      : undefined;
    return message;
  },
};

function createBaseQueryOperatorUnbondingDelegationsRequest(): QueryOperatorUnbondingDelegationsRequest {
  return { operatorId: 0, pagination: undefined };
}

export const QueryOperatorUnbondingDelegationsRequest: MessageFns<QueryOperatorUnbondingDelegationsRequest> = {
  encode(message: QueryOperatorUnbondingDelegationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operatorId !== 0) {
      writer.uint32(8).uint32(message.operatorId);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorUnbondingDelegationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorUnbondingDelegationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorUnbondingDelegationsRequest {
    return {
      operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0,
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryOperatorUnbondingDelegationsRequest): unknown {
    const obj: any = {};
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorUnbondingDelegationsRequest>): QueryOperatorUnbondingDelegationsRequest {
    return QueryOperatorUnbondingDelegationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorUnbondingDelegationsRequest>): QueryOperatorUnbondingDelegationsRequest {
    const message = createBaseQueryOperatorUnbondingDelegationsRequest();
    message.operatorId = object.operatorId ?? 0;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryOperatorUnbondingDelegationsResponse(): QueryOperatorUnbondingDelegationsResponse {
  return { unbondingDelegations: [], pagination: undefined };
}

export const QueryOperatorUnbondingDelegationsResponse: MessageFns<QueryOperatorUnbondingDelegationsResponse> = {
  encode(message: QueryOperatorUnbondingDelegationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.unbondingDelegations) {
      UnbondingDelegation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorUnbondingDelegationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorUnbondingDelegationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.unbondingDelegations.push(UnbondingDelegation.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorUnbondingDelegationsResponse {
    return {
      unbondingDelegations: gt.Array.isArray(object?.unbondingDelegations)
        ? object.unbondingDelegations.map((e: any) => UnbondingDelegation.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryOperatorUnbondingDelegationsResponse): unknown {
    const obj: any = {};
    if (message.unbondingDelegations?.length) {
      obj.unbondingDelegations = message.unbondingDelegations.map((e) => UnbondingDelegation.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorUnbondingDelegationsResponse>): QueryOperatorUnbondingDelegationsResponse {
    return QueryOperatorUnbondingDelegationsResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryOperatorUnbondingDelegationsResponse>,
  ): QueryOperatorUnbondingDelegationsResponse {
    const message = createBaseQueryOperatorUnbondingDelegationsResponse();
    message.unbondingDelegations = object.unbondingDelegations?.map((e) => UnbondingDelegation.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryOperatorUnbondingDelegationRequest(): QueryOperatorUnbondingDelegationRequest {
  return { operatorId: 0, delegatorAddress: "" };
}

export const QueryOperatorUnbondingDelegationRequest: MessageFns<QueryOperatorUnbondingDelegationRequest> = {
  encode(message: QueryOperatorUnbondingDelegationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operatorId !== 0) {
      writer.uint32(8).uint32(message.operatorId);
    }
    if (message.delegatorAddress !== "") {
      writer.uint32(18).string(message.delegatorAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorUnbondingDelegationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorUnbondingDelegationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorUnbondingDelegationRequest {
    return {
      operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0,
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
    };
  },

  toJSON(message: QueryOperatorUnbondingDelegationRequest): unknown {
    const obj: any = {};
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorUnbondingDelegationRequest>): QueryOperatorUnbondingDelegationRequest {
    return QueryOperatorUnbondingDelegationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorUnbondingDelegationRequest>): QueryOperatorUnbondingDelegationRequest {
    const message = createBaseQueryOperatorUnbondingDelegationRequest();
    message.operatorId = object.operatorId ?? 0;
    message.delegatorAddress = object.delegatorAddress ?? "";
    return message;
  },
};

function createBaseQueryOperatorUnbondingDelegationResponse(): QueryOperatorUnbondingDelegationResponse {
  return { unbondingDelegation: undefined };
}

export const QueryOperatorUnbondingDelegationResponse: MessageFns<QueryOperatorUnbondingDelegationResponse> = {
  encode(message: QueryOperatorUnbondingDelegationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.unbondingDelegation !== undefined) {
      UnbondingDelegation.encode(message.unbondingDelegation, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOperatorUnbondingDelegationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOperatorUnbondingDelegationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.unbondingDelegation = UnbondingDelegation.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOperatorUnbondingDelegationResponse {
    return {
      unbondingDelegation: isSet(object.unbondingDelegation)
        ? UnbondingDelegation.fromJSON(object.unbondingDelegation)
        : undefined,
    };
  },

  toJSON(message: QueryOperatorUnbondingDelegationResponse): unknown {
    const obj: any = {};
    if (message.unbondingDelegation !== undefined) {
      obj.unbondingDelegation = UnbondingDelegation.toJSON(message.unbondingDelegation);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOperatorUnbondingDelegationResponse>): QueryOperatorUnbondingDelegationResponse {
    return QueryOperatorUnbondingDelegationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOperatorUnbondingDelegationResponse>): QueryOperatorUnbondingDelegationResponse {
    const message = createBaseQueryOperatorUnbondingDelegationResponse();
    message.unbondingDelegation = (object.unbondingDelegation !== undefined && object.unbondingDelegation !== null)
      ? UnbondingDelegation.fromPartial(object.unbondingDelegation)
      : undefined;
    return message;
  },
};

function createBaseQueryServiceDelegationsRequest(): QueryServiceDelegationsRequest {
  return { serviceId: 0, pagination: undefined };
}

export const QueryServiceDelegationsRequest: MessageFns<QueryServiceDelegationsRequest> = {
  encode(message: QueryServiceDelegationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceId !== 0) {
      writer.uint32(8).uint32(message.serviceId);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryServiceDelegationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryServiceDelegationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryServiceDelegationsRequest {
    return {
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryServiceDelegationsRequest): unknown {
    const obj: any = {};
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryServiceDelegationsRequest>): QueryServiceDelegationsRequest {
    return QueryServiceDelegationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryServiceDelegationsRequest>): QueryServiceDelegationsRequest {
    const message = createBaseQueryServiceDelegationsRequest();
    message.serviceId = object.serviceId ?? 0;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryServiceDelegationsResponse(): QueryServiceDelegationsResponse {
  return { delegations: [], pagination: undefined };
}

export const QueryServiceDelegationsResponse: MessageFns<QueryServiceDelegationsResponse> = {
  encode(message: QueryServiceDelegationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.delegations) {
      DelegationResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryServiceDelegationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryServiceDelegationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegations.push(DelegationResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryServiceDelegationsResponse {
    return {
      delegations: gt.Array.isArray(object?.delegations)
        ? object.delegations.map((e: any) => DelegationResponse.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryServiceDelegationsResponse): unknown {
    const obj: any = {};
    if (message.delegations?.length) {
      obj.delegations = message.delegations.map((e) => DelegationResponse.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryServiceDelegationsResponse>): QueryServiceDelegationsResponse {
    return QueryServiceDelegationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryServiceDelegationsResponse>): QueryServiceDelegationsResponse {
    const message = createBaseQueryServiceDelegationsResponse();
    message.delegations = object.delegations?.map((e) => DelegationResponse.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryServiceDelegationRequest(): QueryServiceDelegationRequest {
  return { serviceId: 0, delegatorAddress: "" };
}

export const QueryServiceDelegationRequest: MessageFns<QueryServiceDelegationRequest> = {
  encode(message: QueryServiceDelegationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceId !== 0) {
      writer.uint32(8).uint32(message.serviceId);
    }
    if (message.delegatorAddress !== "") {
      writer.uint32(18).string(message.delegatorAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryServiceDelegationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryServiceDelegationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryServiceDelegationRequest {
    return {
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
    };
  },

  toJSON(message: QueryServiceDelegationRequest): unknown {
    const obj: any = {};
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryServiceDelegationRequest>): QueryServiceDelegationRequest {
    return QueryServiceDelegationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryServiceDelegationRequest>): QueryServiceDelegationRequest {
    const message = createBaseQueryServiceDelegationRequest();
    message.serviceId = object.serviceId ?? 0;
    message.delegatorAddress = object.delegatorAddress ?? "";
    return message;
  },
};

function createBaseQueryServiceDelegationResponse(): QueryServiceDelegationResponse {
  return { delegation: undefined };
}

export const QueryServiceDelegationResponse: MessageFns<QueryServiceDelegationResponse> = {
  encode(message: QueryServiceDelegationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegation !== undefined) {
      DelegationResponse.encode(message.delegation, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryServiceDelegationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryServiceDelegationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegation = DelegationResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryServiceDelegationResponse {
    return { delegation: isSet(object.delegation) ? DelegationResponse.fromJSON(object.delegation) : undefined };
  },

  toJSON(message: QueryServiceDelegationResponse): unknown {
    const obj: any = {};
    if (message.delegation !== undefined) {
      obj.delegation = DelegationResponse.toJSON(message.delegation);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryServiceDelegationResponse>): QueryServiceDelegationResponse {
    return QueryServiceDelegationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryServiceDelegationResponse>): QueryServiceDelegationResponse {
    const message = createBaseQueryServiceDelegationResponse();
    message.delegation = (object.delegation !== undefined && object.delegation !== null)
      ? DelegationResponse.fromPartial(object.delegation)
      : undefined;
    return message;
  },
};

function createBaseQueryServiceUnbondingDelegationsRequest(): QueryServiceUnbondingDelegationsRequest {
  return { serviceId: 0, pagination: undefined };
}

export const QueryServiceUnbondingDelegationsRequest: MessageFns<QueryServiceUnbondingDelegationsRequest> = {
  encode(message: QueryServiceUnbondingDelegationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceId !== 0) {
      writer.uint32(8).uint32(message.serviceId);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryServiceUnbondingDelegationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryServiceUnbondingDelegationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryServiceUnbondingDelegationsRequest {
    return {
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryServiceUnbondingDelegationsRequest): unknown {
    const obj: any = {};
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryServiceUnbondingDelegationsRequest>): QueryServiceUnbondingDelegationsRequest {
    return QueryServiceUnbondingDelegationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryServiceUnbondingDelegationsRequest>): QueryServiceUnbondingDelegationsRequest {
    const message = createBaseQueryServiceUnbondingDelegationsRequest();
    message.serviceId = object.serviceId ?? 0;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryServiceUnbondingDelegationsResponse(): QueryServiceUnbondingDelegationsResponse {
  return { unbondingDelegations: [], pagination: undefined };
}

export const QueryServiceUnbondingDelegationsResponse: MessageFns<QueryServiceUnbondingDelegationsResponse> = {
  encode(message: QueryServiceUnbondingDelegationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.unbondingDelegations) {
      UnbondingDelegation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryServiceUnbondingDelegationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryServiceUnbondingDelegationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.unbondingDelegations.push(UnbondingDelegation.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryServiceUnbondingDelegationsResponse {
    return {
      unbondingDelegations: gt.Array.isArray(object?.unbondingDelegations)
        ? object.unbondingDelegations.map((e: any) => UnbondingDelegation.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryServiceUnbondingDelegationsResponse): unknown {
    const obj: any = {};
    if (message.unbondingDelegations?.length) {
      obj.unbondingDelegations = message.unbondingDelegations.map((e) => UnbondingDelegation.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryServiceUnbondingDelegationsResponse>): QueryServiceUnbondingDelegationsResponse {
    return QueryServiceUnbondingDelegationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryServiceUnbondingDelegationsResponse>): QueryServiceUnbondingDelegationsResponse {
    const message = createBaseQueryServiceUnbondingDelegationsResponse();
    message.unbondingDelegations = object.unbondingDelegations?.map((e) => UnbondingDelegation.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryServiceUnbondingDelegationRequest(): QueryServiceUnbondingDelegationRequest {
  return { serviceId: 0, delegatorAddress: "" };
}

export const QueryServiceUnbondingDelegationRequest: MessageFns<QueryServiceUnbondingDelegationRequest> = {
  encode(message: QueryServiceUnbondingDelegationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceId !== 0) {
      writer.uint32(8).uint32(message.serviceId);
    }
    if (message.delegatorAddress !== "") {
      writer.uint32(18).string(message.delegatorAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryServiceUnbondingDelegationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryServiceUnbondingDelegationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryServiceUnbondingDelegationRequest {
    return {
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
    };
  },

  toJSON(message: QueryServiceUnbondingDelegationRequest): unknown {
    const obj: any = {};
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryServiceUnbondingDelegationRequest>): QueryServiceUnbondingDelegationRequest {
    return QueryServiceUnbondingDelegationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryServiceUnbondingDelegationRequest>): QueryServiceUnbondingDelegationRequest {
    const message = createBaseQueryServiceUnbondingDelegationRequest();
    message.serviceId = object.serviceId ?? 0;
    message.delegatorAddress = object.delegatorAddress ?? "";
    return message;
  },
};

function createBaseQueryServiceUnbondingDelegationResponse(): QueryServiceUnbondingDelegationResponse {
  return { unbondingDelegation: undefined };
}

export const QueryServiceUnbondingDelegationResponse: MessageFns<QueryServiceUnbondingDelegationResponse> = {
  encode(message: QueryServiceUnbondingDelegationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.unbondingDelegation !== undefined) {
      UnbondingDelegation.encode(message.unbondingDelegation, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryServiceUnbondingDelegationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryServiceUnbondingDelegationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.unbondingDelegation = UnbondingDelegation.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryServiceUnbondingDelegationResponse {
    return {
      unbondingDelegation: isSet(object.unbondingDelegation)
        ? UnbondingDelegation.fromJSON(object.unbondingDelegation)
        : undefined,
    };
  },

  toJSON(message: QueryServiceUnbondingDelegationResponse): unknown {
    const obj: any = {};
    if (message.unbondingDelegation !== undefined) {
      obj.unbondingDelegation = UnbondingDelegation.toJSON(message.unbondingDelegation);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryServiceUnbondingDelegationResponse>): QueryServiceUnbondingDelegationResponse {
    return QueryServiceUnbondingDelegationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryServiceUnbondingDelegationResponse>): QueryServiceUnbondingDelegationResponse {
    const message = createBaseQueryServiceUnbondingDelegationResponse();
    message.unbondingDelegation = (object.unbondingDelegation !== undefined && object.unbondingDelegation !== null)
      ? UnbondingDelegation.fromPartial(object.unbondingDelegation)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegatorPoolDelegationsRequest(): QueryDelegatorPoolDelegationsRequest {
  return { delegatorAddress: "", pagination: undefined };
}

export const QueryDelegatorPoolDelegationsRequest: MessageFns<QueryDelegatorPoolDelegationsRequest> = {
  encode(message: QueryDelegatorPoolDelegationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorPoolDelegationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorPoolDelegationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorPoolDelegationsRequest {
    return {
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDelegatorPoolDelegationsRequest): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorPoolDelegationsRequest>): QueryDelegatorPoolDelegationsRequest {
    return QueryDelegatorPoolDelegationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorPoolDelegationsRequest>): QueryDelegatorPoolDelegationsRequest {
    const message = createBaseQueryDelegatorPoolDelegationsRequest();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegatorPoolDelegationsResponse(): QueryDelegatorPoolDelegationsResponse {
  return { delegations: [], pagination: undefined };
}

export const QueryDelegatorPoolDelegationsResponse: MessageFns<QueryDelegatorPoolDelegationsResponse> = {
  encode(message: QueryDelegatorPoolDelegationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.delegations) {
      DelegationResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorPoolDelegationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorPoolDelegationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegations.push(DelegationResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorPoolDelegationsResponse {
    return {
      delegations: gt.Array.isArray(object?.delegations)
        ? object.delegations.map((e: any) => DelegationResponse.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDelegatorPoolDelegationsResponse): unknown {
    const obj: any = {};
    if (message.delegations?.length) {
      obj.delegations = message.delegations.map((e) => DelegationResponse.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorPoolDelegationsResponse>): QueryDelegatorPoolDelegationsResponse {
    return QueryDelegatorPoolDelegationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorPoolDelegationsResponse>): QueryDelegatorPoolDelegationsResponse {
    const message = createBaseQueryDelegatorPoolDelegationsResponse();
    message.delegations = object.delegations?.map((e) => DelegationResponse.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegatorPoolUnbondingDelegationsRequest(): QueryDelegatorPoolUnbondingDelegationsRequest {
  return { delegatorAddress: "", pagination: undefined };
}

export const QueryDelegatorPoolUnbondingDelegationsRequest: MessageFns<QueryDelegatorPoolUnbondingDelegationsRequest> =
  {
    encode(
      message: QueryDelegatorPoolUnbondingDelegationsRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.delegatorAddress !== "") {
        writer.uint32(10).string(message.delegatorAddress);
      }
      if (message.pagination !== undefined) {
        PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorPoolUnbondingDelegationsRequest {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryDelegatorPoolUnbondingDelegationsRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.delegatorAddress = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.pagination = PageRequest.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryDelegatorPoolUnbondingDelegationsRequest {
      return {
        delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
        pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
      };
    },

    toJSON(message: QueryDelegatorPoolUnbondingDelegationsRequest): unknown {
      const obj: any = {};
      if (message.delegatorAddress !== "") {
        obj.delegatorAddress = message.delegatorAddress;
      }
      if (message.pagination !== undefined) {
        obj.pagination = PageRequest.toJSON(message.pagination);
      }
      return obj;
    },

    create(
      base?: DeepPartial<QueryDelegatorPoolUnbondingDelegationsRequest>,
    ): QueryDelegatorPoolUnbondingDelegationsRequest {
      return QueryDelegatorPoolUnbondingDelegationsRequest.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<QueryDelegatorPoolUnbondingDelegationsRequest>,
    ): QueryDelegatorPoolUnbondingDelegationsRequest {
      const message = createBaseQueryDelegatorPoolUnbondingDelegationsRequest();
      message.delegatorAddress = object.delegatorAddress ?? "";
      message.pagination = (object.pagination !== undefined && object.pagination !== null)
        ? PageRequest.fromPartial(object.pagination)
        : undefined;
      return message;
    },
  };

function createBaseQueryDelegatorPoolUnbondingDelegationsResponse(): QueryDelegatorPoolUnbondingDelegationsResponse {
  return { unbondingDelegations: [], pagination: undefined };
}

export const QueryDelegatorPoolUnbondingDelegationsResponse: MessageFns<
  QueryDelegatorPoolUnbondingDelegationsResponse
> = {
  encode(
    message: QueryDelegatorPoolUnbondingDelegationsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.unbondingDelegations) {
      UnbondingDelegation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorPoolUnbondingDelegationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorPoolUnbondingDelegationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.unbondingDelegations.push(UnbondingDelegation.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorPoolUnbondingDelegationsResponse {
    return {
      unbondingDelegations: gt.Array.isArray(object?.unbondingDelegations)
        ? object.unbondingDelegations.map((e: any) => UnbondingDelegation.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDelegatorPoolUnbondingDelegationsResponse): unknown {
    const obj: any = {};
    if (message.unbondingDelegations?.length) {
      obj.unbondingDelegations = message.unbondingDelegations.map((e) => UnbondingDelegation.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(
    base?: DeepPartial<QueryDelegatorPoolUnbondingDelegationsResponse>,
  ): QueryDelegatorPoolUnbondingDelegationsResponse {
    return QueryDelegatorPoolUnbondingDelegationsResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryDelegatorPoolUnbondingDelegationsResponse>,
  ): QueryDelegatorPoolUnbondingDelegationsResponse {
    const message = createBaseQueryDelegatorPoolUnbondingDelegationsResponse();
    message.unbondingDelegations = object.unbondingDelegations?.map((e) => UnbondingDelegation.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegatorOperatorDelegationsRequest(): QueryDelegatorOperatorDelegationsRequest {
  return { delegatorAddress: "", pagination: undefined };
}

export const QueryDelegatorOperatorDelegationsRequest: MessageFns<QueryDelegatorOperatorDelegationsRequest> = {
  encode(message: QueryDelegatorOperatorDelegationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorOperatorDelegationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorOperatorDelegationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorOperatorDelegationsRequest {
    return {
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDelegatorOperatorDelegationsRequest): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorOperatorDelegationsRequest>): QueryDelegatorOperatorDelegationsRequest {
    return QueryDelegatorOperatorDelegationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorOperatorDelegationsRequest>): QueryDelegatorOperatorDelegationsRequest {
    const message = createBaseQueryDelegatorOperatorDelegationsRequest();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegatorOperatorDelegationsResponse(): QueryDelegatorOperatorDelegationsResponse {
  return { delegations: [], pagination: undefined };
}

export const QueryDelegatorOperatorDelegationsResponse: MessageFns<QueryDelegatorOperatorDelegationsResponse> = {
  encode(message: QueryDelegatorOperatorDelegationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.delegations) {
      DelegationResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorOperatorDelegationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorOperatorDelegationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegations.push(DelegationResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorOperatorDelegationsResponse {
    return {
      delegations: gt.Array.isArray(object?.delegations)
        ? object.delegations.map((e: any) => DelegationResponse.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDelegatorOperatorDelegationsResponse): unknown {
    const obj: any = {};
    if (message.delegations?.length) {
      obj.delegations = message.delegations.map((e) => DelegationResponse.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorOperatorDelegationsResponse>): QueryDelegatorOperatorDelegationsResponse {
    return QueryDelegatorOperatorDelegationsResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryDelegatorOperatorDelegationsResponse>,
  ): QueryDelegatorOperatorDelegationsResponse {
    const message = createBaseQueryDelegatorOperatorDelegationsResponse();
    message.delegations = object.delegations?.map((e) => DelegationResponse.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegatorOperatorUnbondingDelegationsRequest(): QueryDelegatorOperatorUnbondingDelegationsRequest {
  return { delegatorAddress: "", pagination: undefined };
}

export const QueryDelegatorOperatorUnbondingDelegationsRequest: MessageFns<
  QueryDelegatorOperatorUnbondingDelegationsRequest
> = {
  encode(
    message: QueryDelegatorOperatorUnbondingDelegationsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorOperatorUnbondingDelegationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorOperatorUnbondingDelegationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorOperatorUnbondingDelegationsRequest {
    return {
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDelegatorOperatorUnbondingDelegationsRequest): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(
    base?: DeepPartial<QueryDelegatorOperatorUnbondingDelegationsRequest>,
  ): QueryDelegatorOperatorUnbondingDelegationsRequest {
    return QueryDelegatorOperatorUnbondingDelegationsRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryDelegatorOperatorUnbondingDelegationsRequest>,
  ): QueryDelegatorOperatorUnbondingDelegationsRequest {
    const message = createBaseQueryDelegatorOperatorUnbondingDelegationsRequest();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegatorOperatorUnbondingDelegationsResponse(): QueryDelegatorOperatorUnbondingDelegationsResponse {
  return { unbondingDelegations: [], pagination: undefined };
}

export const QueryDelegatorOperatorUnbondingDelegationsResponse: MessageFns<
  QueryDelegatorOperatorUnbondingDelegationsResponse
> = {
  encode(
    message: QueryDelegatorOperatorUnbondingDelegationsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.unbondingDelegations) {
      UnbondingDelegation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorOperatorUnbondingDelegationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorOperatorUnbondingDelegationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.unbondingDelegations.push(UnbondingDelegation.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorOperatorUnbondingDelegationsResponse {
    return {
      unbondingDelegations: gt.Array.isArray(object?.unbondingDelegations)
        ? object.unbondingDelegations.map((e: any) => UnbondingDelegation.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDelegatorOperatorUnbondingDelegationsResponse): unknown {
    const obj: any = {};
    if (message.unbondingDelegations?.length) {
      obj.unbondingDelegations = message.unbondingDelegations.map((e) => UnbondingDelegation.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(
    base?: DeepPartial<QueryDelegatorOperatorUnbondingDelegationsResponse>,
  ): QueryDelegatorOperatorUnbondingDelegationsResponse {
    return QueryDelegatorOperatorUnbondingDelegationsResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryDelegatorOperatorUnbondingDelegationsResponse>,
  ): QueryDelegatorOperatorUnbondingDelegationsResponse {
    const message = createBaseQueryDelegatorOperatorUnbondingDelegationsResponse();
    message.unbondingDelegations = object.unbondingDelegations?.map((e) => UnbondingDelegation.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegatorServiceDelegationsRequest(): QueryDelegatorServiceDelegationsRequest {
  return { delegatorAddress: "", pagination: undefined };
}

export const QueryDelegatorServiceDelegationsRequest: MessageFns<QueryDelegatorServiceDelegationsRequest> = {
  encode(message: QueryDelegatorServiceDelegationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorServiceDelegationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorServiceDelegationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorServiceDelegationsRequest {
    return {
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDelegatorServiceDelegationsRequest): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorServiceDelegationsRequest>): QueryDelegatorServiceDelegationsRequest {
    return QueryDelegatorServiceDelegationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorServiceDelegationsRequest>): QueryDelegatorServiceDelegationsRequest {
    const message = createBaseQueryDelegatorServiceDelegationsRequest();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegatorServiceDelegationsResponse(): QueryDelegatorServiceDelegationsResponse {
  return { delegations: [], pagination: undefined };
}

export const QueryDelegatorServiceDelegationsResponse: MessageFns<QueryDelegatorServiceDelegationsResponse> = {
  encode(message: QueryDelegatorServiceDelegationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.delegations) {
      DelegationResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorServiceDelegationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorServiceDelegationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegations.push(DelegationResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorServiceDelegationsResponse {
    return {
      delegations: gt.Array.isArray(object?.delegations)
        ? object.delegations.map((e: any) => DelegationResponse.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDelegatorServiceDelegationsResponse): unknown {
    const obj: any = {};
    if (message.delegations?.length) {
      obj.delegations = message.delegations.map((e) => DelegationResponse.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorServiceDelegationsResponse>): QueryDelegatorServiceDelegationsResponse {
    return QueryDelegatorServiceDelegationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorServiceDelegationsResponse>): QueryDelegatorServiceDelegationsResponse {
    const message = createBaseQueryDelegatorServiceDelegationsResponse();
    message.delegations = object.delegations?.map((e) => DelegationResponse.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegatorServiceUnbondingDelegationsRequest(): QueryDelegatorServiceUnbondingDelegationsRequest {
  return { delegatorAddress: "", pagination: undefined };
}

export const QueryDelegatorServiceUnbondingDelegationsRequest: MessageFns<
  QueryDelegatorServiceUnbondingDelegationsRequest
> = {
  encode(
    message: QueryDelegatorServiceUnbondingDelegationsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorServiceUnbondingDelegationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorServiceUnbondingDelegationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorServiceUnbondingDelegationsRequest {
    return {
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDelegatorServiceUnbondingDelegationsRequest): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(
    base?: DeepPartial<QueryDelegatorServiceUnbondingDelegationsRequest>,
  ): QueryDelegatorServiceUnbondingDelegationsRequest {
    return QueryDelegatorServiceUnbondingDelegationsRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryDelegatorServiceUnbondingDelegationsRequest>,
  ): QueryDelegatorServiceUnbondingDelegationsRequest {
    const message = createBaseQueryDelegatorServiceUnbondingDelegationsRequest();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegatorServiceUnbondingDelegationsResponse(): QueryDelegatorServiceUnbondingDelegationsResponse {
  return { unbondingDelegations: [], pagination: undefined };
}

export const QueryDelegatorServiceUnbondingDelegationsResponse: MessageFns<
  QueryDelegatorServiceUnbondingDelegationsResponse
> = {
  encode(
    message: QueryDelegatorServiceUnbondingDelegationsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.unbondingDelegations) {
      UnbondingDelegation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorServiceUnbondingDelegationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorServiceUnbondingDelegationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.unbondingDelegations.push(UnbondingDelegation.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorServiceUnbondingDelegationsResponse {
    return {
      unbondingDelegations: gt.Array.isArray(object?.unbondingDelegations)
        ? object.unbondingDelegations.map((e: any) => UnbondingDelegation.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDelegatorServiceUnbondingDelegationsResponse): unknown {
    const obj: any = {};
    if (message.unbondingDelegations?.length) {
      obj.unbondingDelegations = message.unbondingDelegations.map((e) => UnbondingDelegation.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(
    base?: DeepPartial<QueryDelegatorServiceUnbondingDelegationsResponse>,
  ): QueryDelegatorServiceUnbondingDelegationsResponse {
    return QueryDelegatorServiceUnbondingDelegationsResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryDelegatorServiceUnbondingDelegationsResponse>,
  ): QueryDelegatorServiceUnbondingDelegationsResponse {
    const message = createBaseQueryDelegatorServiceUnbondingDelegationsResponse();
    message.unbondingDelegations = object.unbondingDelegations?.map((e) => UnbondingDelegation.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegatorPoolsRequest(): QueryDelegatorPoolsRequest {
  return { delegatorAddress: "", pagination: undefined };
}

export const QueryDelegatorPoolsRequest: MessageFns<QueryDelegatorPoolsRequest> = {
  encode(message: QueryDelegatorPoolsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorPoolsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorPoolsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorPoolsRequest {
    return {
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDelegatorPoolsRequest): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorPoolsRequest>): QueryDelegatorPoolsRequest {
    return QueryDelegatorPoolsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorPoolsRequest>): QueryDelegatorPoolsRequest {
    const message = createBaseQueryDelegatorPoolsRequest();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegatorPoolsResponse(): QueryDelegatorPoolsResponse {
  return { pools: [], pagination: undefined };
}

export const QueryDelegatorPoolsResponse: MessageFns<QueryDelegatorPoolsResponse> = {
  encode(message: QueryDelegatorPoolsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.pools) {
      Pool.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorPoolsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorPoolsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pools.push(Pool.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorPoolsResponse {
    return {
      pools: gt.Array.isArray(object?.pools) ? object.pools.map((e: any) => Pool.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDelegatorPoolsResponse): unknown {
    const obj: any = {};
    if (message.pools?.length) {
      obj.pools = message.pools.map((e) => Pool.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorPoolsResponse>): QueryDelegatorPoolsResponse {
    return QueryDelegatorPoolsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorPoolsResponse>): QueryDelegatorPoolsResponse {
    const message = createBaseQueryDelegatorPoolsResponse();
    message.pools = object.pools?.map((e) => Pool.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegatorPoolRequest(): QueryDelegatorPoolRequest {
  return { delegatorAddress: "", poolId: 0 };
}

export const QueryDelegatorPoolRequest: MessageFns<QueryDelegatorPoolRequest> = {
  encode(message: QueryDelegatorPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.poolId !== 0) {
      writer.uint32(16).uint32(message.poolId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.poolId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorPoolRequest {
    return {
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
      poolId: isSet(object.poolId) ? gt.Number(object.poolId) : 0,
    };
  },

  toJSON(message: QueryDelegatorPoolRequest): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorPoolRequest>): QueryDelegatorPoolRequest {
    return QueryDelegatorPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorPoolRequest>): QueryDelegatorPoolRequest {
    const message = createBaseQueryDelegatorPoolRequest();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.poolId = object.poolId ?? 0;
    return message;
  },
};

function createBaseQueryDelegatorPoolResponse(): QueryDelegatorPoolResponse {
  return { pool: undefined };
}

export const QueryDelegatorPoolResponse: MessageFns<QueryDelegatorPoolResponse> = {
  encode(message: QueryDelegatorPoolResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pool !== undefined) {
      Pool.encode(message.pool, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorPoolResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorPoolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pool = Pool.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorPoolResponse {
    return { pool: isSet(object.pool) ? Pool.fromJSON(object.pool) : undefined };
  },

  toJSON(message: QueryDelegatorPoolResponse): unknown {
    const obj: any = {};
    if (message.pool !== undefined) {
      obj.pool = Pool.toJSON(message.pool);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorPoolResponse>): QueryDelegatorPoolResponse {
    return QueryDelegatorPoolResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorPoolResponse>): QueryDelegatorPoolResponse {
    const message = createBaseQueryDelegatorPoolResponse();
    message.pool = (object.pool !== undefined && object.pool !== null) ? Pool.fromPartial(object.pool) : undefined;
    return message;
  },
};

function createBaseQueryDelegatorOperatorsRequest(): QueryDelegatorOperatorsRequest {
  return { delegatorAddress: "", pagination: undefined };
}

export const QueryDelegatorOperatorsRequest: MessageFns<QueryDelegatorOperatorsRequest> = {
  encode(message: QueryDelegatorOperatorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorOperatorsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorOperatorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorOperatorsRequest {
    return {
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDelegatorOperatorsRequest): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorOperatorsRequest>): QueryDelegatorOperatorsRequest {
    return QueryDelegatorOperatorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorOperatorsRequest>): QueryDelegatorOperatorsRequest {
    const message = createBaseQueryDelegatorOperatorsRequest();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegatorOperatorsResponse(): QueryDelegatorOperatorsResponse {
  return { operators: [], pagination: undefined };
}

export const QueryDelegatorOperatorsResponse: MessageFns<QueryDelegatorOperatorsResponse> = {
  encode(message: QueryDelegatorOperatorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.operators) {
      Operator.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorOperatorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorOperatorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.operators.push(Operator.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorOperatorsResponse {
    return {
      operators: gt.Array.isArray(object?.operators) ? object.operators.map((e: any) => Operator.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDelegatorOperatorsResponse): unknown {
    const obj: any = {};
    if (message.operators?.length) {
      obj.operators = message.operators.map((e) => Operator.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorOperatorsResponse>): QueryDelegatorOperatorsResponse {
    return QueryDelegatorOperatorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorOperatorsResponse>): QueryDelegatorOperatorsResponse {
    const message = createBaseQueryDelegatorOperatorsResponse();
    message.operators = object.operators?.map((e) => Operator.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegatorOperatorRequest(): QueryDelegatorOperatorRequest {
  return { delegatorAddress: "", operatorId: 0 };
}

export const QueryDelegatorOperatorRequest: MessageFns<QueryDelegatorOperatorRequest> = {
  encode(message: QueryDelegatorOperatorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.operatorId !== 0) {
      writer.uint32(16).uint32(message.operatorId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorOperatorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorOperatorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorOperatorRequest {
    return {
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
      operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0,
    };
  },

  toJSON(message: QueryDelegatorOperatorRequest): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorOperatorRequest>): QueryDelegatorOperatorRequest {
    return QueryDelegatorOperatorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorOperatorRequest>): QueryDelegatorOperatorRequest {
    const message = createBaseQueryDelegatorOperatorRequest();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.operatorId = object.operatorId ?? 0;
    return message;
  },
};

function createBaseQueryDelegatorOperatorResponse(): QueryDelegatorOperatorResponse {
  return { operator: undefined };
}

export const QueryDelegatorOperatorResponse: MessageFns<QueryDelegatorOperatorResponse> = {
  encode(message: QueryDelegatorOperatorResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operator !== undefined) {
      Operator.encode(message.operator, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorOperatorResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorOperatorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.operator = Operator.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorOperatorResponse {
    return { operator: isSet(object.operator) ? Operator.fromJSON(object.operator) : undefined };
  },

  toJSON(message: QueryDelegatorOperatorResponse): unknown {
    const obj: any = {};
    if (message.operator !== undefined) {
      obj.operator = Operator.toJSON(message.operator);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorOperatorResponse>): QueryDelegatorOperatorResponse {
    return QueryDelegatorOperatorResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorOperatorResponse>): QueryDelegatorOperatorResponse {
    const message = createBaseQueryDelegatorOperatorResponse();
    message.operator = (object.operator !== undefined && object.operator !== null)
      ? Operator.fromPartial(object.operator)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegatorServicesRequest(): QueryDelegatorServicesRequest {
  return { delegatorAddress: "", pagination: undefined };
}

export const QueryDelegatorServicesRequest: MessageFns<QueryDelegatorServicesRequest> = {
  encode(message: QueryDelegatorServicesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorServicesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorServicesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorServicesRequest {
    return {
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDelegatorServicesRequest): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorServicesRequest>): QueryDelegatorServicesRequest {
    return QueryDelegatorServicesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorServicesRequest>): QueryDelegatorServicesRequest {
    const message = createBaseQueryDelegatorServicesRequest();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegatorServicesResponse(): QueryDelegatorServicesResponse {
  return { services: [], pagination: undefined };
}

export const QueryDelegatorServicesResponse: MessageFns<QueryDelegatorServicesResponse> = {
  encode(message: QueryDelegatorServicesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.services) {
      Service.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorServicesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorServicesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.services.push(Service.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorServicesResponse {
    return {
      services: gt.Array.isArray(object?.services) ? object.services.map((e: any) => Service.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDelegatorServicesResponse): unknown {
    const obj: any = {};
    if (message.services?.length) {
      obj.services = message.services.map((e) => Service.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorServicesResponse>): QueryDelegatorServicesResponse {
    return QueryDelegatorServicesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorServicesResponse>): QueryDelegatorServicesResponse {
    const message = createBaseQueryDelegatorServicesResponse();
    message.services = object.services?.map((e) => Service.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDelegatorServiceRequest(): QueryDelegatorServiceRequest {
  return { delegatorAddress: "", serviceId: 0 };
}

export const QueryDelegatorServiceRequest: MessageFns<QueryDelegatorServiceRequest> = {
  encode(message: QueryDelegatorServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.serviceId !== 0) {
      writer.uint32(16).uint32(message.serviceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorServiceRequest {
    return {
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
    };
  },

  toJSON(message: QueryDelegatorServiceRequest): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorServiceRequest>): QueryDelegatorServiceRequest {
    return QueryDelegatorServiceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorServiceRequest>): QueryDelegatorServiceRequest {
    const message = createBaseQueryDelegatorServiceRequest();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.serviceId = object.serviceId ?? 0;
    return message;
  },
};

function createBaseQueryDelegatorServiceResponse(): QueryDelegatorServiceResponse {
  return { service: undefined };
}

export const QueryDelegatorServiceResponse: MessageFns<QueryDelegatorServiceResponse> = {
  encode(message: QueryDelegatorServiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service !== undefined) {
      Service.encode(message.service, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDelegatorServiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDelegatorServiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.service = Service.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDelegatorServiceResponse {
    return { service: isSet(object.service) ? Service.fromJSON(object.service) : undefined };
  },

  toJSON(message: QueryDelegatorServiceResponse): unknown {
    const obj: any = {};
    if (message.service !== undefined) {
      obj.service = Service.toJSON(message.service);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDelegatorServiceResponse>): QueryDelegatorServiceResponse {
    return QueryDelegatorServiceResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDelegatorServiceResponse>): QueryDelegatorServiceResponse {
    const message = createBaseQueryDelegatorServiceResponse();
    message.service = (object.service !== undefined && object.service !== null)
      ? Service.fromPartial(object.service)
      : undefined;
    return message;
  },
};

function createBaseQueryUserPreferencesRequest(): QueryUserPreferencesRequest {
  return { userAddress: "" };
}

export const QueryUserPreferencesRequest: MessageFns<QueryUserPreferencesRequest> = {
  encode(message: QueryUserPreferencesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userAddress !== "") {
      writer.uint32(10).string(message.userAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryUserPreferencesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUserPreferencesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUserPreferencesRequest {
    return { userAddress: isSet(object.userAddress) ? gt.String(object.userAddress) : "" };
  },

  toJSON(message: QueryUserPreferencesRequest): unknown {
    const obj: any = {};
    if (message.userAddress !== "") {
      obj.userAddress = message.userAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryUserPreferencesRequest>): QueryUserPreferencesRequest {
    return QueryUserPreferencesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryUserPreferencesRequest>): QueryUserPreferencesRequest {
    const message = createBaseQueryUserPreferencesRequest();
    message.userAddress = object.userAddress ?? "";
    return message;
  },
};

function createBaseQueryUserPreferencesResponse(): QueryUserPreferencesResponse {
  return { preferences: undefined };
}

export const QueryUserPreferencesResponse: MessageFns<QueryUserPreferencesResponse> = {
  encode(message: QueryUserPreferencesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.preferences !== undefined) {
      UserPreferences.encode(message.preferences, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryUserPreferencesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryUserPreferencesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.preferences = UserPreferences.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryUserPreferencesResponse {
    return { preferences: isSet(object.preferences) ? UserPreferences.fromJSON(object.preferences) : undefined };
  },

  toJSON(message: QueryUserPreferencesResponse): unknown {
    const obj: any = {};
    if (message.preferences !== undefined) {
      obj.preferences = UserPreferences.toJSON(message.preferences);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryUserPreferencesResponse>): QueryUserPreferencesResponse {
    return QueryUserPreferencesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryUserPreferencesResponse>): QueryUserPreferencesResponse {
    const message = createBaseQueryUserPreferencesResponse();
    message.preferences = (object.preferences !== undefined && object.preferences !== null)
      ? UserPreferences.fromPartial(object.preferences)
      : undefined;
    return message;
  },
};

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** OperatorJoinedServices queries the services that an operator has joined. */
  OperatorJoinedServices(request: QueryOperatorJoinedServicesRequest): Promise<QueryOperatorJoinedServicesResponse>;
  /** ServiceAllowedOperators queries the allowed operators for a given service. */
  ServiceAllowedOperators(request: QueryServiceAllowedOperatorsRequest): Promise<QueryServiceAllowedOperatorsResponse>;
  /** ServiceSecuringPools queries the pools that are securing a given service. */
  ServiceSecuringPools(request: QueryServiceSecuringPoolsRequest): Promise<QueryServiceSecuringPoolsResponse>;
  ServiceOperators(request: QueryServiceOperatorsRequest): Promise<QueryServiceOperatorsResponse>;
  /** PoolDelegations queries the delegations info for the given pool. */
  PoolDelegations(request: QueryPoolDelegationsRequest): Promise<QueryPoolDelegationsResponse>;
  /**
   * PoolDelegation queries the delegation info for the given pool and
   * delegator.
   */
  PoolDelegation(request: QueryPoolDelegationRequest): Promise<QueryPoolDelegationResponse>;
  /**
   * PoolUnbondingDelegations queries the unbonding delegations info for the
   * given pool.
   */
  PoolUnbondingDelegations(
    request: QueryPoolUnbondingDelegationsRequest,
  ): Promise<QueryPoolUnbondingDelegationsResponse>;
  /**
   * PoolUnbondingDelegation queries the unbonding delegation info for the given
   * pool and delegator.
   */
  PoolUnbondingDelegation(request: QueryPoolUnbondingDelegationRequest): Promise<QueryPoolUnbondingDelegationResponse>;
  /** OperatorDelegations queries the delegations info for the given operator. */
  OperatorDelegations(request: QueryOperatorDelegationsRequest): Promise<QueryOperatorDelegationsResponse>;
  /**
   * OperatorDelegation queries the delegation info for the given operator and
   * delegator.
   */
  OperatorDelegation(request: QueryOperatorDelegationRequest): Promise<QueryOperatorDelegationResponse>;
  /**
   * OperatorUnbondingDelegations queries the unbonding delegations info for the
   * given operator.
   */
  OperatorUnbondingDelegations(
    request: QueryOperatorUnbondingDelegationsRequest,
  ): Promise<QueryOperatorUnbondingDelegationsResponse>;
  /**
   * OperatorUnbondingDelegation queries the unbonding delegation info for the
   * given operator and delegator.
   */
  OperatorUnbondingDelegation(
    request: QueryOperatorUnbondingDelegationRequest,
  ): Promise<QueryOperatorUnbondingDelegationResponse>;
  /** ServiceDelegations queries the delegations info for the given service. */
  ServiceDelegations(request: QueryServiceDelegationsRequest): Promise<QueryServiceDelegationsResponse>;
  /**
   * ServiceDelegation queries the delegation info for the given service and
   * delegator.
   */
  ServiceDelegation(request: QueryServiceDelegationRequest): Promise<QueryServiceDelegationResponse>;
  /**
   * ServiceUnbondingDelegations queries the unbonding delegations info for the
   * given service.
   */
  ServiceUnbondingDelegations(
    request: QueryServiceUnbondingDelegationsRequest,
  ): Promise<QueryServiceUnbondingDelegationsResponse>;
  /**
   * ServiceUnbondingDelegation queries the unbonding delegation info for the
   * given service and delegator.
   */
  ServiceUnbondingDelegation(
    request: QueryServiceUnbondingDelegationRequest,
  ): Promise<QueryServiceUnbondingDelegationResponse>;
  /**
   * DelegatorPoolDelegations queries all the pool delegations of a given
   * delegator address.
   */
  DelegatorPoolDelegations(
    request: QueryDelegatorPoolDelegationsRequest,
  ): Promise<QueryDelegatorPoolDelegationsResponse>;
  /**
   * DelegatorPoolUnbondingDelegations queries all the pool unbonding
   * delegations of a given delegator address.
   */
  DelegatorPoolUnbondingDelegations(
    request: QueryDelegatorPoolUnbondingDelegationsRequest,
  ): Promise<QueryDelegatorPoolUnbondingDelegationsResponse>;
  /**
   * DelegatorOperatorDelegations queries all the operator delegations of a
   * given delegator address.
   */
  DelegatorOperatorDelegations(
    request: QueryDelegatorOperatorDelegationsRequest,
  ): Promise<QueryDelegatorOperatorDelegationsResponse>;
  /**
   * DelegatorOperatorUnbondingDelegations queries all the operator unbonding
   * delegations of a given delegator address.
   */
  DelegatorOperatorUnbondingDelegations(
    request: QueryDelegatorOperatorUnbondingDelegationsRequest,
  ): Promise<QueryDelegatorOperatorUnbondingDelegationsResponse>;
  /**
   * DelegatorServiceDelegations queries all the service delegations of a given
   * delegator address.
   */
  DelegatorServiceDelegations(
    request: QueryDelegatorServiceDelegationsRequest,
  ): Promise<QueryDelegatorServiceDelegationsResponse>;
  /**
   * DelegatorServiceUnbondingDelegations queries all the service unbonding
   * delegations of a given delegator address.
   */
  DelegatorServiceUnbondingDelegations(
    request: QueryDelegatorServiceUnbondingDelegationsRequest,
  ): Promise<QueryDelegatorServiceUnbondingDelegationsResponse>;
  /**
   * DelegatorPools queries all pools info for given delegator
   * address.
   */
  DelegatorPools(request: QueryDelegatorPoolsRequest): Promise<QueryDelegatorPoolsResponse>;
  /** DelegatorPool queries the pool info for given delegator and pool id. */
  DelegatorPool(request: QueryDelegatorPoolRequest): Promise<QueryDelegatorPoolResponse>;
  /** DelegatorOperators queries all operators info for given delegator */
  DelegatorOperators(request: QueryDelegatorOperatorsRequest): Promise<QueryDelegatorOperatorsResponse>;
  /**
   * DelegatorOperator queries the operator info for given delegator and
   * operator id.
   */
  DelegatorOperator(request: QueryDelegatorOperatorRequest): Promise<QueryDelegatorOperatorResponse>;
  /** DelegatorServices queries all services info for given delegator */
  DelegatorServices(request: QueryDelegatorServicesRequest): Promise<QueryDelegatorServicesResponse>;
  /**
   * DelegatorService queries the service info for given delegator and service
   * id.
   */
  DelegatorService(request: QueryDelegatorServiceRequest): Promise<QueryDelegatorServiceResponse>;
  /** UserPreferences queries the user preferences. */
  UserPreferences(request: QueryUserPreferencesRequest): Promise<QueryUserPreferencesResponse>;
  /** Params queries the restaking parameters. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
}

export const QueryServiceName = "milkyway.restaking.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.OperatorJoinedServices = this.OperatorJoinedServices.bind(this);
    this.ServiceAllowedOperators = this.ServiceAllowedOperators.bind(this);
    this.ServiceSecuringPools = this.ServiceSecuringPools.bind(this);
    this.ServiceOperators = this.ServiceOperators.bind(this);
    this.PoolDelegations = this.PoolDelegations.bind(this);
    this.PoolDelegation = this.PoolDelegation.bind(this);
    this.PoolUnbondingDelegations = this.PoolUnbondingDelegations.bind(this);
    this.PoolUnbondingDelegation = this.PoolUnbondingDelegation.bind(this);
    this.OperatorDelegations = this.OperatorDelegations.bind(this);
    this.OperatorDelegation = this.OperatorDelegation.bind(this);
    this.OperatorUnbondingDelegations = this.OperatorUnbondingDelegations.bind(this);
    this.OperatorUnbondingDelegation = this.OperatorUnbondingDelegation.bind(this);
    this.ServiceDelegations = this.ServiceDelegations.bind(this);
    this.ServiceDelegation = this.ServiceDelegation.bind(this);
    this.ServiceUnbondingDelegations = this.ServiceUnbondingDelegations.bind(this);
    this.ServiceUnbondingDelegation = this.ServiceUnbondingDelegation.bind(this);
    this.DelegatorPoolDelegations = this.DelegatorPoolDelegations.bind(this);
    this.DelegatorPoolUnbondingDelegations = this.DelegatorPoolUnbondingDelegations.bind(this);
    this.DelegatorOperatorDelegations = this.DelegatorOperatorDelegations.bind(this);
    this.DelegatorOperatorUnbondingDelegations = this.DelegatorOperatorUnbondingDelegations.bind(this);
    this.DelegatorServiceDelegations = this.DelegatorServiceDelegations.bind(this);
    this.DelegatorServiceUnbondingDelegations = this.DelegatorServiceUnbondingDelegations.bind(this);
    this.DelegatorPools = this.DelegatorPools.bind(this);
    this.DelegatorPool = this.DelegatorPool.bind(this);
    this.DelegatorOperators = this.DelegatorOperators.bind(this);
    this.DelegatorOperator = this.DelegatorOperator.bind(this);
    this.DelegatorServices = this.DelegatorServices.bind(this);
    this.DelegatorService = this.DelegatorService.bind(this);
    this.UserPreferences = this.UserPreferences.bind(this);
    this.Params = this.Params.bind(this);
  }
  OperatorJoinedServices(request: QueryOperatorJoinedServicesRequest): Promise<QueryOperatorJoinedServicesResponse> {
    const data = QueryOperatorJoinedServicesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "OperatorJoinedServices", data);
    return promise.then((data) => QueryOperatorJoinedServicesResponse.decode(new BinaryReader(data)));
  }

  ServiceAllowedOperators(request: QueryServiceAllowedOperatorsRequest): Promise<QueryServiceAllowedOperatorsResponse> {
    const data = QueryServiceAllowedOperatorsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ServiceAllowedOperators", data);
    return promise.then((data) => QueryServiceAllowedOperatorsResponse.decode(new BinaryReader(data)));
  }

  ServiceSecuringPools(request: QueryServiceSecuringPoolsRequest): Promise<QueryServiceSecuringPoolsResponse> {
    const data = QueryServiceSecuringPoolsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ServiceSecuringPools", data);
    return promise.then((data) => QueryServiceSecuringPoolsResponse.decode(new BinaryReader(data)));
  }

  ServiceOperators(request: QueryServiceOperatorsRequest): Promise<QueryServiceOperatorsResponse> {
    const data = QueryServiceOperatorsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ServiceOperators", data);
    return promise.then((data) => QueryServiceOperatorsResponse.decode(new BinaryReader(data)));
  }

  PoolDelegations(request: QueryPoolDelegationsRequest): Promise<QueryPoolDelegationsResponse> {
    const data = QueryPoolDelegationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PoolDelegations", data);
    return promise.then((data) => QueryPoolDelegationsResponse.decode(new BinaryReader(data)));
  }

  PoolDelegation(request: QueryPoolDelegationRequest): Promise<QueryPoolDelegationResponse> {
    const data = QueryPoolDelegationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PoolDelegation", data);
    return promise.then((data) => QueryPoolDelegationResponse.decode(new BinaryReader(data)));
  }

  PoolUnbondingDelegations(
    request: QueryPoolUnbondingDelegationsRequest,
  ): Promise<QueryPoolUnbondingDelegationsResponse> {
    const data = QueryPoolUnbondingDelegationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PoolUnbondingDelegations", data);
    return promise.then((data) => QueryPoolUnbondingDelegationsResponse.decode(new BinaryReader(data)));
  }

  PoolUnbondingDelegation(request: QueryPoolUnbondingDelegationRequest): Promise<QueryPoolUnbondingDelegationResponse> {
    const data = QueryPoolUnbondingDelegationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PoolUnbondingDelegation", data);
    return promise.then((data) => QueryPoolUnbondingDelegationResponse.decode(new BinaryReader(data)));
  }

  OperatorDelegations(request: QueryOperatorDelegationsRequest): Promise<QueryOperatorDelegationsResponse> {
    const data = QueryOperatorDelegationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "OperatorDelegations", data);
    return promise.then((data) => QueryOperatorDelegationsResponse.decode(new BinaryReader(data)));
  }

  OperatorDelegation(request: QueryOperatorDelegationRequest): Promise<QueryOperatorDelegationResponse> {
    const data = QueryOperatorDelegationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "OperatorDelegation", data);
    return promise.then((data) => QueryOperatorDelegationResponse.decode(new BinaryReader(data)));
  }

  OperatorUnbondingDelegations(
    request: QueryOperatorUnbondingDelegationsRequest,
  ): Promise<QueryOperatorUnbondingDelegationsResponse> {
    const data = QueryOperatorUnbondingDelegationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "OperatorUnbondingDelegations", data);
    return promise.then((data) => QueryOperatorUnbondingDelegationsResponse.decode(new BinaryReader(data)));
  }

  OperatorUnbondingDelegation(
    request: QueryOperatorUnbondingDelegationRequest,
  ): Promise<QueryOperatorUnbondingDelegationResponse> {
    const data = QueryOperatorUnbondingDelegationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "OperatorUnbondingDelegation", data);
    return promise.then((data) => QueryOperatorUnbondingDelegationResponse.decode(new BinaryReader(data)));
  }

  ServiceDelegations(request: QueryServiceDelegationsRequest): Promise<QueryServiceDelegationsResponse> {
    const data = QueryServiceDelegationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ServiceDelegations", data);
    return promise.then((data) => QueryServiceDelegationsResponse.decode(new BinaryReader(data)));
  }

  ServiceDelegation(request: QueryServiceDelegationRequest): Promise<QueryServiceDelegationResponse> {
    const data = QueryServiceDelegationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ServiceDelegation", data);
    return promise.then((data) => QueryServiceDelegationResponse.decode(new BinaryReader(data)));
  }

  ServiceUnbondingDelegations(
    request: QueryServiceUnbondingDelegationsRequest,
  ): Promise<QueryServiceUnbondingDelegationsResponse> {
    const data = QueryServiceUnbondingDelegationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ServiceUnbondingDelegations", data);
    return promise.then((data) => QueryServiceUnbondingDelegationsResponse.decode(new BinaryReader(data)));
  }

  ServiceUnbondingDelegation(
    request: QueryServiceUnbondingDelegationRequest,
  ): Promise<QueryServiceUnbondingDelegationResponse> {
    const data = QueryServiceUnbondingDelegationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ServiceUnbondingDelegation", data);
    return promise.then((data) => QueryServiceUnbondingDelegationResponse.decode(new BinaryReader(data)));
  }

  DelegatorPoolDelegations(
    request: QueryDelegatorPoolDelegationsRequest,
  ): Promise<QueryDelegatorPoolDelegationsResponse> {
    const data = QueryDelegatorPoolDelegationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DelegatorPoolDelegations", data);
    return promise.then((data) => QueryDelegatorPoolDelegationsResponse.decode(new BinaryReader(data)));
  }

  DelegatorPoolUnbondingDelegations(
    request: QueryDelegatorPoolUnbondingDelegationsRequest,
  ): Promise<QueryDelegatorPoolUnbondingDelegationsResponse> {
    const data = QueryDelegatorPoolUnbondingDelegationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DelegatorPoolUnbondingDelegations", data);
    return promise.then((data) => QueryDelegatorPoolUnbondingDelegationsResponse.decode(new BinaryReader(data)));
  }

  DelegatorOperatorDelegations(
    request: QueryDelegatorOperatorDelegationsRequest,
  ): Promise<QueryDelegatorOperatorDelegationsResponse> {
    const data = QueryDelegatorOperatorDelegationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DelegatorOperatorDelegations", data);
    return promise.then((data) => QueryDelegatorOperatorDelegationsResponse.decode(new BinaryReader(data)));
  }

  DelegatorOperatorUnbondingDelegations(
    request: QueryDelegatorOperatorUnbondingDelegationsRequest,
  ): Promise<QueryDelegatorOperatorUnbondingDelegationsResponse> {
    const data = QueryDelegatorOperatorUnbondingDelegationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DelegatorOperatorUnbondingDelegations", data);
    return promise.then((data) => QueryDelegatorOperatorUnbondingDelegationsResponse.decode(new BinaryReader(data)));
  }

  DelegatorServiceDelegations(
    request: QueryDelegatorServiceDelegationsRequest,
  ): Promise<QueryDelegatorServiceDelegationsResponse> {
    const data = QueryDelegatorServiceDelegationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DelegatorServiceDelegations", data);
    return promise.then((data) => QueryDelegatorServiceDelegationsResponse.decode(new BinaryReader(data)));
  }

  DelegatorServiceUnbondingDelegations(
    request: QueryDelegatorServiceUnbondingDelegationsRequest,
  ): Promise<QueryDelegatorServiceUnbondingDelegationsResponse> {
    const data = QueryDelegatorServiceUnbondingDelegationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DelegatorServiceUnbondingDelegations", data);
    return promise.then((data) => QueryDelegatorServiceUnbondingDelegationsResponse.decode(new BinaryReader(data)));
  }

  DelegatorPools(request: QueryDelegatorPoolsRequest): Promise<QueryDelegatorPoolsResponse> {
    const data = QueryDelegatorPoolsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DelegatorPools", data);
    return promise.then((data) => QueryDelegatorPoolsResponse.decode(new BinaryReader(data)));
  }

  DelegatorPool(request: QueryDelegatorPoolRequest): Promise<QueryDelegatorPoolResponse> {
    const data = QueryDelegatorPoolRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DelegatorPool", data);
    return promise.then((data) => QueryDelegatorPoolResponse.decode(new BinaryReader(data)));
  }

  DelegatorOperators(request: QueryDelegatorOperatorsRequest): Promise<QueryDelegatorOperatorsResponse> {
    const data = QueryDelegatorOperatorsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DelegatorOperators", data);
    return promise.then((data) => QueryDelegatorOperatorsResponse.decode(new BinaryReader(data)));
  }

  DelegatorOperator(request: QueryDelegatorOperatorRequest): Promise<QueryDelegatorOperatorResponse> {
    const data = QueryDelegatorOperatorRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DelegatorOperator", data);
    return promise.then((data) => QueryDelegatorOperatorResponse.decode(new BinaryReader(data)));
  }

  DelegatorServices(request: QueryDelegatorServicesRequest): Promise<QueryDelegatorServicesResponse> {
    const data = QueryDelegatorServicesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DelegatorServices", data);
    return promise.then((data) => QueryDelegatorServicesResponse.decode(new BinaryReader(data)));
  }

  DelegatorService(request: QueryDelegatorServiceRequest): Promise<QueryDelegatorServiceResponse> {
    const data = QueryDelegatorServiceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DelegatorService", data);
    return promise.then((data) => QueryDelegatorServiceResponse.decode(new BinaryReader(data)));
  }

  UserPreferences(request: QueryUserPreferencesRequest): Promise<QueryUserPreferencesResponse> {
    const data = QueryUserPreferencesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UserPreferences", data);
    return promise.then((data) => QueryUserPreferencesResponse.decode(new BinaryReader(data)));
  }

  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
