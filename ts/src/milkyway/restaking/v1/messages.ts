// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: milkyway/restaking/v1/messages.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { UserPreferences } from "./models";
import { Params } from "./params";

export const protobufPackage = "milkyway.restaking.v1";

/**
 * MsgJoinService defines the message structure for the
 * JoinService gRPC service method. It allows the operator admin to
 * start securing a AVS.
 */
export interface MsgJoinService {
  sender: string;
  operatorId: number;
  serviceId: number;
}

/** MsgJoinServiceResponse is the return value of MsgJoinService. */
export interface MsgJoinServiceResponse {
}

/**
 * MsgLeaveService defines the message structure for the
 * LeaveService gRPC service method. It allows the operator admin to
 * stop securing a AVS.
 */
export interface MsgLeaveService {
  sender: string;
  operatorId: number;
  serviceId: number;
}

/** MsgLeaveServiceResponse is the return value of MsgLeaveService. */
export interface MsgLeaveServiceResponse {
}

/**
 * MsgAddOperatorToAllowList defines the message structure for the
 * AddOperatorToAllowList gRPC service method. It allows the service admin
 * to add an operator to the list of allowed operator to secure the service.
 */
export interface MsgAddOperatorToAllowList {
  sender: string;
  serviceId: number;
  operatorId: number;
}

/**
 * MsgAddOperatorToAllowListResponse is the return value of
 * MsgAddOperatorToAllowList.
 */
export interface MsgAddOperatorToAllowListResponse {
}

/**
 * MsgRemoveOperatorFromAllowlist defines the message structure for the
 * RemoveOperatorFromAllowlist gRPC service method. It allows the service admin
 * to remove a previously added operator from the list of allowed operators
 * to secure the service.
 */
export interface MsgRemoveOperatorFromAllowlist {
  sender: string;
  serviceId: number;
  operatorId: number;
}

/**
 * MsgRemoveOperatorFromAllowlistResponse is the return value of
 * MsgRemoveOperatorFromAllowlist.
 */
export interface MsgRemoveOperatorFromAllowlistResponse {
}

/**
 * MsgBorrowPoolSecurity defines the message structure for the
 * BorrowPoolSecurity gRPC service method. It allows the service admin
 * to add a pool to the list of pools from which the service has chosen
 * to borrow security.
 */
export interface MsgBorrowPoolSecurity {
  sender: string;
  serviceId: number;
  poolId: number;
}

/** MsgBorrowPoolSecurityResponse is the return value of MsgBorrowPoolSecurity. */
export interface MsgBorrowPoolSecurityResponse {
}

/**
 * MsgCeasePoolSecurityBorrow defines the message structure for the
 * CeaseBorrowPoolSecurity gRPC service method. It allows the service admin
 * to remove a pool from the list of pools from which the service has chosen
 * to borrow security.
 */
export interface MsgCeasePoolSecurityBorrow {
  sender: string;
  serviceId: number;
  poolId: number;
}

/**
 * MsgCeasePoolSecurityBorrowResponse is the return value of
 * MsgCeasePoolSecurityBorrow.
 */
export interface MsgCeasePoolSecurityBorrowResponse {
}

/**
 * MsgDelegatePool defines the message structure for the DelegatePool gRPC
 * service method. It allows a user to put their assets into a restaking pool
 * that will later be used to provide cryptoeconomic security to services that
 * choose it.
 */
export interface MsgDelegatePool {
  /** Delegator is the address of the user joining the pool */
  delegator: string;
  /** Amount is the amount of coins to be staked */
  amount: Coin | undefined;
}

/** MsgDelegatePoolResponse defines the return value of MsgDelegatePool. */
export interface MsgDelegatePoolResponse {
}

/**
 * MsgDelegateOperator defines the message structure for the DelegateOperator
 * gRPC service method. It allows a user to delegate their assets to an
 * operator.
 */
export interface MsgDelegateOperator {
  /** Delegator is the address of the user delegating to the operator */
  delegator: string;
  /** OperatorID is the ID of the operator to delegate to */
  operatorId: number;
  /** Amount is the amount of coins to be delegated */
  amount: Coin[];
}

/** MsgDelegateOperatorResponse is the return value of MsgDelegateOperator. */
export interface MsgDelegateOperatorResponse {
}

/**
 * MsgDelegateService defines the message structure for the DelegateService gRPC
 * service method. It allows a user to delegate their assets to a service.
 */
export interface MsgDelegateService {
  /** Delegator is the address of the user delegating to the service */
  delegator: string;
  /** ServiceID is the ID of the service to delegate to */
  serviceId: number;
  /** Amount is the amount of coins to be delegated */
  amount: Coin[];
}

/** MsgDelegateServiceResponse is the return value of MsgDelegateService. */
export interface MsgDelegateServiceResponse {
}

/**
 * MsgUpdateParams defines the message structure for the UpdateParams gRPC
 * service method. It allows the authority to update the module parameters.
 */
export interface MsgUpdateParams {
  /**
   * Authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   */
  authority: string;
  /**
   * Params define the parameters to update.
   *
   * NOTE: All parameters must be supplied.
   */
  params: Params | undefined;
}

/** MsgUpdateParamsResponse is the return value of MsgUpdateParams. */
export interface MsgUpdateParamsResponse {
}

/**
 * MsgUndelegatePool the message structure for the UndelegatePool gRPC service
 * method. It allows a user to undelegate their assets from a restaking pool.
 */
export interface MsgUndelegatePool {
  /** Delegator is the address of the user undelegating from the pool. */
  delegator: string;
  /** Amount is the amount of coins to be undelegated. */
  amount: Coin | undefined;
}

/**
 * MsgUndelegateOperator the message structure for the UndelegateOperator gRPC
 * service method. It allows a user to undelegate their assets from a restaking
 * operator.
 */
export interface MsgUndelegateOperator {
  /** Delegator is the address of the user undelegating from the operator. */
  delegator: string;
  /** OperatorID is the ID of the operator to undelegate from. */
  operatorId: number;
  /** Amount is the amount of coins to be undelegated. */
  amount: Coin[];
}

/**
 * MsgUndelegateService the message structure for the UndelegateService gRPC
 * service method. It allows a user to undelegate their assets from a restaking
 * service.
 */
export interface MsgUndelegateService {
  /** Delegator is the address of the user undelegating from the service. */
  delegator: string;
  /** ServiceID is the ID of the service to undelegate from. */
  serviceId: number;
  /** Amount is the amount of coins to be undelegated. */
  amount: Coin[];
}

/** MsgUndelegateResponse defines the response type for the undelegation methods. */
export interface MsgUndelegateResponse {
  /**
   * CompletionTime represents the time at which the undelegation will be
   * complete
   */
  completionTime: Date | undefined;
}

/**
 * MsgSetUserPreferences is the message structure for the SetUserPreferences
 * gRPC service method. It allows a user to set their preferences for the
 * restaking module.
 */
export interface MsgSetUserPreferences {
  /** User is the address of the user setting their preferences */
  user: string;
  /** Preferences is the user's preferences */
  preferences: UserPreferences | undefined;
}

/** MsgSetUserPreferencesResponse is the return value of MsgSetUserPreferences. */
export interface MsgSetUserPreferencesResponse {
}

function createBaseMsgJoinService(): MsgJoinService {
  return { sender: "", operatorId: 0, serviceId: 0 };
}

export const MsgJoinService: MessageFns<MsgJoinService> = {
  encode(message: MsgJoinService, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.operatorId !== 0) {
      writer.uint32(16).uint32(message.operatorId);
    }
    if (message.serviceId !== 0) {
      writer.uint32(24).uint32(message.serviceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgJoinService {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgJoinService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgJoinService {
    return {
      sender: isSet(object.sender) ? gt.String(object.sender) : "",
      operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0,
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
    };
  },

  toJSON(message: MsgJoinService): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgJoinService>): MsgJoinService {
    return MsgJoinService.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgJoinService>): MsgJoinService {
    const message = createBaseMsgJoinService();
    message.sender = object.sender ?? "";
    message.operatorId = object.operatorId ?? 0;
    message.serviceId = object.serviceId ?? 0;
    return message;
  },
};

function createBaseMsgJoinServiceResponse(): MsgJoinServiceResponse {
  return {};
}

export const MsgJoinServiceResponse: MessageFns<MsgJoinServiceResponse> = {
  encode(_: MsgJoinServiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgJoinServiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgJoinServiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgJoinServiceResponse {
    return {};
  },

  toJSON(_: MsgJoinServiceResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgJoinServiceResponse>): MsgJoinServiceResponse {
    return MsgJoinServiceResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgJoinServiceResponse>): MsgJoinServiceResponse {
    const message = createBaseMsgJoinServiceResponse();
    return message;
  },
};

function createBaseMsgLeaveService(): MsgLeaveService {
  return { sender: "", operatorId: 0, serviceId: 0 };
}

export const MsgLeaveService: MessageFns<MsgLeaveService> = {
  encode(message: MsgLeaveService, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.operatorId !== 0) {
      writer.uint32(16).uint32(message.operatorId);
    }
    if (message.serviceId !== 0) {
      writer.uint32(24).uint32(message.serviceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgLeaveService {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLeaveService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgLeaveService {
    return {
      sender: isSet(object.sender) ? gt.String(object.sender) : "",
      operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0,
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
    };
  },

  toJSON(message: MsgLeaveService): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgLeaveService>): MsgLeaveService {
    return MsgLeaveService.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgLeaveService>): MsgLeaveService {
    const message = createBaseMsgLeaveService();
    message.sender = object.sender ?? "";
    message.operatorId = object.operatorId ?? 0;
    message.serviceId = object.serviceId ?? 0;
    return message;
  },
};

function createBaseMsgLeaveServiceResponse(): MsgLeaveServiceResponse {
  return {};
}

export const MsgLeaveServiceResponse: MessageFns<MsgLeaveServiceResponse> = {
  encode(_: MsgLeaveServiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgLeaveServiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLeaveServiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgLeaveServiceResponse {
    return {};
  },

  toJSON(_: MsgLeaveServiceResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgLeaveServiceResponse>): MsgLeaveServiceResponse {
    return MsgLeaveServiceResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgLeaveServiceResponse>): MsgLeaveServiceResponse {
    const message = createBaseMsgLeaveServiceResponse();
    return message;
  },
};

function createBaseMsgAddOperatorToAllowList(): MsgAddOperatorToAllowList {
  return { sender: "", serviceId: 0, operatorId: 0 };
}

export const MsgAddOperatorToAllowList: MessageFns<MsgAddOperatorToAllowList> = {
  encode(message: MsgAddOperatorToAllowList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.serviceId !== 0) {
      writer.uint32(16).uint32(message.serviceId);
    }
    if (message.operatorId !== 0) {
      writer.uint32(24).uint32(message.operatorId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddOperatorToAllowList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddOperatorToAllowList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAddOperatorToAllowList {
    return {
      sender: isSet(object.sender) ? gt.String(object.sender) : "",
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
      operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0,
    };
  },

  toJSON(message: MsgAddOperatorToAllowList): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgAddOperatorToAllowList>): MsgAddOperatorToAllowList {
    return MsgAddOperatorToAllowList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgAddOperatorToAllowList>): MsgAddOperatorToAllowList {
    const message = createBaseMsgAddOperatorToAllowList();
    message.sender = object.sender ?? "";
    message.serviceId = object.serviceId ?? 0;
    message.operatorId = object.operatorId ?? 0;
    return message;
  },
};

function createBaseMsgAddOperatorToAllowListResponse(): MsgAddOperatorToAllowListResponse {
  return {};
}

export const MsgAddOperatorToAllowListResponse: MessageFns<MsgAddOperatorToAllowListResponse> = {
  encode(_: MsgAddOperatorToAllowListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddOperatorToAllowListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddOperatorToAllowListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAddOperatorToAllowListResponse {
    return {};
  },

  toJSON(_: MsgAddOperatorToAllowListResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgAddOperatorToAllowListResponse>): MsgAddOperatorToAllowListResponse {
    return MsgAddOperatorToAllowListResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgAddOperatorToAllowListResponse>): MsgAddOperatorToAllowListResponse {
    const message = createBaseMsgAddOperatorToAllowListResponse();
    return message;
  },
};

function createBaseMsgRemoveOperatorFromAllowlist(): MsgRemoveOperatorFromAllowlist {
  return { sender: "", serviceId: 0, operatorId: 0 };
}

export const MsgRemoveOperatorFromAllowlist: MessageFns<MsgRemoveOperatorFromAllowlist> = {
  encode(message: MsgRemoveOperatorFromAllowlist, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.serviceId !== 0) {
      writer.uint32(16).uint32(message.serviceId);
    }
    if (message.operatorId !== 0) {
      writer.uint32(24).uint32(message.operatorId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRemoveOperatorFromAllowlist {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveOperatorFromAllowlist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRemoveOperatorFromAllowlist {
    return {
      sender: isSet(object.sender) ? gt.String(object.sender) : "",
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
      operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0,
    };
  },

  toJSON(message: MsgRemoveOperatorFromAllowlist): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRemoveOperatorFromAllowlist>): MsgRemoveOperatorFromAllowlist {
    return MsgRemoveOperatorFromAllowlist.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgRemoveOperatorFromAllowlist>): MsgRemoveOperatorFromAllowlist {
    const message = createBaseMsgRemoveOperatorFromAllowlist();
    message.sender = object.sender ?? "";
    message.serviceId = object.serviceId ?? 0;
    message.operatorId = object.operatorId ?? 0;
    return message;
  },
};

function createBaseMsgRemoveOperatorFromAllowlistResponse(): MsgRemoveOperatorFromAllowlistResponse {
  return {};
}

export const MsgRemoveOperatorFromAllowlistResponse: MessageFns<MsgRemoveOperatorFromAllowlistResponse> = {
  encode(_: MsgRemoveOperatorFromAllowlistResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRemoveOperatorFromAllowlistResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveOperatorFromAllowlistResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRemoveOperatorFromAllowlistResponse {
    return {};
  },

  toJSON(_: MsgRemoveOperatorFromAllowlistResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgRemoveOperatorFromAllowlistResponse>): MsgRemoveOperatorFromAllowlistResponse {
    return MsgRemoveOperatorFromAllowlistResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgRemoveOperatorFromAllowlistResponse>): MsgRemoveOperatorFromAllowlistResponse {
    const message = createBaseMsgRemoveOperatorFromAllowlistResponse();
    return message;
  },
};

function createBaseMsgBorrowPoolSecurity(): MsgBorrowPoolSecurity {
  return { sender: "", serviceId: 0, poolId: 0 };
}

export const MsgBorrowPoolSecurity: MessageFns<MsgBorrowPoolSecurity> = {
  encode(message: MsgBorrowPoolSecurity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.serviceId !== 0) {
      writer.uint32(16).uint32(message.serviceId);
    }
    if (message.poolId !== 0) {
      writer.uint32(24).uint32(message.poolId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgBorrowPoolSecurity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBorrowPoolSecurity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.poolId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgBorrowPoolSecurity {
    return {
      sender: isSet(object.sender) ? gt.String(object.sender) : "",
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
      poolId: isSet(object.poolId) ? gt.Number(object.poolId) : 0,
    };
  },

  toJSON(message: MsgBorrowPoolSecurity): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgBorrowPoolSecurity>): MsgBorrowPoolSecurity {
    return MsgBorrowPoolSecurity.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgBorrowPoolSecurity>): MsgBorrowPoolSecurity {
    const message = createBaseMsgBorrowPoolSecurity();
    message.sender = object.sender ?? "";
    message.serviceId = object.serviceId ?? 0;
    message.poolId = object.poolId ?? 0;
    return message;
  },
};

function createBaseMsgBorrowPoolSecurityResponse(): MsgBorrowPoolSecurityResponse {
  return {};
}

export const MsgBorrowPoolSecurityResponse: MessageFns<MsgBorrowPoolSecurityResponse> = {
  encode(_: MsgBorrowPoolSecurityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgBorrowPoolSecurityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBorrowPoolSecurityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgBorrowPoolSecurityResponse {
    return {};
  },

  toJSON(_: MsgBorrowPoolSecurityResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgBorrowPoolSecurityResponse>): MsgBorrowPoolSecurityResponse {
    return MsgBorrowPoolSecurityResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgBorrowPoolSecurityResponse>): MsgBorrowPoolSecurityResponse {
    const message = createBaseMsgBorrowPoolSecurityResponse();
    return message;
  },
};

function createBaseMsgCeasePoolSecurityBorrow(): MsgCeasePoolSecurityBorrow {
  return { sender: "", serviceId: 0, poolId: 0 };
}

export const MsgCeasePoolSecurityBorrow: MessageFns<MsgCeasePoolSecurityBorrow> = {
  encode(message: MsgCeasePoolSecurityBorrow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sender !== "") {
      writer.uint32(10).string(message.sender);
    }
    if (message.serviceId !== 0) {
      writer.uint32(16).uint32(message.serviceId);
    }
    if (message.poolId !== 0) {
      writer.uint32(24).uint32(message.poolId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCeasePoolSecurityBorrow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCeasePoolSecurityBorrow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.poolId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCeasePoolSecurityBorrow {
    return {
      sender: isSet(object.sender) ? gt.String(object.sender) : "",
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
      poolId: isSet(object.poolId) ? gt.Number(object.poolId) : 0,
    };
  },

  toJSON(message: MsgCeasePoolSecurityBorrow): unknown {
    const obj: any = {};
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgCeasePoolSecurityBorrow>): MsgCeasePoolSecurityBorrow {
    return MsgCeasePoolSecurityBorrow.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgCeasePoolSecurityBorrow>): MsgCeasePoolSecurityBorrow {
    const message = createBaseMsgCeasePoolSecurityBorrow();
    message.sender = object.sender ?? "";
    message.serviceId = object.serviceId ?? 0;
    message.poolId = object.poolId ?? 0;
    return message;
  },
};

function createBaseMsgCeasePoolSecurityBorrowResponse(): MsgCeasePoolSecurityBorrowResponse {
  return {};
}

export const MsgCeasePoolSecurityBorrowResponse: MessageFns<MsgCeasePoolSecurityBorrowResponse> = {
  encode(_: MsgCeasePoolSecurityBorrowResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCeasePoolSecurityBorrowResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCeasePoolSecurityBorrowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCeasePoolSecurityBorrowResponse {
    return {};
  },

  toJSON(_: MsgCeasePoolSecurityBorrowResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgCeasePoolSecurityBorrowResponse>): MsgCeasePoolSecurityBorrowResponse {
    return MsgCeasePoolSecurityBorrowResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgCeasePoolSecurityBorrowResponse>): MsgCeasePoolSecurityBorrowResponse {
    const message = createBaseMsgCeasePoolSecurityBorrowResponse();
    return message;
  },
};

function createBaseMsgDelegatePool(): MsgDelegatePool {
  return { delegator: "", amount: undefined };
}

export const MsgDelegatePool: MessageFns<MsgDelegatePool> = {
  encode(message: MsgDelegatePool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegator !== "") {
      writer.uint32(10).string(message.delegator);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDelegatePool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDelegatePool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDelegatePool {
    return {
      delegator: isSet(object.delegator) ? gt.String(object.delegator) : "",
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
    };
  },

  toJSON(message: MsgDelegatePool): unknown {
    const obj: any = {};
    if (message.delegator !== "") {
      obj.delegator = message.delegator;
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgDelegatePool>): MsgDelegatePool {
    return MsgDelegatePool.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgDelegatePool>): MsgDelegatePool {
    const message = createBaseMsgDelegatePool();
    message.delegator = object.delegator ?? "";
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    return message;
  },
};

function createBaseMsgDelegatePoolResponse(): MsgDelegatePoolResponse {
  return {};
}

export const MsgDelegatePoolResponse: MessageFns<MsgDelegatePoolResponse> = {
  encode(_: MsgDelegatePoolResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDelegatePoolResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDelegatePoolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDelegatePoolResponse {
    return {};
  },

  toJSON(_: MsgDelegatePoolResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgDelegatePoolResponse>): MsgDelegatePoolResponse {
    return MsgDelegatePoolResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgDelegatePoolResponse>): MsgDelegatePoolResponse {
    const message = createBaseMsgDelegatePoolResponse();
    return message;
  },
};

function createBaseMsgDelegateOperator(): MsgDelegateOperator {
  return { delegator: "", operatorId: 0, amount: [] };
}

export const MsgDelegateOperator: MessageFns<MsgDelegateOperator> = {
  encode(message: MsgDelegateOperator, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegator !== "") {
      writer.uint32(10).string(message.delegator);
    }
    if (message.operatorId !== 0) {
      writer.uint32(16).uint32(message.operatorId);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDelegateOperator {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDelegateOperator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDelegateOperator {
    return {
      delegator: isSet(object.delegator) ? gt.String(object.delegator) : "",
      operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0,
      amount: gt.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgDelegateOperator): unknown {
    const obj: any = {};
    if (message.delegator !== "") {
      obj.delegator = message.delegator;
    }
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgDelegateOperator>): MsgDelegateOperator {
    return MsgDelegateOperator.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgDelegateOperator>): MsgDelegateOperator {
    const message = createBaseMsgDelegateOperator();
    message.delegator = object.delegator ?? "";
    message.operatorId = object.operatorId ?? 0;
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgDelegateOperatorResponse(): MsgDelegateOperatorResponse {
  return {};
}

export const MsgDelegateOperatorResponse: MessageFns<MsgDelegateOperatorResponse> = {
  encode(_: MsgDelegateOperatorResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDelegateOperatorResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDelegateOperatorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDelegateOperatorResponse {
    return {};
  },

  toJSON(_: MsgDelegateOperatorResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgDelegateOperatorResponse>): MsgDelegateOperatorResponse {
    return MsgDelegateOperatorResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgDelegateOperatorResponse>): MsgDelegateOperatorResponse {
    const message = createBaseMsgDelegateOperatorResponse();
    return message;
  },
};

function createBaseMsgDelegateService(): MsgDelegateService {
  return { delegator: "", serviceId: 0, amount: [] };
}

export const MsgDelegateService: MessageFns<MsgDelegateService> = {
  encode(message: MsgDelegateService, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegator !== "") {
      writer.uint32(10).string(message.delegator);
    }
    if (message.serviceId !== 0) {
      writer.uint32(16).uint32(message.serviceId);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDelegateService {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDelegateService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDelegateService {
    return {
      delegator: isSet(object.delegator) ? gt.String(object.delegator) : "",
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
      amount: gt.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgDelegateService): unknown {
    const obj: any = {};
    if (message.delegator !== "") {
      obj.delegator = message.delegator;
    }
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgDelegateService>): MsgDelegateService {
    return MsgDelegateService.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgDelegateService>): MsgDelegateService {
    const message = createBaseMsgDelegateService();
    message.delegator = object.delegator ?? "";
    message.serviceId = object.serviceId ?? 0;
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgDelegateServiceResponse(): MsgDelegateServiceResponse {
  return {};
}

export const MsgDelegateServiceResponse: MessageFns<MsgDelegateServiceResponse> = {
  encode(_: MsgDelegateServiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDelegateServiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDelegateServiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDelegateServiceResponse {
    return {};
  },

  toJSON(_: MsgDelegateServiceResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgDelegateServiceResponse>): MsgDelegateServiceResponse {
    return MsgDelegateServiceResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgDelegateServiceResponse>): MsgDelegateServiceResponse {
    const message = createBaseMsgDelegateServiceResponse();
    return message;
  },
};

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? gt.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateParams>): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgUpdateParams>): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgUndelegatePool(): MsgUndelegatePool {
  return { delegator: "", amount: undefined };
}

export const MsgUndelegatePool: MessageFns<MsgUndelegatePool> = {
  encode(message: MsgUndelegatePool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegator !== "") {
      writer.uint32(10).string(message.delegator);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUndelegatePool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUndelegatePool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUndelegatePool {
    return {
      delegator: isSet(object.delegator) ? gt.String(object.delegator) : "",
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
    };
  },

  toJSON(message: MsgUndelegatePool): unknown {
    const obj: any = {};
    if (message.delegator !== "") {
      obj.delegator = message.delegator;
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgUndelegatePool>): MsgUndelegatePool {
    return MsgUndelegatePool.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgUndelegatePool>): MsgUndelegatePool {
    const message = createBaseMsgUndelegatePool();
    message.delegator = object.delegator ?? "";
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    return message;
  },
};

function createBaseMsgUndelegateOperator(): MsgUndelegateOperator {
  return { delegator: "", operatorId: 0, amount: [] };
}

export const MsgUndelegateOperator: MessageFns<MsgUndelegateOperator> = {
  encode(message: MsgUndelegateOperator, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegator !== "") {
      writer.uint32(10).string(message.delegator);
    }
    if (message.operatorId !== 0) {
      writer.uint32(16).uint32(message.operatorId);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUndelegateOperator {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUndelegateOperator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.operatorId = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUndelegateOperator {
    return {
      delegator: isSet(object.delegator) ? gt.String(object.delegator) : "",
      operatorId: isSet(object.operatorId) ? gt.Number(object.operatorId) : 0,
      amount: gt.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgUndelegateOperator): unknown {
    const obj: any = {};
    if (message.delegator !== "") {
      obj.delegator = message.delegator;
    }
    if (message.operatorId !== 0) {
      obj.operatorId = Math.round(message.operatorId);
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgUndelegateOperator>): MsgUndelegateOperator {
    return MsgUndelegateOperator.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgUndelegateOperator>): MsgUndelegateOperator {
    const message = createBaseMsgUndelegateOperator();
    message.delegator = object.delegator ?? "";
    message.operatorId = object.operatorId ?? 0;
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgUndelegateService(): MsgUndelegateService {
  return { delegator: "", serviceId: 0, amount: [] };
}

export const MsgUndelegateService: MessageFns<MsgUndelegateService> = {
  encode(message: MsgUndelegateService, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegator !== "") {
      writer.uint32(10).string(message.delegator);
    }
    if (message.serviceId !== 0) {
      writer.uint32(16).uint32(message.serviceId);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUndelegateService {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUndelegateService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.serviceId = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUndelegateService {
    return {
      delegator: isSet(object.delegator) ? gt.String(object.delegator) : "",
      serviceId: isSet(object.serviceId) ? gt.Number(object.serviceId) : 0,
      amount: gt.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgUndelegateService): unknown {
    const obj: any = {};
    if (message.delegator !== "") {
      obj.delegator = message.delegator;
    }
    if (message.serviceId !== 0) {
      obj.serviceId = Math.round(message.serviceId);
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgUndelegateService>): MsgUndelegateService {
    return MsgUndelegateService.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgUndelegateService>): MsgUndelegateService {
    const message = createBaseMsgUndelegateService();
    message.delegator = object.delegator ?? "";
    message.serviceId = object.serviceId ?? 0;
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgUndelegateResponse(): MsgUndelegateResponse {
  return { completionTime: undefined };
}

export const MsgUndelegateResponse: MessageFns<MsgUndelegateResponse> = {
  encode(message: MsgUndelegateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.completionTime !== undefined) {
      Timestamp.encode(toTimestamp(message.completionTime), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUndelegateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUndelegateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.completionTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUndelegateResponse {
    return { completionTime: isSet(object.completionTime) ? fromJsonTimestamp(object.completionTime) : undefined };
  },

  toJSON(message: MsgUndelegateResponse): unknown {
    const obj: any = {};
    if (message.completionTime !== undefined) {
      obj.completionTime = message.completionTime.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<MsgUndelegateResponse>): MsgUndelegateResponse {
    return MsgUndelegateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgUndelegateResponse>): MsgUndelegateResponse {
    const message = createBaseMsgUndelegateResponse();
    message.completionTime = object.completionTime ?? undefined;
    return message;
  },
};

function createBaseMsgSetUserPreferences(): MsgSetUserPreferences {
  return { user: "", preferences: undefined };
}

export const MsgSetUserPreferences: MessageFns<MsgSetUserPreferences> = {
  encode(message: MsgSetUserPreferences, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== "") {
      writer.uint32(10).string(message.user);
    }
    if (message.preferences !== undefined) {
      UserPreferences.encode(message.preferences, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSetUserPreferences {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetUserPreferences();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.preferences = UserPreferences.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSetUserPreferences {
    return {
      user: isSet(object.user) ? gt.String(object.user) : "",
      preferences: isSet(object.preferences) ? UserPreferences.fromJSON(object.preferences) : undefined,
    };
  },

  toJSON(message: MsgSetUserPreferences): unknown {
    const obj: any = {};
    if (message.user !== "") {
      obj.user = message.user;
    }
    if (message.preferences !== undefined) {
      obj.preferences = UserPreferences.toJSON(message.preferences);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgSetUserPreferences>): MsgSetUserPreferences {
    return MsgSetUserPreferences.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgSetUserPreferences>): MsgSetUserPreferences {
    const message = createBaseMsgSetUserPreferences();
    message.user = object.user ?? "";
    message.preferences = (object.preferences !== undefined && object.preferences !== null)
      ? UserPreferences.fromPartial(object.preferences)
      : undefined;
    return message;
  },
};

function createBaseMsgSetUserPreferencesResponse(): MsgSetUserPreferencesResponse {
  return {};
}

export const MsgSetUserPreferencesResponse: MessageFns<MsgSetUserPreferencesResponse> = {
  encode(_: MsgSetUserPreferencesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSetUserPreferencesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetUserPreferencesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSetUserPreferencesResponse {
    return {};
  },

  toJSON(_: MsgSetUserPreferencesResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgSetUserPreferencesResponse>): MsgSetUserPreferencesResponse {
    return MsgSetUserPreferencesResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgSetUserPreferencesResponse>): MsgSetUserPreferencesResponse {
    const message = createBaseMsgSetUserPreferencesResponse();
    return message;
  },
};

/** Msg defines the restaking module's gRPC message service. */
export interface Msg {
  /**
   * JoinService defines the operation that allows the operator admin
   * to start securing an AVS
   */
  JoinService(request: MsgJoinService): Promise<MsgJoinServiceResponse>;
  /**
   * LeaveService defines the operation that allows the operator admin
   * to stop securing an AVS
   */
  LeaveService(request: MsgLeaveService): Promise<MsgLeaveServiceResponse>;
  /**
   * AddOperatorToAllowList defines the operation that allows the service admin
   * to add an operator to the list of allowed operator to secure the service
   */
  AddOperatorToAllowList(request: MsgAddOperatorToAllowList): Promise<MsgAddOperatorToAllowListResponse>;
  /**
   * RemoveOperatorFromAllowlist defines the operation that allows the service
   * admin to remove a previously added operator from the list of allowed
   * operators to secure the service
   */
  RemoveOperatorFromAllowlist(request: MsgRemoveOperatorFromAllowlist): Promise<MsgRemoveOperatorFromAllowlistResponse>;
  /**
   * BorrowPoolSecurity defines the operation that allows the service admin
   * to add a pool to the list of pools from which the service has chosen
   * to borrow security.
   */
  BorrowPoolSecurity(request: MsgBorrowPoolSecurity): Promise<MsgBorrowPoolSecurityResponse>;
  /**
   * CeasePoolSecurityBorrow defines the operation that allows the service admin
   * to remove a pool from the list of pools from which the service has chosen
   * to borrow security.
   */
  CeasePoolSecurityBorrow(request: MsgCeasePoolSecurityBorrow): Promise<MsgCeasePoolSecurityBorrowResponse>;
  /**
   * DelegatePool defines the operation that allows users to delegate any amount
   * of an asset to a pool that can then be used to provide services with
   * cryptoeconomic security.
   */
  DelegatePool(request: MsgDelegatePool): Promise<MsgDelegatePoolResponse>;
  /**
   * DelegateOperator defines the operation that allows users to delegate their
   * assets to a specific operator.
   */
  DelegateOperator(request: MsgDelegateOperator): Promise<MsgDelegateOperatorResponse>;
  /**
   * DelegateService defines the operation that allows users to delegate their
   * assets to a specific service.
   */
  DelegateService(request: MsgDelegateService): Promise<MsgDelegateServiceResponse>;
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters.
   * The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  /**
   * UndelegatePool defines the operation that allows users to undelegate their
   * assets from a pool.
   */
  UndelegatePool(request: MsgUndelegatePool): Promise<MsgUndelegateResponse>;
  /**
   * UndelegateOperator defines the operation that allows users to undelegate
   * their assets from a specific operator.
   */
  UndelegateOperator(request: MsgUndelegateOperator): Promise<MsgUndelegateResponse>;
  /**
   * UndelegateService defines the operation that allows users to undelegate
   * their assets from a specific service.
   */
  UndelegateService(request: MsgUndelegateService): Promise<MsgUndelegateResponse>;
  /**
   * SetUserPreferences defines the operation that allows users to set their
   * preferences for the restaking module.
   */
  SetUserPreferences(request: MsgSetUserPreferences): Promise<MsgSetUserPreferencesResponse>;
}

export const MsgServiceName = "milkyway.restaking.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.JoinService = this.JoinService.bind(this);
    this.LeaveService = this.LeaveService.bind(this);
    this.AddOperatorToAllowList = this.AddOperatorToAllowList.bind(this);
    this.RemoveOperatorFromAllowlist = this.RemoveOperatorFromAllowlist.bind(this);
    this.BorrowPoolSecurity = this.BorrowPoolSecurity.bind(this);
    this.CeasePoolSecurityBorrow = this.CeasePoolSecurityBorrow.bind(this);
    this.DelegatePool = this.DelegatePool.bind(this);
    this.DelegateOperator = this.DelegateOperator.bind(this);
    this.DelegateService = this.DelegateService.bind(this);
    this.UpdateParams = this.UpdateParams.bind(this);
    this.UndelegatePool = this.UndelegatePool.bind(this);
    this.UndelegateOperator = this.UndelegateOperator.bind(this);
    this.UndelegateService = this.UndelegateService.bind(this);
    this.SetUserPreferences = this.SetUserPreferences.bind(this);
  }
  JoinService(request: MsgJoinService): Promise<MsgJoinServiceResponse> {
    const data = MsgJoinService.encode(request).finish();
    const promise = this.rpc.request(this.service, "JoinService", data);
    return promise.then((data) => MsgJoinServiceResponse.decode(new BinaryReader(data)));
  }

  LeaveService(request: MsgLeaveService): Promise<MsgLeaveServiceResponse> {
    const data = MsgLeaveService.encode(request).finish();
    const promise = this.rpc.request(this.service, "LeaveService", data);
    return promise.then((data) => MsgLeaveServiceResponse.decode(new BinaryReader(data)));
  }

  AddOperatorToAllowList(request: MsgAddOperatorToAllowList): Promise<MsgAddOperatorToAllowListResponse> {
    const data = MsgAddOperatorToAllowList.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddOperatorToAllowList", data);
    return promise.then((data) => MsgAddOperatorToAllowListResponse.decode(new BinaryReader(data)));
  }

  RemoveOperatorFromAllowlist(
    request: MsgRemoveOperatorFromAllowlist,
  ): Promise<MsgRemoveOperatorFromAllowlistResponse> {
    const data = MsgRemoveOperatorFromAllowlist.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveOperatorFromAllowlist", data);
    return promise.then((data) => MsgRemoveOperatorFromAllowlistResponse.decode(new BinaryReader(data)));
  }

  BorrowPoolSecurity(request: MsgBorrowPoolSecurity): Promise<MsgBorrowPoolSecurityResponse> {
    const data = MsgBorrowPoolSecurity.encode(request).finish();
    const promise = this.rpc.request(this.service, "BorrowPoolSecurity", data);
    return promise.then((data) => MsgBorrowPoolSecurityResponse.decode(new BinaryReader(data)));
  }

  CeasePoolSecurityBorrow(request: MsgCeasePoolSecurityBorrow): Promise<MsgCeasePoolSecurityBorrowResponse> {
    const data = MsgCeasePoolSecurityBorrow.encode(request).finish();
    const promise = this.rpc.request(this.service, "CeasePoolSecurityBorrow", data);
    return promise.then((data) => MsgCeasePoolSecurityBorrowResponse.decode(new BinaryReader(data)));
  }

  DelegatePool(request: MsgDelegatePool): Promise<MsgDelegatePoolResponse> {
    const data = MsgDelegatePool.encode(request).finish();
    const promise = this.rpc.request(this.service, "DelegatePool", data);
    return promise.then((data) => MsgDelegatePoolResponse.decode(new BinaryReader(data)));
  }

  DelegateOperator(request: MsgDelegateOperator): Promise<MsgDelegateOperatorResponse> {
    const data = MsgDelegateOperator.encode(request).finish();
    const promise = this.rpc.request(this.service, "DelegateOperator", data);
    return promise.then((data) => MsgDelegateOperatorResponse.decode(new BinaryReader(data)));
  }

  DelegateService(request: MsgDelegateService): Promise<MsgDelegateServiceResponse> {
    const data = MsgDelegateService.encode(request).finish();
    const promise = this.rpc.request(this.service, "DelegateService", data);
    return promise.then((data) => MsgDelegateServiceResponse.decode(new BinaryReader(data)));
  }

  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  UndelegatePool(request: MsgUndelegatePool): Promise<MsgUndelegateResponse> {
    const data = MsgUndelegatePool.encode(request).finish();
    const promise = this.rpc.request(this.service, "UndelegatePool", data);
    return promise.then((data) => MsgUndelegateResponse.decode(new BinaryReader(data)));
  }

  UndelegateOperator(request: MsgUndelegateOperator): Promise<MsgUndelegateResponse> {
    const data = MsgUndelegateOperator.encode(request).finish();
    const promise = this.rpc.request(this.service, "UndelegateOperator", data);
    return promise.then((data) => MsgUndelegateResponse.decode(new BinaryReader(data)));
  }

  UndelegateService(request: MsgUndelegateService): Promise<MsgUndelegateResponse> {
    const data = MsgUndelegateService.encode(request).finish();
    const promise = this.rpc.request(this.service, "UndelegateService", data);
    return promise.then((data) => MsgUndelegateResponse.decode(new BinaryReader(data)));
  }

  SetUserPreferences(request: MsgSetUserPreferences): Promise<MsgSetUserPreferencesResponse> {
    const data = MsgSetUserPreferences.encode(request).finish();
    const promise = this.rpc.request(this.service, "SetUserPreferences", data);
    return promise.then((data) => MsgSetUserPreferencesResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new gt.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof gt.Date) {
    return o;
  } else if (typeof o === "string") {
    return new gt.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
