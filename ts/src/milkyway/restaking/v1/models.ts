// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: milkyway/restaking/v1/models.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin, DecCoin } from "../../../cosmos/base/v1beta1/coin";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "milkyway.restaking.v1";

/** DelegationType defines the type of delegation. */
export enum DelegationType {
  DELEGATION_TYPE_UNSPECIFIED = 0,
  DELEGATION_TYPE_POOL = 1,
  DELEGATION_TYPE_OPERATOR = 2,
  DELEGATION_TYPE_SERVICE = 3,
  UNRECOGNIZED = -1,
}

export function delegationTypeFromJSON(object: any): DelegationType {
  switch (object) {
    case 0:
    case "DELEGATION_TYPE_UNSPECIFIED":
      return DelegationType.DELEGATION_TYPE_UNSPECIFIED;
    case 1:
    case "DELEGATION_TYPE_POOL":
      return DelegationType.DELEGATION_TYPE_POOL;
    case 2:
    case "DELEGATION_TYPE_OPERATOR":
      return DelegationType.DELEGATION_TYPE_OPERATOR;
    case 3:
    case "DELEGATION_TYPE_SERVICE":
      return DelegationType.DELEGATION_TYPE_SERVICE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DelegationType.UNRECOGNIZED;
  }
}

export function delegationTypeToJSON(object: DelegationType): string {
  switch (object) {
    case DelegationType.DELEGATION_TYPE_UNSPECIFIED:
      return "DELEGATION_TYPE_UNSPECIFIED";
    case DelegationType.DELEGATION_TYPE_POOL:
      return "DELEGATION_TYPE_POOL";
    case DelegationType.DELEGATION_TYPE_OPERATOR:
      return "DELEGATION_TYPE_OPERATOR";
    case DelegationType.DELEGATION_TYPE_SERVICE:
      return "DELEGATION_TYPE_SERVICE";
    case DelegationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Delegation represents the bond with tokens held by an account with a
 * given target.
 */
export interface Delegation {
  /** Type is the type of delegation. */
  type: DelegationType;
  /** UserAddress is the encoded address of the user. */
  userAddress: string;
  /**
   * TargetID is the id of the target to which the delegation is associated
   * (pool, operator, service).
   */
  targetId: number;
  /** Shares define the delegation shares received. */
  shares: DecCoin[];
}

/**
 * DelegationResponse is equivalent to Delegation except that it
 * contains a balance in addition to shares which is more suitable for client
 * responses.
 */
export interface DelegationResponse {
  delegation: Delegation | undefined;
  balance: Coin[];
}

/**
 * UnbondingDelegation stores all of a single delegator's unbonding bonds
 * for a single target in an time-ordered list.
 */
export interface UnbondingDelegation {
  /** Type is the type of the unbonding delegation. */
  type: DelegationType;
  /** DelegatorAddress is the encoded address of the delegator. */
  delegatorAddress: string;
  /**
   * TargetID is the ID of the target from which the tokens will be undelegated
   * (pool, service, operator)
   */
  targetId: number;
  /** Entries are the unbonding delegation entries. */
  entries: UnbondingDelegationEntry[];
}

/** UnbondingDelegationEntry defines an unbonding object with relevant metadata. */
export interface UnbondingDelegationEntry {
  /** CreationHeight is the height which the unbonding took place. */
  creationHeight: number;
  /** CompletionTime is the unix time for unbonding completion. */
  completionTime:
    | Date
    | undefined;
  /**
   * InitialBalance defines the tokens initially scheduled to receive at
   * completion.
   */
  initialBalance: Coin[];
  /** Balance defines the tokens to receive at completion. */
  balance: Coin[];
  /** Incrementing id that uniquely identifies this entry */
  unbondingId: number;
}

/**
 * DTData is a struct that contains the basic information about an unbonding
 * delegation. It is intended to be used as a marshalable pointer. For example,
 * a DTData can be used to construct the key to getting an UnbondingDelegation
 * from state.
 */
export interface DTData {
  unbondingDelegationType: DelegationType;
  delegatorAddress: string;
  targetId: number;
}

/** DTDataList defines an array of DTData objects. */
export interface DTDataList {
  data: DTData[];
}

/**
 * UserPreferences is a struct that contains a user's preferences for
 * restaking.
 */
export interface UserPreferences {
  /**
   * TrustNonAccreditedServices tells whether the user trusts all non-accredited
   * services present on the platform.
   */
  trustNonAccreditedServices: boolean;
  /**
   * TrustAccreditedServices tells whether the user trusts all accredited
   * services present on the platform.
   */
  trustAccreditedServices: boolean;
  /**
   * TrustedServicesIDs is a list of service IDs that the user trusts (both
   * accredited and non-accredited).
   */
  trustedServicesIds: number[];
}

function createBaseDelegation(): Delegation {
  return { type: 0, userAddress: "", targetId: 0, shares: [] };
}

export const Delegation: MessageFns<Delegation> = {
  encode(message: Delegation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.userAddress !== "") {
      writer.uint32(18).string(message.userAddress);
    }
    if (message.targetId !== 0) {
      writer.uint32(24).uint32(message.targetId);
    }
    for (const v of message.shares) {
      DecCoin.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Delegation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDelegation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.targetId = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.shares.push(DecCoin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Delegation {
    return {
      type: isSet(object.type) ? delegationTypeFromJSON(object.type) : 0,
      userAddress: isSet(object.userAddress) ? gt.String(object.userAddress) : "",
      targetId: isSet(object.targetId) ? gt.Number(object.targetId) : 0,
      shares: gt.Array.isArray(object?.shares) ? object.shares.map((e: any) => DecCoin.fromJSON(e)) : [],
    };
  },

  toJSON(message: Delegation): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = delegationTypeToJSON(message.type);
    }
    if (message.userAddress !== "") {
      obj.userAddress = message.userAddress;
    }
    if (message.targetId !== 0) {
      obj.targetId = Math.round(message.targetId);
    }
    if (message.shares?.length) {
      obj.shares = message.shares.map((e) => DecCoin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Delegation>): Delegation {
    return Delegation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Delegation>): Delegation {
    const message = createBaseDelegation();
    message.type = object.type ?? 0;
    message.userAddress = object.userAddress ?? "";
    message.targetId = object.targetId ?? 0;
    message.shares = object.shares?.map((e) => DecCoin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDelegationResponse(): DelegationResponse {
  return { delegation: undefined, balance: [] };
}

export const DelegationResponse: MessageFns<DelegationResponse> = {
  encode(message: DelegationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delegation !== undefined) {
      Delegation.encode(message.delegation, writer.uint32(10).fork()).join();
    }
    for (const v of message.balance) {
      Coin.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DelegationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDelegationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delegation = Delegation.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.balance.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DelegationResponse {
    return {
      delegation: isSet(object.delegation) ? Delegation.fromJSON(object.delegation) : undefined,
      balance: gt.Array.isArray(object?.balance) ? object.balance.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: DelegationResponse): unknown {
    const obj: any = {};
    if (message.delegation !== undefined) {
      obj.delegation = Delegation.toJSON(message.delegation);
    }
    if (message.balance?.length) {
      obj.balance = message.balance.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DelegationResponse>): DelegationResponse {
    return DelegationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DelegationResponse>): DelegationResponse {
    const message = createBaseDelegationResponse();
    message.delegation = (object.delegation !== undefined && object.delegation !== null)
      ? Delegation.fromPartial(object.delegation)
      : undefined;
    message.balance = object.balance?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUnbondingDelegation(): UnbondingDelegation {
  return { type: 0, delegatorAddress: "", targetId: 0, entries: [] };
}

export const UnbondingDelegation: MessageFns<UnbondingDelegation> = {
  encode(message: UnbondingDelegation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.delegatorAddress !== "") {
      writer.uint32(18).string(message.delegatorAddress);
    }
    if (message.targetId !== 0) {
      writer.uint32(24).uint32(message.targetId);
    }
    for (const v of message.entries) {
      UnbondingDelegationEntry.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnbondingDelegation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnbondingDelegation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.targetId = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.entries.push(UnbondingDelegationEntry.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnbondingDelegation {
    return {
      type: isSet(object.type) ? delegationTypeFromJSON(object.type) : 0,
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
      targetId: isSet(object.targetId) ? gt.Number(object.targetId) : 0,
      entries: gt.Array.isArray(object?.entries)
        ? object.entries.map((e: any) => UnbondingDelegationEntry.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UnbondingDelegation): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = delegationTypeToJSON(message.type);
    }
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.targetId !== 0) {
      obj.targetId = Math.round(message.targetId);
    }
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => UnbondingDelegationEntry.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UnbondingDelegation>): UnbondingDelegation {
    return UnbondingDelegation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnbondingDelegation>): UnbondingDelegation {
    const message = createBaseUnbondingDelegation();
    message.type = object.type ?? 0;
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.targetId = object.targetId ?? 0;
    message.entries = object.entries?.map((e) => UnbondingDelegationEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUnbondingDelegationEntry(): UnbondingDelegationEntry {
  return { creationHeight: 0, completionTime: undefined, initialBalance: [], balance: [], unbondingId: 0 };
}

export const UnbondingDelegationEntry: MessageFns<UnbondingDelegationEntry> = {
  encode(message: UnbondingDelegationEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creationHeight !== 0) {
      writer.uint32(8).int64(message.creationHeight);
    }
    if (message.completionTime !== undefined) {
      Timestamp.encode(toTimestamp(message.completionTime), writer.uint32(18).fork()).join();
    }
    for (const v of message.initialBalance) {
      Coin.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.balance) {
      Coin.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.unbondingId !== 0) {
      writer.uint32(40).uint64(message.unbondingId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnbondingDelegationEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnbondingDelegationEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.creationHeight = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.completionTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.initialBalance.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.balance.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.unbondingId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnbondingDelegationEntry {
    return {
      creationHeight: isSet(object.creationHeight) ? gt.Number(object.creationHeight) : 0,
      completionTime: isSet(object.completionTime) ? fromJsonTimestamp(object.completionTime) : undefined,
      initialBalance: gt.Array.isArray(object?.initialBalance)
        ? object.initialBalance.map((e: any) => Coin.fromJSON(e))
        : [],
      balance: gt.Array.isArray(object?.balance) ? object.balance.map((e: any) => Coin.fromJSON(e)) : [],
      unbondingId: isSet(object.unbondingId) ? gt.Number(object.unbondingId) : 0,
    };
  },

  toJSON(message: UnbondingDelegationEntry): unknown {
    const obj: any = {};
    if (message.creationHeight !== 0) {
      obj.creationHeight = Math.round(message.creationHeight);
    }
    if (message.completionTime !== undefined) {
      obj.completionTime = message.completionTime.toISOString();
    }
    if (message.initialBalance?.length) {
      obj.initialBalance = message.initialBalance.map((e) => Coin.toJSON(e));
    }
    if (message.balance?.length) {
      obj.balance = message.balance.map((e) => Coin.toJSON(e));
    }
    if (message.unbondingId !== 0) {
      obj.unbondingId = Math.round(message.unbondingId);
    }
    return obj;
  },

  create(base?: DeepPartial<UnbondingDelegationEntry>): UnbondingDelegationEntry {
    return UnbondingDelegationEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnbondingDelegationEntry>): UnbondingDelegationEntry {
    const message = createBaseUnbondingDelegationEntry();
    message.creationHeight = object.creationHeight ?? 0;
    message.completionTime = object.completionTime ?? undefined;
    message.initialBalance = object.initialBalance?.map((e) => Coin.fromPartial(e)) || [];
    message.balance = object.balance?.map((e) => Coin.fromPartial(e)) || [];
    message.unbondingId = object.unbondingId ?? 0;
    return message;
  },
};

function createBaseDTData(): DTData {
  return { unbondingDelegationType: 0, delegatorAddress: "", targetId: 0 };
}

export const DTData: MessageFns<DTData> = {
  encode(message: DTData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.unbondingDelegationType !== 0) {
      writer.uint32(8).int32(message.unbondingDelegationType);
    }
    if (message.delegatorAddress !== "") {
      writer.uint32(18).string(message.delegatorAddress);
    }
    if (message.targetId !== 0) {
      writer.uint32(24).uint32(message.targetId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DTData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDTData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.unbondingDelegationType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.targetId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DTData {
    return {
      unbondingDelegationType: isSet(object.unbondingDelegationType)
        ? delegationTypeFromJSON(object.unbondingDelegationType)
        : 0,
      delegatorAddress: isSet(object.delegatorAddress) ? gt.String(object.delegatorAddress) : "",
      targetId: isSet(object.targetId) ? gt.Number(object.targetId) : 0,
    };
  },

  toJSON(message: DTData): unknown {
    const obj: any = {};
    if (message.unbondingDelegationType !== 0) {
      obj.unbondingDelegationType = delegationTypeToJSON(message.unbondingDelegationType);
    }
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.targetId !== 0) {
      obj.targetId = Math.round(message.targetId);
    }
    return obj;
  },

  create(base?: DeepPartial<DTData>): DTData {
    return DTData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DTData>): DTData {
    const message = createBaseDTData();
    message.unbondingDelegationType = object.unbondingDelegationType ?? 0;
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.targetId = object.targetId ?? 0;
    return message;
  },
};

function createBaseDTDataList(): DTDataList {
  return { data: [] };
}

export const DTDataList: MessageFns<DTDataList> = {
  encode(message: DTDataList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.data) {
      DTData.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DTDataList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDTDataList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data.push(DTData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DTDataList {
    return { data: gt.Array.isArray(object?.data) ? object.data.map((e: any) => DTData.fromJSON(e)) : [] };
  },

  toJSON(message: DTDataList): unknown {
    const obj: any = {};
    if (message.data?.length) {
      obj.data = message.data.map((e) => DTData.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DTDataList>): DTDataList {
    return DTDataList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DTDataList>): DTDataList {
    const message = createBaseDTDataList();
    message.data = object.data?.map((e) => DTData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUserPreferences(): UserPreferences {
  return { trustNonAccreditedServices: false, trustAccreditedServices: false, trustedServicesIds: [] };
}

export const UserPreferences: MessageFns<UserPreferences> = {
  encode(message: UserPreferences, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trustNonAccreditedServices !== false) {
      writer.uint32(8).bool(message.trustNonAccreditedServices);
    }
    if (message.trustAccreditedServices !== false) {
      writer.uint32(16).bool(message.trustAccreditedServices);
    }
    writer.uint32(26).fork();
    for (const v of message.trustedServicesIds) {
      writer.uint32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserPreferences {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserPreferences();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.trustNonAccreditedServices = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.trustAccreditedServices = reader.bool();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.trustedServicesIds.push(reader.uint32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.trustedServicesIds.push(reader.uint32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserPreferences {
    return {
      trustNonAccreditedServices: isSet(object.trustNonAccreditedServices)
        ? gt.Boolean(object.trustNonAccreditedServices)
        : false,
      trustAccreditedServices: isSet(object.trustAccreditedServices)
        ? gt.Boolean(object.trustAccreditedServices)
        : false,
      trustedServicesIds: gt.Array.isArray(object?.trustedServicesIds)
        ? object.trustedServicesIds.map((e: any) => gt.Number(e))
        : [],
    };
  },

  toJSON(message: UserPreferences): unknown {
    const obj: any = {};
    if (message.trustNonAccreditedServices !== false) {
      obj.trustNonAccreditedServices = message.trustNonAccreditedServices;
    }
    if (message.trustAccreditedServices !== false) {
      obj.trustAccreditedServices = message.trustAccreditedServices;
    }
    if (message.trustedServicesIds?.length) {
      obj.trustedServicesIds = message.trustedServicesIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UserPreferences>): UserPreferences {
    return UserPreferences.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserPreferences>): UserPreferences {
    const message = createBaseUserPreferences();
    message.trustNonAccreditedServices = object.trustNonAccreditedServices ?? false;
    message.trustAccreditedServices = object.trustAccreditedServices ?? false;
    message.trustedServicesIds = object.trustedServicesIds?.map((e) => e) || [];
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new gt.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof gt.Date) {
    return o;
  } else if (typeof o === "string") {
    return new gt.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = gt.Number(int64.toString());
  if (num > gt.Number.MAX_SAFE_INTEGER) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < gt.Number.MIN_SAFE_INTEGER) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
