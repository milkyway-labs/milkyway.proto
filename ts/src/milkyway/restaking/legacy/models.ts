// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: milkyway/restaking/legacy/models.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "milkyway.restaking.legacy";

/**
 * LegacyOperatorParams represent previous format that we where using to store
 * a operator params.
 */
export interface LegacyOperatorParams {
  /**
   * CommissionRate defines the commission rate charged to delegators, as a
   * fraction.
   */
  commissionRate: string;
  /**
   * JoinedServicesIDs defines the list of service IDs that the operator has
   * joined.
   */
  joinedServicesIds: number[];
}

/**
 * LegacyServiceParams represent the previous format that we where using to
 * store the params that have been set for an individual service.
 */
export interface LegacyServiceParams {
  /**
   * SlashFraction defines the fraction of the delegation that will be slashed
   * in case of a misbehavior.
   */
  slashFraction: string;
  /**
   * WhitelistedPoolsIDs defines the list of pool IDs that are providing
   * cryptoeconomic security to the service.
   */
  whitelistedPoolsIds: number[];
  /**
   * WhitelistedOperatorsIDs defines the list of operator IDs that are allowed
   * to validate this service.
   */
  whitelistedOperatorsIds: number[];
}

function createBaseLegacyOperatorParams(): LegacyOperatorParams {
  return { commissionRate: "", joinedServicesIds: [] };
}

export const LegacyOperatorParams: MessageFns<LegacyOperatorParams> = {
  encode(message: LegacyOperatorParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commissionRate !== "") {
      writer.uint32(10).string(message.commissionRate);
    }
    writer.uint32(18).fork();
    for (const v of message.joinedServicesIds) {
      writer.uint32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LegacyOperatorParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLegacyOperatorParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.commissionRate = reader.string();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.joinedServicesIds.push(reader.uint32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.joinedServicesIds.push(reader.uint32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LegacyOperatorParams {
    return {
      commissionRate: isSet(object.commissionRate) ? gt.String(object.commissionRate) : "",
      joinedServicesIds: gt.Array.isArray(object?.joinedServicesIds)
        ? object.joinedServicesIds.map((e: any) => gt.Number(e))
        : [],
    };
  },

  toJSON(message: LegacyOperatorParams): unknown {
    const obj: any = {};
    if (message.commissionRate !== "") {
      obj.commissionRate = message.commissionRate;
    }
    if (message.joinedServicesIds?.length) {
      obj.joinedServicesIds = message.joinedServicesIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<LegacyOperatorParams>): LegacyOperatorParams {
    return LegacyOperatorParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LegacyOperatorParams>): LegacyOperatorParams {
    const message = createBaseLegacyOperatorParams();
    message.commissionRate = object.commissionRate ?? "";
    message.joinedServicesIds = object.joinedServicesIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseLegacyServiceParams(): LegacyServiceParams {
  return { slashFraction: "", whitelistedPoolsIds: [], whitelistedOperatorsIds: [] };
}

export const LegacyServiceParams: MessageFns<LegacyServiceParams> = {
  encode(message: LegacyServiceParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.slashFraction !== "") {
      writer.uint32(10).string(message.slashFraction);
    }
    writer.uint32(18).fork();
    for (const v of message.whitelistedPoolsIds) {
      writer.uint32(v);
    }
    writer.join();
    writer.uint32(26).fork();
    for (const v of message.whitelistedOperatorsIds) {
      writer.uint32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LegacyServiceParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLegacyServiceParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.slashFraction = reader.string();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.whitelistedPoolsIds.push(reader.uint32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.whitelistedPoolsIds.push(reader.uint32());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag === 24) {
            message.whitelistedOperatorsIds.push(reader.uint32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.whitelistedOperatorsIds.push(reader.uint32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LegacyServiceParams {
    return {
      slashFraction: isSet(object.slashFraction) ? gt.String(object.slashFraction) : "",
      whitelistedPoolsIds: gt.Array.isArray(object?.whitelistedPoolsIds)
        ? object.whitelistedPoolsIds.map((e: any) => gt.Number(e))
        : [],
      whitelistedOperatorsIds: gt.Array.isArray(object?.whitelistedOperatorsIds)
        ? object.whitelistedOperatorsIds.map((e: any) => gt.Number(e))
        : [],
    };
  },

  toJSON(message: LegacyServiceParams): unknown {
    const obj: any = {};
    if (message.slashFraction !== "") {
      obj.slashFraction = message.slashFraction;
    }
    if (message.whitelistedPoolsIds?.length) {
      obj.whitelistedPoolsIds = message.whitelistedPoolsIds.map((e) => Math.round(e));
    }
    if (message.whitelistedOperatorsIds?.length) {
      obj.whitelistedOperatorsIds = message.whitelistedOperatorsIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<LegacyServiceParams>): LegacyServiceParams {
    return LegacyServiceParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LegacyServiceParams>): LegacyServiceParams {
    const message = createBaseLegacyServiceParams();
    message.slashFraction = object.slashFraction ?? "";
    message.whitelistedPoolsIds = object.whitelistedPoolsIds?.map((e) => e) || [];
    message.whitelistedOperatorsIds = object.whitelistedOperatorsIds?.map((e) => e) || [];
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
