// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: stride/interchainquery/v1/query.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Query } from "./genesis";

export const protobufPackage = "stride.interchainquery.v1";

export interface QueryPendingQueriesRequest {
}

export interface QueryPendingQueriesResponse {
  pendingQueries: Query[];
}

function createBaseQueryPendingQueriesRequest(): QueryPendingQueriesRequest {
  return {};
}

export const QueryPendingQueriesRequest = {
  encode(_: QueryPendingQueriesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryPendingQueriesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPendingQueriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryPendingQueriesRequest {
    return {};
  },

  toJSON(_: QueryPendingQueriesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryPendingQueriesRequest>): QueryPendingQueriesRequest {
    return QueryPendingQueriesRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryPendingQueriesRequest>): QueryPendingQueriesRequest {
    const message = createBaseQueryPendingQueriesRequest();
    return message;
  },
};

function createBaseQueryPendingQueriesResponse(): QueryPendingQueriesResponse {
  return { pendingQueries: [] };
}

export const QueryPendingQueriesResponse = {
  encode(message: QueryPendingQueriesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.pendingQueries) {
      Query.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryPendingQueriesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPendingQueriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pendingQueries.push(Query.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPendingQueriesResponse {
    return {
      pendingQueries: gt.Array.isArray(object?.pendingQueries)
        ? object.pendingQueries.map((e: any) => Query.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryPendingQueriesResponse): unknown {
    const obj: any = {};
    if (message.pendingQueries?.length) {
      obj.pendingQueries = message.pendingQueries.map((e) => Query.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPendingQueriesResponse>): QueryPendingQueriesResponse {
    return QueryPendingQueriesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryPendingQueriesResponse>): QueryPendingQueriesResponse {
    const message = createBaseQueryPendingQueriesResponse();
    message.pendingQueries = object.pendingQueries?.map((e) => Query.fromPartial(e)) || [];
    return message;
  },
};

export interface QueryService {
  PendingQueries(request: QueryPendingQueriesRequest): Promise<QueryPendingQueriesResponse>;
}

export const QueryServiceServiceName = "stride.interchainquery.v1.QueryService";
export class QueryServiceClientImpl implements QueryService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceServiceName;
    this.rpc = rpc;
    this.PendingQueries = this.PendingQueries.bind(this);
  }
  PendingQueries(request: QueryPendingQueriesRequest): Promise<QueryPendingQueriesResponse> {
    const data = QueryPendingQueriesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PendingQueries", data);
    return promise.then((data) => QueryPendingQueriesResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;
