// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: stride/interchainquery/v1/genesis.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Duration } from "../../../google/protobuf/duration";
import Long = require("long");

export const protobufPackage = "stride.interchainquery.v1";

export enum TimeoutPolicy {
  REJECT_QUERY_RESPONSE = 0,
  RETRY_QUERY_REQUEST = 1,
  EXECUTE_QUERY_CALLBACK = 2,
  UNRECOGNIZED = -1,
}

export function timeoutPolicyFromJSON(object: any): TimeoutPolicy {
  switch (object) {
    case 0:
    case "REJECT_QUERY_RESPONSE":
      return TimeoutPolicy.REJECT_QUERY_RESPONSE;
    case 1:
    case "RETRY_QUERY_REQUEST":
      return TimeoutPolicy.RETRY_QUERY_REQUEST;
    case 2:
    case "EXECUTE_QUERY_CALLBACK":
      return TimeoutPolicy.EXECUTE_QUERY_CALLBACK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TimeoutPolicy.UNRECOGNIZED;
  }
}

export function timeoutPolicyToJSON(object: TimeoutPolicy): string {
  switch (object) {
    case TimeoutPolicy.REJECT_QUERY_RESPONSE:
      return "REJECT_QUERY_RESPONSE";
    case TimeoutPolicy.RETRY_QUERY_REQUEST:
      return "RETRY_QUERY_REQUEST";
    case TimeoutPolicy.EXECUTE_QUERY_CALLBACK:
      return "EXECUTE_QUERY_CALLBACK";
    case TimeoutPolicy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Query {
  id: string;
  connectionId: string;
  chainId: string;
  queryType: string;
  requestData: Uint8Array;
  callbackModule: string;
  callbackId: string;
  callbackData: Uint8Array;
  timeoutPolicy: TimeoutPolicy;
  timeoutDuration: Duration | undefined;
  timeoutTimestamp: number;
  requestSent: boolean;
  submissionHeight: number;
}

export interface DataPoint {
  id: string;
  remoteHeight: string;
  localHeight: string;
  value: Uint8Array;
}

/** GenesisState defines the epochs module's genesis state. */
export interface GenesisState {
  queries: Query[];
}

function createBaseQuery(): Query {
  return {
    id: "",
    connectionId: "",
    chainId: "",
    queryType: "",
    requestData: new Uint8Array(0),
    callbackModule: "",
    callbackId: "",
    callbackData: new Uint8Array(0),
    timeoutPolicy: 0,
    timeoutDuration: undefined,
    timeoutTimestamp: 0,
    requestSent: false,
    submissionHeight: 0,
  };
}

export const Query = {
  encode(message: Query, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.connectionId !== "") {
      writer.uint32(18).string(message.connectionId);
    }
    if (message.chainId !== "") {
      writer.uint32(26).string(message.chainId);
    }
    if (message.queryType !== "") {
      writer.uint32(34).string(message.queryType);
    }
    if (message.requestData.length !== 0) {
      writer.uint32(42).bytes(message.requestData);
    }
    if (message.callbackModule !== "") {
      writer.uint32(106).string(message.callbackModule);
    }
    if (message.callbackId !== "") {
      writer.uint32(66).string(message.callbackId);
    }
    if (message.callbackData.length !== 0) {
      writer.uint32(98).bytes(message.callbackData);
    }
    if (message.timeoutPolicy !== 0) {
      writer.uint32(120).int32(message.timeoutPolicy);
    }
    if (message.timeoutDuration !== undefined) {
      Duration.encode(message.timeoutDuration, writer.uint32(114).fork()).ldelim();
    }
    if (message.timeoutTimestamp !== 0) {
      writer.uint32(72).uint64(message.timeoutTimestamp);
    }
    if (message.requestSent !== false) {
      writer.uint32(88).bool(message.requestSent);
    }
    if (message.submissionHeight !== 0) {
      writer.uint32(128).uint64(message.submissionHeight);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Query {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.connectionId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.chainId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.queryType = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.requestData = reader.bytes();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.callbackModule = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.callbackId = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.callbackData = reader.bytes();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.timeoutPolicy = reader.int32() as any;
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.timeoutDuration = Duration.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.timeoutTimestamp = longToNumber(reader.uint64() as Long);
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.requestSent = reader.bool();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.submissionHeight = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Query {
    return {
      id: isSet(object.id) ? gt.String(object.id) : "",
      connectionId: isSet(object.connectionId) ? gt.String(object.connectionId) : "",
      chainId: isSet(object.chainId) ? gt.String(object.chainId) : "",
      queryType: isSet(object.queryType) ? gt.String(object.queryType) : "",
      requestData: isSet(object.requestData) ? bytesFromBase64(object.requestData) : new Uint8Array(0),
      callbackModule: isSet(object.callbackModule) ? gt.String(object.callbackModule) : "",
      callbackId: isSet(object.callbackId) ? gt.String(object.callbackId) : "",
      callbackData: isSet(object.callbackData) ? bytesFromBase64(object.callbackData) : new Uint8Array(0),
      timeoutPolicy: isSet(object.timeoutPolicy) ? timeoutPolicyFromJSON(object.timeoutPolicy) : 0,
      timeoutDuration: isSet(object.timeoutDuration) ? Duration.fromJSON(object.timeoutDuration) : undefined,
      timeoutTimestamp: isSet(object.timeoutTimestamp) ? gt.Number(object.timeoutTimestamp) : 0,
      requestSent: isSet(object.requestSent) ? gt.Boolean(object.requestSent) : false,
      submissionHeight: isSet(object.submissionHeight) ? gt.Number(object.submissionHeight) : 0,
    };
  },

  toJSON(message: Query): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.connectionId !== "") {
      obj.connectionId = message.connectionId;
    }
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.queryType !== "") {
      obj.queryType = message.queryType;
    }
    if (message.requestData.length !== 0) {
      obj.requestData = base64FromBytes(message.requestData);
    }
    if (message.callbackModule !== "") {
      obj.callbackModule = message.callbackModule;
    }
    if (message.callbackId !== "") {
      obj.callbackId = message.callbackId;
    }
    if (message.callbackData.length !== 0) {
      obj.callbackData = base64FromBytes(message.callbackData);
    }
    if (message.timeoutPolicy !== 0) {
      obj.timeoutPolicy = timeoutPolicyToJSON(message.timeoutPolicy);
    }
    if (message.timeoutDuration !== undefined) {
      obj.timeoutDuration = Duration.toJSON(message.timeoutDuration);
    }
    if (message.timeoutTimestamp !== 0) {
      obj.timeoutTimestamp = Math.round(message.timeoutTimestamp);
    }
    if (message.requestSent !== false) {
      obj.requestSent = message.requestSent;
    }
    if (message.submissionHeight !== 0) {
      obj.submissionHeight = Math.round(message.submissionHeight);
    }
    return obj;
  },

  create(base?: DeepPartial<Query>): Query {
    return Query.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Query>): Query {
    const message = createBaseQuery();
    message.id = object.id ?? "";
    message.connectionId = object.connectionId ?? "";
    message.chainId = object.chainId ?? "";
    message.queryType = object.queryType ?? "";
    message.requestData = object.requestData ?? new Uint8Array(0);
    message.callbackModule = object.callbackModule ?? "";
    message.callbackId = object.callbackId ?? "";
    message.callbackData = object.callbackData ?? new Uint8Array(0);
    message.timeoutPolicy = object.timeoutPolicy ?? 0;
    message.timeoutDuration = (object.timeoutDuration !== undefined && object.timeoutDuration !== null)
      ? Duration.fromPartial(object.timeoutDuration)
      : undefined;
    message.timeoutTimestamp = object.timeoutTimestamp ?? 0;
    message.requestSent = object.requestSent ?? false;
    message.submissionHeight = object.submissionHeight ?? 0;
    return message;
  },
};

function createBaseDataPoint(): DataPoint {
  return { id: "", remoteHeight: "", localHeight: "", value: new Uint8Array(0) };
}

export const DataPoint = {
  encode(message: DataPoint, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.remoteHeight !== "") {
      writer.uint32(18).string(message.remoteHeight);
    }
    if (message.localHeight !== "") {
      writer.uint32(26).string(message.localHeight);
    }
    if (message.value.length !== 0) {
      writer.uint32(34).bytes(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DataPoint {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataPoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.remoteHeight = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.localHeight = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataPoint {
    return {
      id: isSet(object.id) ? gt.String(object.id) : "",
      remoteHeight: isSet(object.remoteHeight) ? gt.String(object.remoteHeight) : "",
      localHeight: isSet(object.localHeight) ? gt.String(object.localHeight) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
    };
  },

  toJSON(message: DataPoint): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.remoteHeight !== "") {
      obj.remoteHeight = message.remoteHeight;
    }
    if (message.localHeight !== "") {
      obj.localHeight = message.localHeight;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<DataPoint>): DataPoint {
    return DataPoint.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataPoint>): DataPoint {
    const message = createBaseDataPoint();
    message.id = object.id ?? "";
    message.remoteHeight = object.remoteHeight ?? "";
    message.localHeight = object.localHeight ?? "";
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function createBaseGenesisState(): GenesisState {
  return { queries: [] };
}

export const GenesisState = {
  encode(message: GenesisState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.queries) {
      Query.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.queries.push(Query.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return { queries: gt.Array.isArray(object?.queries) ? object.queries.map((e: any) => Query.fromJSON(e)) : [] };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.queries?.length) {
      obj.queries = message.queries.map((e) => Query.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GenesisState>): GenesisState {
    return GenesisState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenesisState>): GenesisState {
    const message = createBaseGenesisState();
    message.queries = object.queries?.map((e) => Query.fromPartial(e)) || [];
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

function bytesFromBase64(b64: string): Uint8Array {
  if ((gt as any).Buffer) {
    return Uint8Array.from(gt.Buffer.from(b64, "base64"));
  } else {
    const bin = gt.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((gt as any).Buffer) {
    return gt.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(gt.String.fromCharCode(byte));
    });
    return gt.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(long: Long): number {
  if (long.gt(gt.Number.MAX_SAFE_INTEGER)) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(gt.Number.MIN_SAFE_INTEGER)) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
