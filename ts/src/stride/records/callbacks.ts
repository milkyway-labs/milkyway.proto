// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: stride/records/callbacks.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { LSMTokenDeposit } from "./records";
import Long = require("long");

export const protobufPackage = "stride.records";

export interface TransferCallback {
  depositRecordId: number;
}

export interface TransferLSMTokenCallback {
  deposit: LSMTokenDeposit | undefined;
}

function createBaseTransferCallback(): TransferCallback {
  return { depositRecordId: 0 };
}

export const TransferCallback = {
  encode(message: TransferCallback, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.depositRecordId !== 0) {
      writer.uint32(8).uint64(message.depositRecordId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransferCallback {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransferCallback();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.depositRecordId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransferCallback {
    return { depositRecordId: isSet(object.depositRecordId) ? gt.Number(object.depositRecordId) : 0 };
  },

  toJSON(message: TransferCallback): unknown {
    const obj: any = {};
    if (message.depositRecordId !== 0) {
      obj.depositRecordId = Math.round(message.depositRecordId);
    }
    return obj;
  },

  create(base?: DeepPartial<TransferCallback>): TransferCallback {
    return TransferCallback.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TransferCallback>): TransferCallback {
    const message = createBaseTransferCallback();
    message.depositRecordId = object.depositRecordId ?? 0;
    return message;
  },
};

function createBaseTransferLSMTokenCallback(): TransferLSMTokenCallback {
  return { deposit: undefined };
}

export const TransferLSMTokenCallback = {
  encode(message: TransferLSMTokenCallback, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deposit !== undefined) {
      LSMTokenDeposit.encode(message.deposit, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransferLSMTokenCallback {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransferLSMTokenCallback();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deposit = LSMTokenDeposit.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransferLSMTokenCallback {
    return { deposit: isSet(object.deposit) ? LSMTokenDeposit.fromJSON(object.deposit) : undefined };
  },

  toJSON(message: TransferLSMTokenCallback): unknown {
    const obj: any = {};
    if (message.deposit !== undefined) {
      obj.deposit = LSMTokenDeposit.toJSON(message.deposit);
    }
    return obj;
  },

  create(base?: DeepPartial<TransferLSMTokenCallback>): TransferLSMTokenCallback {
    return TransferLSMTokenCallback.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TransferLSMTokenCallback>): TransferLSMTokenCallback {
    const message = createBaseTransferLSMTokenCallback();
    message.deposit = (object.deposit !== undefined && object.deposit !== null)
      ? LSMTokenDeposit.fromPartial(object.deposit)
      : undefined;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(long: Long): number {
  if (long.gt(gt.Number.MAX_SAFE_INTEGER)) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(gt.Number.MIN_SAFE_INTEGER)) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
