// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: stride/records/genesis.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Params } from "./params";
import { DepositRecord, EpochUnbondingRecord, LSMTokenDeposit, UserRedemptionRecord } from "./records";
import Long = require("long");

export const protobufPackage = "stride.records";

/** GenesisState defines the records module's genesis state. */
export interface GenesisState {
  params: Params | undefined;
  portId: string;
  userRedemptionRecordList: UserRedemptionRecord[];
  userRedemptionRecordCount: number;
  epochUnbondingRecordList: EpochUnbondingRecord[];
  depositRecordList: DepositRecord[];
  depositRecordCount: number;
  lsmTokenDepositList: LSMTokenDeposit[];
}

function createBaseGenesisState(): GenesisState {
  return {
    params: undefined,
    portId: "",
    userRedemptionRecordList: [],
    userRedemptionRecordCount: 0,
    epochUnbondingRecordList: [],
    depositRecordList: [],
    depositRecordCount: 0,
    lsmTokenDepositList: [],
  };
}

export const GenesisState = {
  encode(message: GenesisState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    if (message.portId !== "") {
      writer.uint32(18).string(message.portId);
    }
    for (const v of message.userRedemptionRecordList) {
      UserRedemptionRecord.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.userRedemptionRecordCount !== 0) {
      writer.uint32(32).uint64(message.userRedemptionRecordCount);
    }
    for (const v of message.epochUnbondingRecordList) {
      EpochUnbondingRecord.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    for (const v of message.depositRecordList) {
      DepositRecord.encode(v!, writer.uint32(58).fork()).ldelim();
    }
    if (message.depositRecordCount !== 0) {
      writer.uint32(64).uint64(message.depositRecordCount);
    }
    for (const v of message.lsmTokenDepositList) {
      LSMTokenDeposit.encode(v!, writer.uint32(74).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.portId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userRedemptionRecordList.push(UserRedemptionRecord.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.userRedemptionRecordCount = longToNumber(reader.uint64() as Long);
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.epochUnbondingRecordList.push(EpochUnbondingRecord.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.depositRecordList.push(DepositRecord.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.depositRecordCount = longToNumber(reader.uint64() as Long);
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.lsmTokenDepositList.push(LSMTokenDeposit.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
      portId: isSet(object.portId) ? gt.String(object.portId) : "",
      userRedemptionRecordList: gt.Array.isArray(object?.userRedemptionRecordList)
        ? object.userRedemptionRecordList.map((e: any) => UserRedemptionRecord.fromJSON(e))
        : [],
      userRedemptionRecordCount: isSet(object.userRedemptionRecordCount)
        ? gt.Number(object.userRedemptionRecordCount)
        : 0,
      epochUnbondingRecordList: gt.Array.isArray(object?.epochUnbondingRecordList)
        ? object.epochUnbondingRecordList.map((e: any) => EpochUnbondingRecord.fromJSON(e))
        : [],
      depositRecordList: gt.Array.isArray(object?.depositRecordList)
        ? object.depositRecordList.map((e: any) => DepositRecord.fromJSON(e))
        : [],
      depositRecordCount: isSet(object.depositRecordCount) ? gt.Number(object.depositRecordCount) : 0,
      lsmTokenDepositList: gt.Array.isArray(object?.lsmTokenDepositList)
        ? object.lsmTokenDepositList.map((e: any) => LSMTokenDeposit.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    if (message.portId !== "") {
      obj.portId = message.portId;
    }
    if (message.userRedemptionRecordList?.length) {
      obj.userRedemptionRecordList = message.userRedemptionRecordList.map((e) => UserRedemptionRecord.toJSON(e));
    }
    if (message.userRedemptionRecordCount !== 0) {
      obj.userRedemptionRecordCount = Math.round(message.userRedemptionRecordCount);
    }
    if (message.epochUnbondingRecordList?.length) {
      obj.epochUnbondingRecordList = message.epochUnbondingRecordList.map((e) => EpochUnbondingRecord.toJSON(e));
    }
    if (message.depositRecordList?.length) {
      obj.depositRecordList = message.depositRecordList.map((e) => DepositRecord.toJSON(e));
    }
    if (message.depositRecordCount !== 0) {
      obj.depositRecordCount = Math.round(message.depositRecordCount);
    }
    if (message.lsmTokenDepositList?.length) {
      obj.lsmTokenDepositList = message.lsmTokenDepositList.map((e) => LSMTokenDeposit.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GenesisState>): GenesisState {
    return GenesisState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenesisState>): GenesisState {
    const message = createBaseGenesisState();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    message.portId = object.portId ?? "";
    message.userRedemptionRecordList =
      object.userRedemptionRecordList?.map((e) => UserRedemptionRecord.fromPartial(e)) || [];
    message.userRedemptionRecordCount = object.userRedemptionRecordCount ?? 0;
    message.epochUnbondingRecordList =
      object.epochUnbondingRecordList?.map((e) => EpochUnbondingRecord.fromPartial(e)) || [];
    message.depositRecordList = object.depositRecordList?.map((e) => DepositRecord.fromPartial(e)) || [];
    message.depositRecordCount = object.depositRecordCount ?? 0;
    message.lsmTokenDepositList = object.lsmTokenDepositList?.map((e) => LSMTokenDeposit.fromPartial(e)) || [];
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(long: Long): number {
  if (long.gt(gt.Number.MAX_SAFE_INTEGER)) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(gt.Number.MIN_SAFE_INTEGER)) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
