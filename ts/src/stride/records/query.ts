// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: stride/records/query.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { Params } from "./params";
import { DepositRecord, EpochUnbondingRecord, LSMTokenDeposit, UserRedemptionRecord } from "./records";
import Long = require("long");

export const protobufPackage = "stride.records";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

export interface QueryGetDepositRecordRequest {
  id: number;
}

export interface QueryGetDepositRecordResponse {
  depositRecord: DepositRecord | undefined;
}

export interface QueryAllDepositRecordRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllDepositRecordResponse {
  depositRecord: DepositRecord[];
  pagination: PageResponse | undefined;
}

export interface QueryDepositRecordByHostRequest {
  hostZoneId: string;
}

export interface QueryDepositRecordByHostResponse {
  depositRecord: DepositRecord[];
}

export interface QueryGetUserRedemptionRecordRequest {
  id: string;
}

export interface QueryGetUserRedemptionRecordResponse {
  userRedemptionRecord: UserRedemptionRecord | undefined;
}

export interface QueryAllUserRedemptionRecordRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllUserRedemptionRecordResponse {
  userRedemptionRecord: UserRedemptionRecord[];
  pagination: PageResponse | undefined;
}

/** Query UserRedemptionRecords by chainId / userId pair */
export interface QueryAllUserRedemptionRecordForUserRequest {
  chainId: string;
  day: number;
  address: string;
  limit: number;
  pagination: PageRequest | undefined;
}

export interface QueryAllUserRedemptionRecordForUserResponse {
  userRedemptionRecord: UserRedemptionRecord[];
  pagination: PageResponse | undefined;
}

export interface QueryGetEpochUnbondingRecordRequest {
  epochNumber: number;
}

export interface QueryGetEpochUnbondingRecordResponse {
  epochUnbondingRecord: EpochUnbondingRecord | undefined;
}

export interface QueryAllEpochUnbondingRecordRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllEpochUnbondingRecordResponse {
  epochUnbondingRecord: EpochUnbondingRecord[];
  pagination: PageResponse | undefined;
}

export interface QueryLSMDepositRequest {
  chainId: string;
  denom: string;
}

export interface QueryLSMDepositResponse {
  deposit: LSMTokenDeposit | undefined;
}

export interface QueryLSMDepositsRequest {
  chainId: string;
  validatorAddress: string;
  status: string;
}

export interface QueryLSMDepositsResponse {
  deposits: LSMTokenDeposit[];
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest = {
  encode(_: QueryParamsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse = {
  encode(message: QueryParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGetDepositRecordRequest(): QueryGetDepositRecordRequest {
  return { id: 0 };
}

export const QueryGetDepositRecordRequest = {
  encode(message: QueryGetDepositRecordRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetDepositRecordRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetDepositRecordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetDepositRecordRequest {
    return { id: isSet(object.id) ? gt.Number(object.id) : 0 };
  },

  toJSON(message: QueryGetDepositRecordRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryGetDepositRecordRequest>): QueryGetDepositRecordRequest {
    return QueryGetDepositRecordRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryGetDepositRecordRequest>): QueryGetDepositRecordRequest {
    const message = createBaseQueryGetDepositRecordRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseQueryGetDepositRecordResponse(): QueryGetDepositRecordResponse {
  return { depositRecord: undefined };
}

export const QueryGetDepositRecordResponse = {
  encode(message: QueryGetDepositRecordResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.depositRecord !== undefined) {
      DepositRecord.encode(message.depositRecord, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetDepositRecordResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetDepositRecordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.depositRecord = DepositRecord.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetDepositRecordResponse {
    return { depositRecord: isSet(object.depositRecord) ? DepositRecord.fromJSON(object.depositRecord) : undefined };
  },

  toJSON(message: QueryGetDepositRecordResponse): unknown {
    const obj: any = {};
    if (message.depositRecord !== undefined) {
      obj.depositRecord = DepositRecord.toJSON(message.depositRecord);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryGetDepositRecordResponse>): QueryGetDepositRecordResponse {
    return QueryGetDepositRecordResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryGetDepositRecordResponse>): QueryGetDepositRecordResponse {
    const message = createBaseQueryGetDepositRecordResponse();
    message.depositRecord = (object.depositRecord !== undefined && object.depositRecord !== null)
      ? DepositRecord.fromPartial(object.depositRecord)
      : undefined;
    return message;
  },
};

function createBaseQueryAllDepositRecordRequest(): QueryAllDepositRecordRequest {
  return { pagination: undefined };
}

export const QueryAllDepositRecordRequest = {
  encode(message: QueryAllDepositRecordRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllDepositRecordRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllDepositRecordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllDepositRecordRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllDepositRecordRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryAllDepositRecordRequest>): QueryAllDepositRecordRequest {
    return QueryAllDepositRecordRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryAllDepositRecordRequest>): QueryAllDepositRecordRequest {
    const message = createBaseQueryAllDepositRecordRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllDepositRecordResponse(): QueryAllDepositRecordResponse {
  return { depositRecord: [], pagination: undefined };
}

export const QueryAllDepositRecordResponse = {
  encode(message: QueryAllDepositRecordResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.depositRecord) {
      DepositRecord.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllDepositRecordResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllDepositRecordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.depositRecord.push(DepositRecord.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllDepositRecordResponse {
    return {
      depositRecord: gt.Array.isArray(object?.depositRecord)
        ? object.depositRecord.map((e: any) => DepositRecord.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllDepositRecordResponse): unknown {
    const obj: any = {};
    if (message.depositRecord?.length) {
      obj.depositRecord = message.depositRecord.map((e) => DepositRecord.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryAllDepositRecordResponse>): QueryAllDepositRecordResponse {
    return QueryAllDepositRecordResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryAllDepositRecordResponse>): QueryAllDepositRecordResponse {
    const message = createBaseQueryAllDepositRecordResponse();
    message.depositRecord = object.depositRecord?.map((e) => DepositRecord.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDepositRecordByHostRequest(): QueryDepositRecordByHostRequest {
  return { hostZoneId: "" };
}

export const QueryDepositRecordByHostRequest = {
  encode(message: QueryDepositRecordByHostRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hostZoneId !== "") {
      writer.uint32(10).string(message.hostZoneId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryDepositRecordByHostRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDepositRecordByHostRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hostZoneId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDepositRecordByHostRequest {
    return { hostZoneId: isSet(object.hostZoneId) ? gt.String(object.hostZoneId) : "" };
  },

  toJSON(message: QueryDepositRecordByHostRequest): unknown {
    const obj: any = {};
    if (message.hostZoneId !== "") {
      obj.hostZoneId = message.hostZoneId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDepositRecordByHostRequest>): QueryDepositRecordByHostRequest {
    return QueryDepositRecordByHostRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDepositRecordByHostRequest>): QueryDepositRecordByHostRequest {
    const message = createBaseQueryDepositRecordByHostRequest();
    message.hostZoneId = object.hostZoneId ?? "";
    return message;
  },
};

function createBaseQueryDepositRecordByHostResponse(): QueryDepositRecordByHostResponse {
  return { depositRecord: [] };
}

export const QueryDepositRecordByHostResponse = {
  encode(message: QueryDepositRecordByHostResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.depositRecord) {
      DepositRecord.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryDepositRecordByHostResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDepositRecordByHostResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.depositRecord.push(DepositRecord.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDepositRecordByHostResponse {
    return {
      depositRecord: gt.Array.isArray(object?.depositRecord)
        ? object.depositRecord.map((e: any) => DepositRecord.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryDepositRecordByHostResponse): unknown {
    const obj: any = {};
    if (message.depositRecord?.length) {
      obj.depositRecord = message.depositRecord.map((e) => DepositRecord.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDepositRecordByHostResponse>): QueryDepositRecordByHostResponse {
    return QueryDepositRecordByHostResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDepositRecordByHostResponse>): QueryDepositRecordByHostResponse {
    const message = createBaseQueryDepositRecordByHostResponse();
    message.depositRecord = object.depositRecord?.map((e) => DepositRecord.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryGetUserRedemptionRecordRequest(): QueryGetUserRedemptionRecordRequest {
  return { id: "" };
}

export const QueryGetUserRedemptionRecordRequest = {
  encode(message: QueryGetUserRedemptionRecordRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetUserRedemptionRecordRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetUserRedemptionRecordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetUserRedemptionRecordRequest {
    return { id: isSet(object.id) ? gt.String(object.id) : "" };
  },

  toJSON(message: QueryGetUserRedemptionRecordRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryGetUserRedemptionRecordRequest>): QueryGetUserRedemptionRecordRequest {
    return QueryGetUserRedemptionRecordRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryGetUserRedemptionRecordRequest>): QueryGetUserRedemptionRecordRequest {
    const message = createBaseQueryGetUserRedemptionRecordRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseQueryGetUserRedemptionRecordResponse(): QueryGetUserRedemptionRecordResponse {
  return { userRedemptionRecord: undefined };
}

export const QueryGetUserRedemptionRecordResponse = {
  encode(message: QueryGetUserRedemptionRecordResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userRedemptionRecord !== undefined) {
      UserRedemptionRecord.encode(message.userRedemptionRecord, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetUserRedemptionRecordResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetUserRedemptionRecordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userRedemptionRecord = UserRedemptionRecord.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetUserRedemptionRecordResponse {
    return {
      userRedemptionRecord: isSet(object.userRedemptionRecord)
        ? UserRedemptionRecord.fromJSON(object.userRedemptionRecord)
        : undefined,
    };
  },

  toJSON(message: QueryGetUserRedemptionRecordResponse): unknown {
    const obj: any = {};
    if (message.userRedemptionRecord !== undefined) {
      obj.userRedemptionRecord = UserRedemptionRecord.toJSON(message.userRedemptionRecord);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryGetUserRedemptionRecordResponse>): QueryGetUserRedemptionRecordResponse {
    return QueryGetUserRedemptionRecordResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryGetUserRedemptionRecordResponse>): QueryGetUserRedemptionRecordResponse {
    const message = createBaseQueryGetUserRedemptionRecordResponse();
    message.userRedemptionRecord = (object.userRedemptionRecord !== undefined && object.userRedemptionRecord !== null)
      ? UserRedemptionRecord.fromPartial(object.userRedemptionRecord)
      : undefined;
    return message;
  },
};

function createBaseQueryAllUserRedemptionRecordRequest(): QueryAllUserRedemptionRecordRequest {
  return { pagination: undefined };
}

export const QueryAllUserRedemptionRecordRequest = {
  encode(message: QueryAllUserRedemptionRecordRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllUserRedemptionRecordRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllUserRedemptionRecordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllUserRedemptionRecordRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllUserRedemptionRecordRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryAllUserRedemptionRecordRequest>): QueryAllUserRedemptionRecordRequest {
    return QueryAllUserRedemptionRecordRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryAllUserRedemptionRecordRequest>): QueryAllUserRedemptionRecordRequest {
    const message = createBaseQueryAllUserRedemptionRecordRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllUserRedemptionRecordResponse(): QueryAllUserRedemptionRecordResponse {
  return { userRedemptionRecord: [], pagination: undefined };
}

export const QueryAllUserRedemptionRecordResponse = {
  encode(message: QueryAllUserRedemptionRecordResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.userRedemptionRecord) {
      UserRedemptionRecord.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllUserRedemptionRecordResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllUserRedemptionRecordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userRedemptionRecord.push(UserRedemptionRecord.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllUserRedemptionRecordResponse {
    return {
      userRedemptionRecord: gt.Array.isArray(object?.userRedemptionRecord)
        ? object.userRedemptionRecord.map((e: any) => UserRedemptionRecord.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllUserRedemptionRecordResponse): unknown {
    const obj: any = {};
    if (message.userRedemptionRecord?.length) {
      obj.userRedemptionRecord = message.userRedemptionRecord.map((e) => UserRedemptionRecord.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryAllUserRedemptionRecordResponse>): QueryAllUserRedemptionRecordResponse {
    return QueryAllUserRedemptionRecordResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryAllUserRedemptionRecordResponse>): QueryAllUserRedemptionRecordResponse {
    const message = createBaseQueryAllUserRedemptionRecordResponse();
    message.userRedemptionRecord = object.userRedemptionRecord?.map((e) => UserRedemptionRecord.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllUserRedemptionRecordForUserRequest(): QueryAllUserRedemptionRecordForUserRequest {
  return { chainId: "", day: 0, address: "", limit: 0, pagination: undefined };
}

export const QueryAllUserRedemptionRecordForUserRequest = {
  encode(message: QueryAllUserRedemptionRecordForUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.chainId !== "") {
      writer.uint32(10).string(message.chainId);
    }
    if (message.day !== 0) {
      writer.uint32(16).uint64(message.day);
    }
    if (message.address !== "") {
      writer.uint32(26).string(message.address);
    }
    if (message.limit !== 0) {
      writer.uint32(32).uint64(message.limit);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllUserRedemptionRecordForUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllUserRedemptionRecordForUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chainId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.day = longToNumber(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.address = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.limit = longToNumber(reader.uint64() as Long);
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllUserRedemptionRecordForUserRequest {
    return {
      chainId: isSet(object.chainId) ? gt.String(object.chainId) : "",
      day: isSet(object.day) ? gt.Number(object.day) : 0,
      address: isSet(object.address) ? gt.String(object.address) : "",
      limit: isSet(object.limit) ? gt.Number(object.limit) : 0,
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllUserRedemptionRecordForUserRequest): unknown {
    const obj: any = {};
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.day !== 0) {
      obj.day = Math.round(message.day);
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryAllUserRedemptionRecordForUserRequest>): QueryAllUserRedemptionRecordForUserRequest {
    return QueryAllUserRedemptionRecordForUserRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryAllUserRedemptionRecordForUserRequest>,
  ): QueryAllUserRedemptionRecordForUserRequest {
    const message = createBaseQueryAllUserRedemptionRecordForUserRequest();
    message.chainId = object.chainId ?? "";
    message.day = object.day ?? 0;
    message.address = object.address ?? "";
    message.limit = object.limit ?? 0;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllUserRedemptionRecordForUserResponse(): QueryAllUserRedemptionRecordForUserResponse {
  return { userRedemptionRecord: [], pagination: undefined };
}

export const QueryAllUserRedemptionRecordForUserResponse = {
  encode(message: QueryAllUserRedemptionRecordForUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.userRedemptionRecord) {
      UserRedemptionRecord.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllUserRedemptionRecordForUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllUserRedemptionRecordForUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userRedemptionRecord.push(UserRedemptionRecord.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllUserRedemptionRecordForUserResponse {
    return {
      userRedemptionRecord: gt.Array.isArray(object?.userRedemptionRecord)
        ? object.userRedemptionRecord.map((e: any) => UserRedemptionRecord.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllUserRedemptionRecordForUserResponse): unknown {
    const obj: any = {};
    if (message.userRedemptionRecord?.length) {
      obj.userRedemptionRecord = message.userRedemptionRecord.map((e) => UserRedemptionRecord.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryAllUserRedemptionRecordForUserResponse>): QueryAllUserRedemptionRecordForUserResponse {
    return QueryAllUserRedemptionRecordForUserResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryAllUserRedemptionRecordForUserResponse>,
  ): QueryAllUserRedemptionRecordForUserResponse {
    const message = createBaseQueryAllUserRedemptionRecordForUserResponse();
    message.userRedemptionRecord = object.userRedemptionRecord?.map((e) => UserRedemptionRecord.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGetEpochUnbondingRecordRequest(): QueryGetEpochUnbondingRecordRequest {
  return { epochNumber: 0 };
}

export const QueryGetEpochUnbondingRecordRequest = {
  encode(message: QueryGetEpochUnbondingRecordRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.epochNumber !== 0) {
      writer.uint32(8).uint64(message.epochNumber);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetEpochUnbondingRecordRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetEpochUnbondingRecordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.epochNumber = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetEpochUnbondingRecordRequest {
    return { epochNumber: isSet(object.epochNumber) ? gt.Number(object.epochNumber) : 0 };
  },

  toJSON(message: QueryGetEpochUnbondingRecordRequest): unknown {
    const obj: any = {};
    if (message.epochNumber !== 0) {
      obj.epochNumber = Math.round(message.epochNumber);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryGetEpochUnbondingRecordRequest>): QueryGetEpochUnbondingRecordRequest {
    return QueryGetEpochUnbondingRecordRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryGetEpochUnbondingRecordRequest>): QueryGetEpochUnbondingRecordRequest {
    const message = createBaseQueryGetEpochUnbondingRecordRequest();
    message.epochNumber = object.epochNumber ?? 0;
    return message;
  },
};

function createBaseQueryGetEpochUnbondingRecordResponse(): QueryGetEpochUnbondingRecordResponse {
  return { epochUnbondingRecord: undefined };
}

export const QueryGetEpochUnbondingRecordResponse = {
  encode(message: QueryGetEpochUnbondingRecordResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.epochUnbondingRecord !== undefined) {
      EpochUnbondingRecord.encode(message.epochUnbondingRecord, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetEpochUnbondingRecordResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetEpochUnbondingRecordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.epochUnbondingRecord = EpochUnbondingRecord.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetEpochUnbondingRecordResponse {
    return {
      epochUnbondingRecord: isSet(object.epochUnbondingRecord)
        ? EpochUnbondingRecord.fromJSON(object.epochUnbondingRecord)
        : undefined,
    };
  },

  toJSON(message: QueryGetEpochUnbondingRecordResponse): unknown {
    const obj: any = {};
    if (message.epochUnbondingRecord !== undefined) {
      obj.epochUnbondingRecord = EpochUnbondingRecord.toJSON(message.epochUnbondingRecord);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryGetEpochUnbondingRecordResponse>): QueryGetEpochUnbondingRecordResponse {
    return QueryGetEpochUnbondingRecordResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryGetEpochUnbondingRecordResponse>): QueryGetEpochUnbondingRecordResponse {
    const message = createBaseQueryGetEpochUnbondingRecordResponse();
    message.epochUnbondingRecord = (object.epochUnbondingRecord !== undefined && object.epochUnbondingRecord !== null)
      ? EpochUnbondingRecord.fromPartial(object.epochUnbondingRecord)
      : undefined;
    return message;
  },
};

function createBaseQueryAllEpochUnbondingRecordRequest(): QueryAllEpochUnbondingRecordRequest {
  return { pagination: undefined };
}

export const QueryAllEpochUnbondingRecordRequest = {
  encode(message: QueryAllEpochUnbondingRecordRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllEpochUnbondingRecordRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllEpochUnbondingRecordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllEpochUnbondingRecordRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllEpochUnbondingRecordRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryAllEpochUnbondingRecordRequest>): QueryAllEpochUnbondingRecordRequest {
    return QueryAllEpochUnbondingRecordRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryAllEpochUnbondingRecordRequest>): QueryAllEpochUnbondingRecordRequest {
    const message = createBaseQueryAllEpochUnbondingRecordRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllEpochUnbondingRecordResponse(): QueryAllEpochUnbondingRecordResponse {
  return { epochUnbondingRecord: [], pagination: undefined };
}

export const QueryAllEpochUnbondingRecordResponse = {
  encode(message: QueryAllEpochUnbondingRecordResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.epochUnbondingRecord) {
      EpochUnbondingRecord.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllEpochUnbondingRecordResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllEpochUnbondingRecordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.epochUnbondingRecord.push(EpochUnbondingRecord.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllEpochUnbondingRecordResponse {
    return {
      epochUnbondingRecord: gt.Array.isArray(object?.epochUnbondingRecord)
        ? object.epochUnbondingRecord.map((e: any) => EpochUnbondingRecord.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllEpochUnbondingRecordResponse): unknown {
    const obj: any = {};
    if (message.epochUnbondingRecord?.length) {
      obj.epochUnbondingRecord = message.epochUnbondingRecord.map((e) => EpochUnbondingRecord.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryAllEpochUnbondingRecordResponse>): QueryAllEpochUnbondingRecordResponse {
    return QueryAllEpochUnbondingRecordResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryAllEpochUnbondingRecordResponse>): QueryAllEpochUnbondingRecordResponse {
    const message = createBaseQueryAllEpochUnbondingRecordResponse();
    message.epochUnbondingRecord = object.epochUnbondingRecord?.map((e) => EpochUnbondingRecord.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryLSMDepositRequest(): QueryLSMDepositRequest {
  return { chainId: "", denom: "" };
}

export const QueryLSMDepositRequest = {
  encode(message: QueryLSMDepositRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.chainId !== "") {
      writer.uint32(10).string(message.chainId);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryLSMDepositRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLSMDepositRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chainId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLSMDepositRequest {
    return {
      chainId: isSet(object.chainId) ? gt.String(object.chainId) : "",
      denom: isSet(object.denom) ? gt.String(object.denom) : "",
    };
  },

  toJSON(message: QueryLSMDepositRequest): unknown {
    const obj: any = {};
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryLSMDepositRequest>): QueryLSMDepositRequest {
    return QueryLSMDepositRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryLSMDepositRequest>): QueryLSMDepositRequest {
    const message = createBaseQueryLSMDepositRequest();
    message.chainId = object.chainId ?? "";
    message.denom = object.denom ?? "";
    return message;
  },
};

function createBaseQueryLSMDepositResponse(): QueryLSMDepositResponse {
  return { deposit: undefined };
}

export const QueryLSMDepositResponse = {
  encode(message: QueryLSMDepositResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deposit !== undefined) {
      LSMTokenDeposit.encode(message.deposit, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryLSMDepositResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLSMDepositResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deposit = LSMTokenDeposit.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLSMDepositResponse {
    return { deposit: isSet(object.deposit) ? LSMTokenDeposit.fromJSON(object.deposit) : undefined };
  },

  toJSON(message: QueryLSMDepositResponse): unknown {
    const obj: any = {};
    if (message.deposit !== undefined) {
      obj.deposit = LSMTokenDeposit.toJSON(message.deposit);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryLSMDepositResponse>): QueryLSMDepositResponse {
    return QueryLSMDepositResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryLSMDepositResponse>): QueryLSMDepositResponse {
    const message = createBaseQueryLSMDepositResponse();
    message.deposit = (object.deposit !== undefined && object.deposit !== null)
      ? LSMTokenDeposit.fromPartial(object.deposit)
      : undefined;
    return message;
  },
};

function createBaseQueryLSMDepositsRequest(): QueryLSMDepositsRequest {
  return { chainId: "", validatorAddress: "", status: "" };
}

export const QueryLSMDepositsRequest = {
  encode(message: QueryLSMDepositsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.chainId !== "") {
      writer.uint32(10).string(message.chainId);
    }
    if (message.validatorAddress !== "") {
      writer.uint32(18).string(message.validatorAddress);
    }
    if (message.status !== "") {
      writer.uint32(26).string(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryLSMDepositsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLSMDepositsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chainId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.validatorAddress = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.status = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLSMDepositsRequest {
    return {
      chainId: isSet(object.chainId) ? gt.String(object.chainId) : "",
      validatorAddress: isSet(object.validatorAddress) ? gt.String(object.validatorAddress) : "",
      status: isSet(object.status) ? gt.String(object.status) : "",
    };
  },

  toJSON(message: QueryLSMDepositsRequest): unknown {
    const obj: any = {};
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.validatorAddress !== "") {
      obj.validatorAddress = message.validatorAddress;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryLSMDepositsRequest>): QueryLSMDepositsRequest {
    return QueryLSMDepositsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryLSMDepositsRequest>): QueryLSMDepositsRequest {
    const message = createBaseQueryLSMDepositsRequest();
    message.chainId = object.chainId ?? "";
    message.validatorAddress = object.validatorAddress ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseQueryLSMDepositsResponse(): QueryLSMDepositsResponse {
  return { deposits: [] };
}

export const QueryLSMDepositsResponse = {
  encode(message: QueryLSMDepositsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.deposits) {
      LSMTokenDeposit.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryLSMDepositsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLSMDepositsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deposits.push(LSMTokenDeposit.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLSMDepositsResponse {
    return {
      deposits: gt.Array.isArray(object?.deposits) ? object.deposits.map((e: any) => LSMTokenDeposit.fromJSON(e)) : [],
    };
  },

  toJSON(message: QueryLSMDepositsResponse): unknown {
    const obj: any = {};
    if (message.deposits?.length) {
      obj.deposits = message.deposits.map((e) => LSMTokenDeposit.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryLSMDepositsResponse>): QueryLSMDepositsResponse {
    return QueryLSMDepositsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryLSMDepositsResponse>): QueryLSMDepositsResponse {
    const message = createBaseQueryLSMDepositsResponse();
    message.deposits = object.deposits?.map((e) => LSMTokenDeposit.fromPartial(e)) || [];
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Queries a UserRedemptionRecord by id. */
  UserRedemptionRecord(request: QueryGetUserRedemptionRecordRequest): Promise<QueryGetUserRedemptionRecordResponse>;
  /** Queries a list of UserRedemptionRecord items. */
  UserRedemptionRecordAll(request: QueryAllUserRedemptionRecordRequest): Promise<QueryAllUserRedemptionRecordResponse>;
  /** Queries a list of UserRedemptionRecord items by chainId / userId pair. */
  UserRedemptionRecordForUser(
    request: QueryAllUserRedemptionRecordForUserRequest,
  ): Promise<QueryAllUserRedemptionRecordForUserResponse>;
  /** Queries a EpochUnbondingRecord by id. */
  EpochUnbondingRecord(request: QueryGetEpochUnbondingRecordRequest): Promise<QueryGetEpochUnbondingRecordResponse>;
  /** Queries a list of EpochUnbondingRecord items. */
  EpochUnbondingRecordAll(request: QueryAllEpochUnbondingRecordRequest): Promise<QueryAllEpochUnbondingRecordResponse>;
  /** Queries a DepositRecord by id. */
  DepositRecord(request: QueryGetDepositRecordRequest): Promise<QueryGetDepositRecordResponse>;
  /** Queries a list of DepositRecord items. */
  DepositRecordAll(request: QueryAllDepositRecordRequest): Promise<QueryAllDepositRecordResponse>;
  /** Queries a list of DepositRecord items for a given host zone */
  DepositRecordByHost(request: QueryDepositRecordByHostRequest): Promise<QueryDepositRecordByHostResponse>;
  /** Queries the existing LSMTokenDeposits for one specific deposit */
  LSMDeposit(request: QueryLSMDepositRequest): Promise<QueryLSMDepositResponse>;
  /**
   * Queries the existing LSMTokenDeposits for all which match filters
   *   intended use:
   *   ...stakeibc/lsm_deposits?chain_id=X&validator_address=Y&status=Z
   */
  LSMDeposits(request: QueryLSMDepositsRequest): Promise<QueryLSMDepositsResponse>;
}

export const QueryServiceName = "stride.records.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.UserRedemptionRecord = this.UserRedemptionRecord.bind(this);
    this.UserRedemptionRecordAll = this.UserRedemptionRecordAll.bind(this);
    this.UserRedemptionRecordForUser = this.UserRedemptionRecordForUser.bind(this);
    this.EpochUnbondingRecord = this.EpochUnbondingRecord.bind(this);
    this.EpochUnbondingRecordAll = this.EpochUnbondingRecordAll.bind(this);
    this.DepositRecord = this.DepositRecord.bind(this);
    this.DepositRecordAll = this.DepositRecordAll.bind(this);
    this.DepositRecordByHost = this.DepositRecordByHost.bind(this);
    this.LSMDeposit = this.LSMDeposit.bind(this);
    this.LSMDeposits = this.LSMDeposits.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(_m0.Reader.create(data)));
  }

  UserRedemptionRecord(request: QueryGetUserRedemptionRecordRequest): Promise<QueryGetUserRedemptionRecordResponse> {
    const data = QueryGetUserRedemptionRecordRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UserRedemptionRecord", data);
    return promise.then((data) => QueryGetUserRedemptionRecordResponse.decode(_m0.Reader.create(data)));
  }

  UserRedemptionRecordAll(request: QueryAllUserRedemptionRecordRequest): Promise<QueryAllUserRedemptionRecordResponse> {
    const data = QueryAllUserRedemptionRecordRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UserRedemptionRecordAll", data);
    return promise.then((data) => QueryAllUserRedemptionRecordResponse.decode(_m0.Reader.create(data)));
  }

  UserRedemptionRecordForUser(
    request: QueryAllUserRedemptionRecordForUserRequest,
  ): Promise<QueryAllUserRedemptionRecordForUserResponse> {
    const data = QueryAllUserRedemptionRecordForUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UserRedemptionRecordForUser", data);
    return promise.then((data) => QueryAllUserRedemptionRecordForUserResponse.decode(_m0.Reader.create(data)));
  }

  EpochUnbondingRecord(request: QueryGetEpochUnbondingRecordRequest): Promise<QueryGetEpochUnbondingRecordResponse> {
    const data = QueryGetEpochUnbondingRecordRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "EpochUnbondingRecord", data);
    return promise.then((data) => QueryGetEpochUnbondingRecordResponse.decode(_m0.Reader.create(data)));
  }

  EpochUnbondingRecordAll(request: QueryAllEpochUnbondingRecordRequest): Promise<QueryAllEpochUnbondingRecordResponse> {
    const data = QueryAllEpochUnbondingRecordRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "EpochUnbondingRecordAll", data);
    return promise.then((data) => QueryAllEpochUnbondingRecordResponse.decode(_m0.Reader.create(data)));
  }

  DepositRecord(request: QueryGetDepositRecordRequest): Promise<QueryGetDepositRecordResponse> {
    const data = QueryGetDepositRecordRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DepositRecord", data);
    return promise.then((data) => QueryGetDepositRecordResponse.decode(_m0.Reader.create(data)));
  }

  DepositRecordAll(request: QueryAllDepositRecordRequest): Promise<QueryAllDepositRecordResponse> {
    const data = QueryAllDepositRecordRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DepositRecordAll", data);
    return promise.then((data) => QueryAllDepositRecordResponse.decode(_m0.Reader.create(data)));
  }

  DepositRecordByHost(request: QueryDepositRecordByHostRequest): Promise<QueryDepositRecordByHostResponse> {
    const data = QueryDepositRecordByHostRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DepositRecordByHost", data);
    return promise.then((data) => QueryDepositRecordByHostResponse.decode(_m0.Reader.create(data)));
  }

  LSMDeposit(request: QueryLSMDepositRequest): Promise<QueryLSMDepositResponse> {
    const data = QueryLSMDepositRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "LSMDeposit", data);
    return promise.then((data) => QueryLSMDepositResponse.decode(_m0.Reader.create(data)));
  }

  LSMDeposits(request: QueryLSMDepositsRequest): Promise<QueryLSMDepositsResponse> {
    const data = QueryLSMDepositsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "LSMDeposits", data);
    return promise.then((data) => QueryLSMDepositsResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(long: Long): number {
  if (long.gt(gt.Number.MAX_SAFE_INTEGER)) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(gt.Number.MIN_SAFE_INTEGER)) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
