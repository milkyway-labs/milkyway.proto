// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: stride/records/records.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import Long = require("long");

export const protobufPackage = "stride.records";

export interface UserRedemptionRecord {
  /** {chain_id}.{epoch}.{receiver} */
  id: string;
  receiver: string;
  nativeTokenAmount: string;
  denom: string;
  hostZoneId: string;
  epochNumber: number;
  claimIsPending: boolean;
  stTokenAmount: string;
}

export interface DepositRecord {
  id: number;
  amount: string;
  denom: string;
  hostZoneId: string;
  status: DepositRecord_Status;
  depositEpochNumber: number;
  source: DepositRecord_Source;
}

export enum DepositRecord_Status {
  /** TRANSFER_QUEUE - in transfer queue to be sent to the delegation ICA */
  TRANSFER_QUEUE = 0,
  /** TRANSFER_IN_PROGRESS - transfer in progress (IBC packet sent, ack not received) */
  TRANSFER_IN_PROGRESS = 2,
  /** DELEGATION_QUEUE - in staking queue on delegation ICA */
  DELEGATION_QUEUE = 1,
  /** DELEGATION_IN_PROGRESS - staking in progress (ICA packet sent, ack not received) */
  DELEGATION_IN_PROGRESS = 3,
  UNRECOGNIZED = -1,
}

export function depositRecord_StatusFromJSON(object: any): DepositRecord_Status {
  switch (object) {
    case 0:
    case "TRANSFER_QUEUE":
      return DepositRecord_Status.TRANSFER_QUEUE;
    case 2:
    case "TRANSFER_IN_PROGRESS":
      return DepositRecord_Status.TRANSFER_IN_PROGRESS;
    case 1:
    case "DELEGATION_QUEUE":
      return DepositRecord_Status.DELEGATION_QUEUE;
    case 3:
    case "DELEGATION_IN_PROGRESS":
      return DepositRecord_Status.DELEGATION_IN_PROGRESS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DepositRecord_Status.UNRECOGNIZED;
  }
}

export function depositRecord_StatusToJSON(object: DepositRecord_Status): string {
  switch (object) {
    case DepositRecord_Status.TRANSFER_QUEUE:
      return "TRANSFER_QUEUE";
    case DepositRecord_Status.TRANSFER_IN_PROGRESS:
      return "TRANSFER_IN_PROGRESS";
    case DepositRecord_Status.DELEGATION_QUEUE:
      return "DELEGATION_QUEUE";
    case DepositRecord_Status.DELEGATION_IN_PROGRESS:
      return "DELEGATION_IN_PROGRESS";
    case DepositRecord_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum DepositRecord_Source {
  STRIDE = 0,
  WITHDRAWAL_ICA = 1,
  UNRECOGNIZED = -1,
}

export function depositRecord_SourceFromJSON(object: any): DepositRecord_Source {
  switch (object) {
    case 0:
    case "STRIDE":
      return DepositRecord_Source.STRIDE;
    case 1:
    case "WITHDRAWAL_ICA":
      return DepositRecord_Source.WITHDRAWAL_ICA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DepositRecord_Source.UNRECOGNIZED;
  }
}

export function depositRecord_SourceToJSON(object: DepositRecord_Source): string {
  switch (object) {
    case DepositRecord_Source.STRIDE:
      return "STRIDE";
    case DepositRecord_Source.WITHDRAWAL_ICA:
      return "WITHDRAWAL_ICA";
    case DepositRecord_Source.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface HostZoneUnbonding {
  stTokenAmount: string;
  nativeTokenAmount: string;
  denom: string;
  hostZoneId: string;
  unbondingTime: number;
  status: HostZoneUnbonding_Status;
  userRedemptionRecords: string[];
}

export enum HostZoneUnbonding_Status {
  /** UNBONDING_QUEUE - tokens bonded on delegate account */
  UNBONDING_QUEUE = 0,
  UNBONDING_IN_PROGRESS = 3,
  /** EXIT_TRANSFER_QUEUE - unbonding completed on delegate account */
  EXIT_TRANSFER_QUEUE = 1,
  EXIT_TRANSFER_IN_PROGRESS = 4,
  /** CLAIMABLE - transfer success */
  CLAIMABLE = 2,
  UNRECOGNIZED = -1,
}

export function hostZoneUnbonding_StatusFromJSON(object: any): HostZoneUnbonding_Status {
  switch (object) {
    case 0:
    case "UNBONDING_QUEUE":
      return HostZoneUnbonding_Status.UNBONDING_QUEUE;
    case 3:
    case "UNBONDING_IN_PROGRESS":
      return HostZoneUnbonding_Status.UNBONDING_IN_PROGRESS;
    case 1:
    case "EXIT_TRANSFER_QUEUE":
      return HostZoneUnbonding_Status.EXIT_TRANSFER_QUEUE;
    case 4:
    case "EXIT_TRANSFER_IN_PROGRESS":
      return HostZoneUnbonding_Status.EXIT_TRANSFER_IN_PROGRESS;
    case 2:
    case "CLAIMABLE":
      return HostZoneUnbonding_Status.CLAIMABLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HostZoneUnbonding_Status.UNRECOGNIZED;
  }
}

export function hostZoneUnbonding_StatusToJSON(object: HostZoneUnbonding_Status): string {
  switch (object) {
    case HostZoneUnbonding_Status.UNBONDING_QUEUE:
      return "UNBONDING_QUEUE";
    case HostZoneUnbonding_Status.UNBONDING_IN_PROGRESS:
      return "UNBONDING_IN_PROGRESS";
    case HostZoneUnbonding_Status.EXIT_TRANSFER_QUEUE:
      return "EXIT_TRANSFER_QUEUE";
    case HostZoneUnbonding_Status.EXIT_TRANSFER_IN_PROGRESS:
      return "EXIT_TRANSFER_IN_PROGRESS";
    case HostZoneUnbonding_Status.CLAIMABLE:
      return "CLAIMABLE";
    case HostZoneUnbonding_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface EpochUnbondingRecord {
  epochNumber: number;
  hostZoneUnbondings: HostZoneUnbonding[];
}

export interface LSMTokenDeposit {
  depositId: string;
  chainId: string;
  denom: string;
  ibcDenom: string;
  stakerAddress: string;
  validatorAddress: string;
  amount: string;
  stToken: Coin | undefined;
  status: LSMTokenDeposit_Status;
}

export enum LSMTokenDeposit_Status {
  DEPOSIT_PENDING = 0,
  TRANSFER_QUEUE = 1,
  TRANSFER_IN_PROGRESS = 2,
  TRANSFER_FAILED = 3,
  DETOKENIZATION_QUEUE = 4,
  DETOKENIZATION_IN_PROGRESS = 5,
  DETOKENIZATION_FAILED = 6,
  UNRECOGNIZED = -1,
}

export function lSMTokenDeposit_StatusFromJSON(object: any): LSMTokenDeposit_Status {
  switch (object) {
    case 0:
    case "DEPOSIT_PENDING":
      return LSMTokenDeposit_Status.DEPOSIT_PENDING;
    case 1:
    case "TRANSFER_QUEUE":
      return LSMTokenDeposit_Status.TRANSFER_QUEUE;
    case 2:
    case "TRANSFER_IN_PROGRESS":
      return LSMTokenDeposit_Status.TRANSFER_IN_PROGRESS;
    case 3:
    case "TRANSFER_FAILED":
      return LSMTokenDeposit_Status.TRANSFER_FAILED;
    case 4:
    case "DETOKENIZATION_QUEUE":
      return LSMTokenDeposit_Status.DETOKENIZATION_QUEUE;
    case 5:
    case "DETOKENIZATION_IN_PROGRESS":
      return LSMTokenDeposit_Status.DETOKENIZATION_IN_PROGRESS;
    case 6:
    case "DETOKENIZATION_FAILED":
      return LSMTokenDeposit_Status.DETOKENIZATION_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LSMTokenDeposit_Status.UNRECOGNIZED;
  }
}

export function lSMTokenDeposit_StatusToJSON(object: LSMTokenDeposit_Status): string {
  switch (object) {
    case LSMTokenDeposit_Status.DEPOSIT_PENDING:
      return "DEPOSIT_PENDING";
    case LSMTokenDeposit_Status.TRANSFER_QUEUE:
      return "TRANSFER_QUEUE";
    case LSMTokenDeposit_Status.TRANSFER_IN_PROGRESS:
      return "TRANSFER_IN_PROGRESS";
    case LSMTokenDeposit_Status.TRANSFER_FAILED:
      return "TRANSFER_FAILED";
    case LSMTokenDeposit_Status.DETOKENIZATION_QUEUE:
      return "DETOKENIZATION_QUEUE";
    case LSMTokenDeposit_Status.DETOKENIZATION_IN_PROGRESS:
      return "DETOKENIZATION_IN_PROGRESS";
    case LSMTokenDeposit_Status.DETOKENIZATION_FAILED:
      return "DETOKENIZATION_FAILED";
    case LSMTokenDeposit_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseUserRedemptionRecord(): UserRedemptionRecord {
  return {
    id: "",
    receiver: "",
    nativeTokenAmount: "",
    denom: "",
    hostZoneId: "",
    epochNumber: 0,
    claimIsPending: false,
    stTokenAmount: "",
  };
}

export const UserRedemptionRecord = {
  encode(message: UserRedemptionRecord, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.receiver !== "") {
      writer.uint32(26).string(message.receiver);
    }
    if (message.nativeTokenAmount !== "") {
      writer.uint32(34).string(message.nativeTokenAmount);
    }
    if (message.denom !== "") {
      writer.uint32(42).string(message.denom);
    }
    if (message.hostZoneId !== "") {
      writer.uint32(50).string(message.hostZoneId);
    }
    if (message.epochNumber !== 0) {
      writer.uint32(56).uint64(message.epochNumber);
    }
    if (message.claimIsPending !== false) {
      writer.uint32(64).bool(message.claimIsPending);
    }
    if (message.stTokenAmount !== "") {
      writer.uint32(74).string(message.stTokenAmount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserRedemptionRecord {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserRedemptionRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.receiver = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.nativeTokenAmount = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.denom = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.hostZoneId = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.epochNumber = longToNumber(reader.uint64() as Long);
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.claimIsPending = reader.bool();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.stTokenAmount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserRedemptionRecord {
    return {
      id: isSet(object.id) ? gt.String(object.id) : "",
      receiver: isSet(object.receiver) ? gt.String(object.receiver) : "",
      nativeTokenAmount: isSet(object.nativeTokenAmount) ? gt.String(object.nativeTokenAmount) : "",
      denom: isSet(object.denom) ? gt.String(object.denom) : "",
      hostZoneId: isSet(object.hostZoneId) ? gt.String(object.hostZoneId) : "",
      epochNumber: isSet(object.epochNumber) ? gt.Number(object.epochNumber) : 0,
      claimIsPending: isSet(object.claimIsPending) ? gt.Boolean(object.claimIsPending) : false,
      stTokenAmount: isSet(object.stTokenAmount) ? gt.String(object.stTokenAmount) : "",
    };
  },

  toJSON(message: UserRedemptionRecord): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.receiver !== "") {
      obj.receiver = message.receiver;
    }
    if (message.nativeTokenAmount !== "") {
      obj.nativeTokenAmount = message.nativeTokenAmount;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.hostZoneId !== "") {
      obj.hostZoneId = message.hostZoneId;
    }
    if (message.epochNumber !== 0) {
      obj.epochNumber = Math.round(message.epochNumber);
    }
    if (message.claimIsPending !== false) {
      obj.claimIsPending = message.claimIsPending;
    }
    if (message.stTokenAmount !== "") {
      obj.stTokenAmount = message.stTokenAmount;
    }
    return obj;
  },

  create(base?: DeepPartial<UserRedemptionRecord>): UserRedemptionRecord {
    return UserRedemptionRecord.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserRedemptionRecord>): UserRedemptionRecord {
    const message = createBaseUserRedemptionRecord();
    message.id = object.id ?? "";
    message.receiver = object.receiver ?? "";
    message.nativeTokenAmount = object.nativeTokenAmount ?? "";
    message.denom = object.denom ?? "";
    message.hostZoneId = object.hostZoneId ?? "";
    message.epochNumber = object.epochNumber ?? 0;
    message.claimIsPending = object.claimIsPending ?? false;
    message.stTokenAmount = object.stTokenAmount ?? "";
    return message;
  },
};

function createBaseDepositRecord(): DepositRecord {
  return { id: 0, amount: "", denom: "", hostZoneId: "", status: 0, depositEpochNumber: 0, source: 0 };
}

export const DepositRecord = {
  encode(message: DepositRecord, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.amount !== "") {
      writer.uint32(18).string(message.amount);
    }
    if (message.denom !== "") {
      writer.uint32(26).string(message.denom);
    }
    if (message.hostZoneId !== "") {
      writer.uint32(34).string(message.hostZoneId);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    if (message.depositEpochNumber !== 0) {
      writer.uint32(56).uint64(message.depositEpochNumber);
    }
    if (message.source !== 0) {
      writer.uint32(64).int32(message.source);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DepositRecord {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDepositRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.amount = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.denom = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.hostZoneId = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.depositEpochNumber = longToNumber(reader.uint64() as Long);
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.source = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DepositRecord {
    return {
      id: isSet(object.id) ? gt.Number(object.id) : 0,
      amount: isSet(object.amount) ? gt.String(object.amount) : "",
      denom: isSet(object.denom) ? gt.String(object.denom) : "",
      hostZoneId: isSet(object.hostZoneId) ? gt.String(object.hostZoneId) : "",
      status: isSet(object.status) ? depositRecord_StatusFromJSON(object.status) : 0,
      depositEpochNumber: isSet(object.depositEpochNumber) ? gt.Number(object.depositEpochNumber) : 0,
      source: isSet(object.source) ? depositRecord_SourceFromJSON(object.source) : 0,
    };
  },

  toJSON(message: DepositRecord): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.hostZoneId !== "") {
      obj.hostZoneId = message.hostZoneId;
    }
    if (message.status !== 0) {
      obj.status = depositRecord_StatusToJSON(message.status);
    }
    if (message.depositEpochNumber !== 0) {
      obj.depositEpochNumber = Math.round(message.depositEpochNumber);
    }
    if (message.source !== 0) {
      obj.source = depositRecord_SourceToJSON(message.source);
    }
    return obj;
  },

  create(base?: DeepPartial<DepositRecord>): DepositRecord {
    return DepositRecord.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DepositRecord>): DepositRecord {
    const message = createBaseDepositRecord();
    message.id = object.id ?? 0;
    message.amount = object.amount ?? "";
    message.denom = object.denom ?? "";
    message.hostZoneId = object.hostZoneId ?? "";
    message.status = object.status ?? 0;
    message.depositEpochNumber = object.depositEpochNumber ?? 0;
    message.source = object.source ?? 0;
    return message;
  },
};

function createBaseHostZoneUnbonding(): HostZoneUnbonding {
  return {
    stTokenAmount: "",
    nativeTokenAmount: "",
    denom: "",
    hostZoneId: "",
    unbondingTime: 0,
    status: 0,
    userRedemptionRecords: [],
  };
}

export const HostZoneUnbonding = {
  encode(message: HostZoneUnbonding, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.stTokenAmount !== "") {
      writer.uint32(10).string(message.stTokenAmount);
    }
    if (message.nativeTokenAmount !== "") {
      writer.uint32(18).string(message.nativeTokenAmount);
    }
    if (message.denom !== "") {
      writer.uint32(26).string(message.denom);
    }
    if (message.hostZoneId !== "") {
      writer.uint32(34).string(message.hostZoneId);
    }
    if (message.unbondingTime !== 0) {
      writer.uint32(40).uint64(message.unbondingTime);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    for (const v of message.userRedemptionRecords) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HostZoneUnbonding {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHostZoneUnbonding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.stTokenAmount = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nativeTokenAmount = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.denom = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.hostZoneId = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.unbondingTime = longToNumber(reader.uint64() as Long);
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.userRedemptionRecords.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HostZoneUnbonding {
    return {
      stTokenAmount: isSet(object.stTokenAmount) ? gt.String(object.stTokenAmount) : "",
      nativeTokenAmount: isSet(object.nativeTokenAmount) ? gt.String(object.nativeTokenAmount) : "",
      denom: isSet(object.denom) ? gt.String(object.denom) : "",
      hostZoneId: isSet(object.hostZoneId) ? gt.String(object.hostZoneId) : "",
      unbondingTime: isSet(object.unbondingTime) ? gt.Number(object.unbondingTime) : 0,
      status: isSet(object.status) ? hostZoneUnbonding_StatusFromJSON(object.status) : 0,
      userRedemptionRecords: gt.Array.isArray(object?.userRedemptionRecords)
        ? object.userRedemptionRecords.map((e: any) => gt.String(e))
        : [],
    };
  },

  toJSON(message: HostZoneUnbonding): unknown {
    const obj: any = {};
    if (message.stTokenAmount !== "") {
      obj.stTokenAmount = message.stTokenAmount;
    }
    if (message.nativeTokenAmount !== "") {
      obj.nativeTokenAmount = message.nativeTokenAmount;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.hostZoneId !== "") {
      obj.hostZoneId = message.hostZoneId;
    }
    if (message.unbondingTime !== 0) {
      obj.unbondingTime = Math.round(message.unbondingTime);
    }
    if (message.status !== 0) {
      obj.status = hostZoneUnbonding_StatusToJSON(message.status);
    }
    if (message.userRedemptionRecords?.length) {
      obj.userRedemptionRecords = message.userRedemptionRecords;
    }
    return obj;
  },

  create(base?: DeepPartial<HostZoneUnbonding>): HostZoneUnbonding {
    return HostZoneUnbonding.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HostZoneUnbonding>): HostZoneUnbonding {
    const message = createBaseHostZoneUnbonding();
    message.stTokenAmount = object.stTokenAmount ?? "";
    message.nativeTokenAmount = object.nativeTokenAmount ?? "";
    message.denom = object.denom ?? "";
    message.hostZoneId = object.hostZoneId ?? "";
    message.unbondingTime = object.unbondingTime ?? 0;
    message.status = object.status ?? 0;
    message.userRedemptionRecords = object.userRedemptionRecords?.map((e) => e) || [];
    return message;
  },
};

function createBaseEpochUnbondingRecord(): EpochUnbondingRecord {
  return { epochNumber: 0, hostZoneUnbondings: [] };
}

export const EpochUnbondingRecord = {
  encode(message: EpochUnbondingRecord, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.epochNumber !== 0) {
      writer.uint32(8).uint64(message.epochNumber);
    }
    for (const v of message.hostZoneUnbondings) {
      HostZoneUnbonding.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EpochUnbondingRecord {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEpochUnbondingRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.epochNumber = longToNumber(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hostZoneUnbondings.push(HostZoneUnbonding.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EpochUnbondingRecord {
    return {
      epochNumber: isSet(object.epochNumber) ? gt.Number(object.epochNumber) : 0,
      hostZoneUnbondings: gt.Array.isArray(object?.hostZoneUnbondings)
        ? object.hostZoneUnbondings.map((e: any) => HostZoneUnbonding.fromJSON(e))
        : [],
    };
  },

  toJSON(message: EpochUnbondingRecord): unknown {
    const obj: any = {};
    if (message.epochNumber !== 0) {
      obj.epochNumber = Math.round(message.epochNumber);
    }
    if (message.hostZoneUnbondings?.length) {
      obj.hostZoneUnbondings = message.hostZoneUnbondings.map((e) => HostZoneUnbonding.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<EpochUnbondingRecord>): EpochUnbondingRecord {
    return EpochUnbondingRecord.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EpochUnbondingRecord>): EpochUnbondingRecord {
    const message = createBaseEpochUnbondingRecord();
    message.epochNumber = object.epochNumber ?? 0;
    message.hostZoneUnbondings = object.hostZoneUnbondings?.map((e) => HostZoneUnbonding.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLSMTokenDeposit(): LSMTokenDeposit {
  return {
    depositId: "",
    chainId: "",
    denom: "",
    ibcDenom: "",
    stakerAddress: "",
    validatorAddress: "",
    amount: "",
    stToken: undefined,
    status: 0,
  };
}

export const LSMTokenDeposit = {
  encode(message: LSMTokenDeposit, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.depositId !== "") {
      writer.uint32(10).string(message.depositId);
    }
    if (message.chainId !== "") {
      writer.uint32(18).string(message.chainId);
    }
    if (message.denom !== "") {
      writer.uint32(26).string(message.denom);
    }
    if (message.ibcDenom !== "") {
      writer.uint32(34).string(message.ibcDenom);
    }
    if (message.stakerAddress !== "") {
      writer.uint32(42).string(message.stakerAddress);
    }
    if (message.validatorAddress !== "") {
      writer.uint32(50).string(message.validatorAddress);
    }
    if (message.amount !== "") {
      writer.uint32(58).string(message.amount);
    }
    if (message.stToken !== undefined) {
      Coin.encode(message.stToken, writer.uint32(66).fork()).ldelim();
    }
    if (message.status !== 0) {
      writer.uint32(72).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LSMTokenDeposit {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLSMTokenDeposit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.depositId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chainId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.denom = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.ibcDenom = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.stakerAddress = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.validatorAddress = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.amount = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.stToken = Coin.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LSMTokenDeposit {
    return {
      depositId: isSet(object.depositId) ? gt.String(object.depositId) : "",
      chainId: isSet(object.chainId) ? gt.String(object.chainId) : "",
      denom: isSet(object.denom) ? gt.String(object.denom) : "",
      ibcDenom: isSet(object.ibcDenom) ? gt.String(object.ibcDenom) : "",
      stakerAddress: isSet(object.stakerAddress) ? gt.String(object.stakerAddress) : "",
      validatorAddress: isSet(object.validatorAddress) ? gt.String(object.validatorAddress) : "",
      amount: isSet(object.amount) ? gt.String(object.amount) : "",
      stToken: isSet(object.stToken) ? Coin.fromJSON(object.stToken) : undefined,
      status: isSet(object.status) ? lSMTokenDeposit_StatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: LSMTokenDeposit): unknown {
    const obj: any = {};
    if (message.depositId !== "") {
      obj.depositId = message.depositId;
    }
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.ibcDenom !== "") {
      obj.ibcDenom = message.ibcDenom;
    }
    if (message.stakerAddress !== "") {
      obj.stakerAddress = message.stakerAddress;
    }
    if (message.validatorAddress !== "") {
      obj.validatorAddress = message.validatorAddress;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.stToken !== undefined) {
      obj.stToken = Coin.toJSON(message.stToken);
    }
    if (message.status !== 0) {
      obj.status = lSMTokenDeposit_StatusToJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<LSMTokenDeposit>): LSMTokenDeposit {
    return LSMTokenDeposit.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LSMTokenDeposit>): LSMTokenDeposit {
    const message = createBaseLSMTokenDeposit();
    message.depositId = object.depositId ?? "";
    message.chainId = object.chainId ?? "";
    message.denom = object.denom ?? "";
    message.ibcDenom = object.ibcDenom ?? "";
    message.stakerAddress = object.stakerAddress ?? "";
    message.validatorAddress = object.validatorAddress ?? "";
    message.amount = object.amount ?? "";
    message.stToken = (object.stToken !== undefined && object.stToken !== null)
      ? Coin.fromPartial(object.stToken)
      : undefined;
    message.status = object.status ?? 0;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(long: Long): number {
  if (long.gt(gt.Number.MAX_SAFE_INTEGER)) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(gt.Number.MIN_SAFE_INTEGER)) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
