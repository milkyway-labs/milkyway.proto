// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: stride/stakeibc/callbacks.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { LSMTokenDeposit } from "../records/records";
import { HostZone } from "./host_zone";
import { ICAAccountType, iCAAccountTypeFromJSON, iCAAccountTypeToJSON } from "./ica_account";
import { Validator } from "./validator";
import Long = require("long");

export const protobufPackage = "stride.stakeibc";

export interface SplitDelegation {
  validator: string;
  amount: string;
}

export interface DelegateCallback {
  hostZoneId: string;
  depositRecordId: number;
  splitDelegations: SplitDelegation[];
}

export interface ClaimCallback {
  userRedemptionRecordId: string;
  chainId: string;
  epochNumber: number;
}

export interface ReinvestCallback {
  reinvestAmount: Coin | undefined;
  hostZoneId: string;
}

export interface UndelegateCallback {
  hostZoneId: string;
  splitDelegations: SplitDelegation[];
  epochUnbondingRecordIds: number[];
}

export interface RedemptionCallback {
  hostZoneId: string;
  epochUnbondingRecordIds: number[];
}

export interface Rebalancing {
  srcValidator: string;
  dstValidator: string;
  amt: string;
}

export interface RebalanceCallback {
  hostZoneId: string;
  rebalancings: Rebalancing[];
}

export interface DetokenizeSharesCallback {
  deposit: LSMTokenDeposit | undefined;
}

export interface LSMLiquidStake {
  deposit: LSMTokenDeposit | undefined;
  hostZone: HostZone | undefined;
  validator: Validator | undefined;
}

export interface ValidatorSharesToTokensQueryCallback {
  lsmLiquidStake: LSMLiquidStake | undefined;
}

export interface DelegatorSharesQueryCallback {
  /** Validator delegation at the time the query is submitted */
  initialValidatorDelegation: string;
}

export interface CommunityPoolBalanceQueryCallback {
  icaType: ICAAccountType;
  denom: string;
}

export interface TradeRouteCallback {
  rewardDenom: string;
  hostDenom: string;
}

function createBaseSplitDelegation(): SplitDelegation {
  return { validator: "", amount: "" };
}

export const SplitDelegation = {
  encode(message: SplitDelegation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.validator !== "") {
      writer.uint32(10).string(message.validator);
    }
    if (message.amount !== "") {
      writer.uint32(18).string(message.amount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SplitDelegation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSplitDelegation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.validator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.amount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SplitDelegation {
    return {
      validator: isSet(object.validator) ? gt.String(object.validator) : "",
      amount: isSet(object.amount) ? gt.String(object.amount) : "",
    };
  },

  toJSON(message: SplitDelegation): unknown {
    const obj: any = {};
    if (message.validator !== "") {
      obj.validator = message.validator;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<SplitDelegation>): SplitDelegation {
    return SplitDelegation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SplitDelegation>): SplitDelegation {
    const message = createBaseSplitDelegation();
    message.validator = object.validator ?? "";
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseDelegateCallback(): DelegateCallback {
  return { hostZoneId: "", depositRecordId: 0, splitDelegations: [] };
}

export const DelegateCallback = {
  encode(message: DelegateCallback, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hostZoneId !== "") {
      writer.uint32(10).string(message.hostZoneId);
    }
    if (message.depositRecordId !== 0) {
      writer.uint32(16).uint64(message.depositRecordId);
    }
    for (const v of message.splitDelegations) {
      SplitDelegation.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DelegateCallback {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDelegateCallback();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hostZoneId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.depositRecordId = longToNumber(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.splitDelegations.push(SplitDelegation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DelegateCallback {
    return {
      hostZoneId: isSet(object.hostZoneId) ? gt.String(object.hostZoneId) : "",
      depositRecordId: isSet(object.depositRecordId) ? gt.Number(object.depositRecordId) : 0,
      splitDelegations: gt.Array.isArray(object?.splitDelegations)
        ? object.splitDelegations.map((e: any) => SplitDelegation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DelegateCallback): unknown {
    const obj: any = {};
    if (message.hostZoneId !== "") {
      obj.hostZoneId = message.hostZoneId;
    }
    if (message.depositRecordId !== 0) {
      obj.depositRecordId = Math.round(message.depositRecordId);
    }
    if (message.splitDelegations?.length) {
      obj.splitDelegations = message.splitDelegations.map((e) => SplitDelegation.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DelegateCallback>): DelegateCallback {
    return DelegateCallback.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DelegateCallback>): DelegateCallback {
    const message = createBaseDelegateCallback();
    message.hostZoneId = object.hostZoneId ?? "";
    message.depositRecordId = object.depositRecordId ?? 0;
    message.splitDelegations = object.splitDelegations?.map((e) => SplitDelegation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseClaimCallback(): ClaimCallback {
  return { userRedemptionRecordId: "", chainId: "", epochNumber: 0 };
}

export const ClaimCallback = {
  encode(message: ClaimCallback, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userRedemptionRecordId !== "") {
      writer.uint32(10).string(message.userRedemptionRecordId);
    }
    if (message.chainId !== "") {
      writer.uint32(18).string(message.chainId);
    }
    if (message.epochNumber !== 0) {
      writer.uint32(24).uint64(message.epochNumber);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClaimCallback {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClaimCallback();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userRedemptionRecordId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chainId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.epochNumber = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClaimCallback {
    return {
      userRedemptionRecordId: isSet(object.userRedemptionRecordId) ? gt.String(object.userRedemptionRecordId) : "",
      chainId: isSet(object.chainId) ? gt.String(object.chainId) : "",
      epochNumber: isSet(object.epochNumber) ? gt.Number(object.epochNumber) : 0,
    };
  },

  toJSON(message: ClaimCallback): unknown {
    const obj: any = {};
    if (message.userRedemptionRecordId !== "") {
      obj.userRedemptionRecordId = message.userRedemptionRecordId;
    }
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.epochNumber !== 0) {
      obj.epochNumber = Math.round(message.epochNumber);
    }
    return obj;
  },

  create(base?: DeepPartial<ClaimCallback>): ClaimCallback {
    return ClaimCallback.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClaimCallback>): ClaimCallback {
    const message = createBaseClaimCallback();
    message.userRedemptionRecordId = object.userRedemptionRecordId ?? "";
    message.chainId = object.chainId ?? "";
    message.epochNumber = object.epochNumber ?? 0;
    return message;
  },
};

function createBaseReinvestCallback(): ReinvestCallback {
  return { reinvestAmount: undefined, hostZoneId: "" };
}

export const ReinvestCallback = {
  encode(message: ReinvestCallback, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reinvestAmount !== undefined) {
      Coin.encode(message.reinvestAmount, writer.uint32(10).fork()).ldelim();
    }
    if (message.hostZoneId !== "") {
      writer.uint32(26).string(message.hostZoneId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReinvestCallback {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReinvestCallback();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reinvestAmount = Coin.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hostZoneId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReinvestCallback {
    return {
      reinvestAmount: isSet(object.reinvestAmount) ? Coin.fromJSON(object.reinvestAmount) : undefined,
      hostZoneId: isSet(object.hostZoneId) ? gt.String(object.hostZoneId) : "",
    };
  },

  toJSON(message: ReinvestCallback): unknown {
    const obj: any = {};
    if (message.reinvestAmount !== undefined) {
      obj.reinvestAmount = Coin.toJSON(message.reinvestAmount);
    }
    if (message.hostZoneId !== "") {
      obj.hostZoneId = message.hostZoneId;
    }
    return obj;
  },

  create(base?: DeepPartial<ReinvestCallback>): ReinvestCallback {
    return ReinvestCallback.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReinvestCallback>): ReinvestCallback {
    const message = createBaseReinvestCallback();
    message.reinvestAmount = (object.reinvestAmount !== undefined && object.reinvestAmount !== null)
      ? Coin.fromPartial(object.reinvestAmount)
      : undefined;
    message.hostZoneId = object.hostZoneId ?? "";
    return message;
  },
};

function createBaseUndelegateCallback(): UndelegateCallback {
  return { hostZoneId: "", splitDelegations: [], epochUnbondingRecordIds: [] };
}

export const UndelegateCallback = {
  encode(message: UndelegateCallback, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hostZoneId !== "") {
      writer.uint32(10).string(message.hostZoneId);
    }
    for (const v of message.splitDelegations) {
      SplitDelegation.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    writer.uint32(26).fork();
    for (const v of message.epochUnbondingRecordIds) {
      writer.uint64(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UndelegateCallback {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndelegateCallback();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hostZoneId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.splitDelegations.push(SplitDelegation.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag === 24) {
            message.epochUnbondingRecordIds.push(longToNumber(reader.uint64() as Long));

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.epochUnbondingRecordIds.push(longToNumber(reader.uint64() as Long));
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndelegateCallback {
    return {
      hostZoneId: isSet(object.hostZoneId) ? gt.String(object.hostZoneId) : "",
      splitDelegations: gt.Array.isArray(object?.splitDelegations)
        ? object.splitDelegations.map((e: any) => SplitDelegation.fromJSON(e))
        : [],
      epochUnbondingRecordIds: gt.Array.isArray(object?.epochUnbondingRecordIds)
        ? object.epochUnbondingRecordIds.map((e: any) => gt.Number(e))
        : [],
    };
  },

  toJSON(message: UndelegateCallback): unknown {
    const obj: any = {};
    if (message.hostZoneId !== "") {
      obj.hostZoneId = message.hostZoneId;
    }
    if (message.splitDelegations?.length) {
      obj.splitDelegations = message.splitDelegations.map((e) => SplitDelegation.toJSON(e));
    }
    if (message.epochUnbondingRecordIds?.length) {
      obj.epochUnbondingRecordIds = message.epochUnbondingRecordIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<UndelegateCallback>): UndelegateCallback {
    return UndelegateCallback.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndelegateCallback>): UndelegateCallback {
    const message = createBaseUndelegateCallback();
    message.hostZoneId = object.hostZoneId ?? "";
    message.splitDelegations = object.splitDelegations?.map((e) => SplitDelegation.fromPartial(e)) || [];
    message.epochUnbondingRecordIds = object.epochUnbondingRecordIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseRedemptionCallback(): RedemptionCallback {
  return { hostZoneId: "", epochUnbondingRecordIds: [] };
}

export const RedemptionCallback = {
  encode(message: RedemptionCallback, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hostZoneId !== "") {
      writer.uint32(10).string(message.hostZoneId);
    }
    writer.uint32(18).fork();
    for (const v of message.epochUnbondingRecordIds) {
      writer.uint64(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RedemptionCallback {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRedemptionCallback();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hostZoneId = reader.string();
          continue;
        case 2:
          if (tag === 16) {
            message.epochUnbondingRecordIds.push(longToNumber(reader.uint64() as Long));

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.epochUnbondingRecordIds.push(longToNumber(reader.uint64() as Long));
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RedemptionCallback {
    return {
      hostZoneId: isSet(object.hostZoneId) ? gt.String(object.hostZoneId) : "",
      epochUnbondingRecordIds: gt.Array.isArray(object?.epochUnbondingRecordIds)
        ? object.epochUnbondingRecordIds.map((e: any) => gt.Number(e))
        : [],
    };
  },

  toJSON(message: RedemptionCallback): unknown {
    const obj: any = {};
    if (message.hostZoneId !== "") {
      obj.hostZoneId = message.hostZoneId;
    }
    if (message.epochUnbondingRecordIds?.length) {
      obj.epochUnbondingRecordIds = message.epochUnbondingRecordIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RedemptionCallback>): RedemptionCallback {
    return RedemptionCallback.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RedemptionCallback>): RedemptionCallback {
    const message = createBaseRedemptionCallback();
    message.hostZoneId = object.hostZoneId ?? "";
    message.epochUnbondingRecordIds = object.epochUnbondingRecordIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseRebalancing(): Rebalancing {
  return { srcValidator: "", dstValidator: "", amt: "" };
}

export const Rebalancing = {
  encode(message: Rebalancing, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.srcValidator !== "") {
      writer.uint32(10).string(message.srcValidator);
    }
    if (message.dstValidator !== "") {
      writer.uint32(18).string(message.dstValidator);
    }
    if (message.amt !== "") {
      writer.uint32(26).string(message.amt);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Rebalancing {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRebalancing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.srcValidator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.dstValidator = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.amt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Rebalancing {
    return {
      srcValidator: isSet(object.srcValidator) ? gt.String(object.srcValidator) : "",
      dstValidator: isSet(object.dstValidator) ? gt.String(object.dstValidator) : "",
      amt: isSet(object.amt) ? gt.String(object.amt) : "",
    };
  },

  toJSON(message: Rebalancing): unknown {
    const obj: any = {};
    if (message.srcValidator !== "") {
      obj.srcValidator = message.srcValidator;
    }
    if (message.dstValidator !== "") {
      obj.dstValidator = message.dstValidator;
    }
    if (message.amt !== "") {
      obj.amt = message.amt;
    }
    return obj;
  },

  create(base?: DeepPartial<Rebalancing>): Rebalancing {
    return Rebalancing.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Rebalancing>): Rebalancing {
    const message = createBaseRebalancing();
    message.srcValidator = object.srcValidator ?? "";
    message.dstValidator = object.dstValidator ?? "";
    message.amt = object.amt ?? "";
    return message;
  },
};

function createBaseRebalanceCallback(): RebalanceCallback {
  return { hostZoneId: "", rebalancings: [] };
}

export const RebalanceCallback = {
  encode(message: RebalanceCallback, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hostZoneId !== "") {
      writer.uint32(10).string(message.hostZoneId);
    }
    for (const v of message.rebalancings) {
      Rebalancing.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RebalanceCallback {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRebalanceCallback();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hostZoneId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rebalancings.push(Rebalancing.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RebalanceCallback {
    return {
      hostZoneId: isSet(object.hostZoneId) ? gt.String(object.hostZoneId) : "",
      rebalancings: gt.Array.isArray(object?.rebalancings)
        ? object.rebalancings.map((e: any) => Rebalancing.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RebalanceCallback): unknown {
    const obj: any = {};
    if (message.hostZoneId !== "") {
      obj.hostZoneId = message.hostZoneId;
    }
    if (message.rebalancings?.length) {
      obj.rebalancings = message.rebalancings.map((e) => Rebalancing.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RebalanceCallback>): RebalanceCallback {
    return RebalanceCallback.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RebalanceCallback>): RebalanceCallback {
    const message = createBaseRebalanceCallback();
    message.hostZoneId = object.hostZoneId ?? "";
    message.rebalancings = object.rebalancings?.map((e) => Rebalancing.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDetokenizeSharesCallback(): DetokenizeSharesCallback {
  return { deposit: undefined };
}

export const DetokenizeSharesCallback = {
  encode(message: DetokenizeSharesCallback, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deposit !== undefined) {
      LSMTokenDeposit.encode(message.deposit, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DetokenizeSharesCallback {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetokenizeSharesCallback();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deposit = LSMTokenDeposit.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DetokenizeSharesCallback {
    return { deposit: isSet(object.deposit) ? LSMTokenDeposit.fromJSON(object.deposit) : undefined };
  },

  toJSON(message: DetokenizeSharesCallback): unknown {
    const obj: any = {};
    if (message.deposit !== undefined) {
      obj.deposit = LSMTokenDeposit.toJSON(message.deposit);
    }
    return obj;
  },

  create(base?: DeepPartial<DetokenizeSharesCallback>): DetokenizeSharesCallback {
    return DetokenizeSharesCallback.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DetokenizeSharesCallback>): DetokenizeSharesCallback {
    const message = createBaseDetokenizeSharesCallback();
    message.deposit = (object.deposit !== undefined && object.deposit !== null)
      ? LSMTokenDeposit.fromPartial(object.deposit)
      : undefined;
    return message;
  },
};

function createBaseLSMLiquidStake(): LSMLiquidStake {
  return { deposit: undefined, hostZone: undefined, validator: undefined };
}

export const LSMLiquidStake = {
  encode(message: LSMLiquidStake, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deposit !== undefined) {
      LSMTokenDeposit.encode(message.deposit, writer.uint32(10).fork()).ldelim();
    }
    if (message.hostZone !== undefined) {
      HostZone.encode(message.hostZone, writer.uint32(18).fork()).ldelim();
    }
    if (message.validator !== undefined) {
      Validator.encode(message.validator, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LSMLiquidStake {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLSMLiquidStake();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deposit = LSMTokenDeposit.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hostZone = HostZone.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.validator = Validator.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LSMLiquidStake {
    return {
      deposit: isSet(object.deposit) ? LSMTokenDeposit.fromJSON(object.deposit) : undefined,
      hostZone: isSet(object.hostZone) ? HostZone.fromJSON(object.hostZone) : undefined,
      validator: isSet(object.validator) ? Validator.fromJSON(object.validator) : undefined,
    };
  },

  toJSON(message: LSMLiquidStake): unknown {
    const obj: any = {};
    if (message.deposit !== undefined) {
      obj.deposit = LSMTokenDeposit.toJSON(message.deposit);
    }
    if (message.hostZone !== undefined) {
      obj.hostZone = HostZone.toJSON(message.hostZone);
    }
    if (message.validator !== undefined) {
      obj.validator = Validator.toJSON(message.validator);
    }
    return obj;
  },

  create(base?: DeepPartial<LSMLiquidStake>): LSMLiquidStake {
    return LSMLiquidStake.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LSMLiquidStake>): LSMLiquidStake {
    const message = createBaseLSMLiquidStake();
    message.deposit = (object.deposit !== undefined && object.deposit !== null)
      ? LSMTokenDeposit.fromPartial(object.deposit)
      : undefined;
    message.hostZone = (object.hostZone !== undefined && object.hostZone !== null)
      ? HostZone.fromPartial(object.hostZone)
      : undefined;
    message.validator = (object.validator !== undefined && object.validator !== null)
      ? Validator.fromPartial(object.validator)
      : undefined;
    return message;
  },
};

function createBaseValidatorSharesToTokensQueryCallback(): ValidatorSharesToTokensQueryCallback {
  return { lsmLiquidStake: undefined };
}

export const ValidatorSharesToTokensQueryCallback = {
  encode(message: ValidatorSharesToTokensQueryCallback, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.lsmLiquidStake !== undefined) {
      LSMLiquidStake.encode(message.lsmLiquidStake, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ValidatorSharesToTokensQueryCallback {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidatorSharesToTokensQueryCallback();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.lsmLiquidStake = LSMLiquidStake.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidatorSharesToTokensQueryCallback {
    return {
      lsmLiquidStake: isSet(object.lsmLiquidStake) ? LSMLiquidStake.fromJSON(object.lsmLiquidStake) : undefined,
    };
  },

  toJSON(message: ValidatorSharesToTokensQueryCallback): unknown {
    const obj: any = {};
    if (message.lsmLiquidStake !== undefined) {
      obj.lsmLiquidStake = LSMLiquidStake.toJSON(message.lsmLiquidStake);
    }
    return obj;
  },

  create(base?: DeepPartial<ValidatorSharesToTokensQueryCallback>): ValidatorSharesToTokensQueryCallback {
    return ValidatorSharesToTokensQueryCallback.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidatorSharesToTokensQueryCallback>): ValidatorSharesToTokensQueryCallback {
    const message = createBaseValidatorSharesToTokensQueryCallback();
    message.lsmLiquidStake = (object.lsmLiquidStake !== undefined && object.lsmLiquidStake !== null)
      ? LSMLiquidStake.fromPartial(object.lsmLiquidStake)
      : undefined;
    return message;
  },
};

function createBaseDelegatorSharesQueryCallback(): DelegatorSharesQueryCallback {
  return { initialValidatorDelegation: "" };
}

export const DelegatorSharesQueryCallback = {
  encode(message: DelegatorSharesQueryCallback, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.initialValidatorDelegation !== "") {
      writer.uint32(10).string(message.initialValidatorDelegation);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DelegatorSharesQueryCallback {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDelegatorSharesQueryCallback();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.initialValidatorDelegation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DelegatorSharesQueryCallback {
    return {
      initialValidatorDelegation: isSet(object.initialValidatorDelegation)
        ? gt.String(object.initialValidatorDelegation)
        : "",
    };
  },

  toJSON(message: DelegatorSharesQueryCallback): unknown {
    const obj: any = {};
    if (message.initialValidatorDelegation !== "") {
      obj.initialValidatorDelegation = message.initialValidatorDelegation;
    }
    return obj;
  },

  create(base?: DeepPartial<DelegatorSharesQueryCallback>): DelegatorSharesQueryCallback {
    return DelegatorSharesQueryCallback.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DelegatorSharesQueryCallback>): DelegatorSharesQueryCallback {
    const message = createBaseDelegatorSharesQueryCallback();
    message.initialValidatorDelegation = object.initialValidatorDelegation ?? "";
    return message;
  },
};

function createBaseCommunityPoolBalanceQueryCallback(): CommunityPoolBalanceQueryCallback {
  return { icaType: 0, denom: "" };
}

export const CommunityPoolBalanceQueryCallback = {
  encode(message: CommunityPoolBalanceQueryCallback, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.icaType !== 0) {
      writer.uint32(8).int32(message.icaType);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CommunityPoolBalanceQueryCallback {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommunityPoolBalanceQueryCallback();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.icaType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommunityPoolBalanceQueryCallback {
    return {
      icaType: isSet(object.icaType) ? iCAAccountTypeFromJSON(object.icaType) : 0,
      denom: isSet(object.denom) ? gt.String(object.denom) : "",
    };
  },

  toJSON(message: CommunityPoolBalanceQueryCallback): unknown {
    const obj: any = {};
    if (message.icaType !== 0) {
      obj.icaType = iCAAccountTypeToJSON(message.icaType);
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    return obj;
  },

  create(base?: DeepPartial<CommunityPoolBalanceQueryCallback>): CommunityPoolBalanceQueryCallback {
    return CommunityPoolBalanceQueryCallback.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CommunityPoolBalanceQueryCallback>): CommunityPoolBalanceQueryCallback {
    const message = createBaseCommunityPoolBalanceQueryCallback();
    message.icaType = object.icaType ?? 0;
    message.denom = object.denom ?? "";
    return message;
  },
};

function createBaseTradeRouteCallback(): TradeRouteCallback {
  return { rewardDenom: "", hostDenom: "" };
}

export const TradeRouteCallback = {
  encode(message: TradeRouteCallback, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.rewardDenom !== "") {
      writer.uint32(10).string(message.rewardDenom);
    }
    if (message.hostDenom !== "") {
      writer.uint32(18).string(message.hostDenom);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TradeRouteCallback {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTradeRouteCallback();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rewardDenom = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hostDenom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TradeRouteCallback {
    return {
      rewardDenom: isSet(object.rewardDenom) ? gt.String(object.rewardDenom) : "",
      hostDenom: isSet(object.hostDenom) ? gt.String(object.hostDenom) : "",
    };
  },

  toJSON(message: TradeRouteCallback): unknown {
    const obj: any = {};
    if (message.rewardDenom !== "") {
      obj.rewardDenom = message.rewardDenom;
    }
    if (message.hostDenom !== "") {
      obj.hostDenom = message.hostDenom;
    }
    return obj;
  },

  create(base?: DeepPartial<TradeRouteCallback>): TradeRouteCallback {
    return TradeRouteCallback.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TradeRouteCallback>): TradeRouteCallback {
    const message = createBaseTradeRouteCallback();
    message.rewardDenom = object.rewardDenom ?? "";
    message.hostDenom = object.hostDenom ?? "";
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(long: Long): number {
  if (long.gt(gt.Number.MAX_SAFE_INTEGER)) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(gt.Number.MIN_SAFE_INTEGER)) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
