// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: stride/stakeibc/tx.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { Params } from "./params";
import { Validator } from "./validator";
import Long = require("long");

export const protobufPackage = "stride.stakeibc";

export enum AuthzPermissionChange {
  /** GRANT - Grant the address trade permissions */
  GRANT = 0,
  /** REVOKE - Revoke trade permissions from the address */
  REVOKE = 1,
  UNRECOGNIZED = -1,
}

export function authzPermissionChangeFromJSON(object: any): AuthzPermissionChange {
  switch (object) {
    case 0:
    case "GRANT":
      return AuthzPermissionChange.GRANT;
    case 1:
    case "REVOKE":
      return AuthzPermissionChange.REVOKE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AuthzPermissionChange.UNRECOGNIZED;
  }
}

export function authzPermissionChangeToJSON(object: AuthzPermissionChange): string {
  switch (object) {
    case AuthzPermissionChange.GRANT:
      return "GRANT";
    case AuthzPermissionChange.REVOKE:
      return "REVOKE";
    case AuthzPermissionChange.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface MsgUpdateInnerRedemptionRateBounds {
  creator: string;
  chainId: string;
  minInnerRedemptionRate: string;
  maxInnerRedemptionRate: string;
}

export interface MsgUpdateInnerRedemptionRateBoundsResponse {
}

export interface MsgLiquidStake {
  creator: string;
  amount: string;
  hostDenom: string;
}

export interface MsgLiquidStakeResponse {
  stToken: Coin | undefined;
}

export interface MsgLSMLiquidStake {
  creator: string;
  amount: string;
  lsmTokenIbcDenom: string;
}

export interface MsgLSMLiquidStakeResponse {
  transactionComplete: boolean;
}

export interface MsgClearBalance {
  creator: string;
  chainId: string;
  amount: string;
  channel: string;
}

export interface MsgClearBalanceResponse {
}

export interface MsgRedeemStake {
  creator: string;
  amount: string;
  hostZone: string;
  receiver: string;
}

export interface MsgRedeemStakeResponse {
}

/** next: 15 */
export interface MsgRegisterHostZone {
  connectionId: string;
  bech32prefix: string;
  hostDenom: string;
  ibcDenom: string;
  creator: string;
  transferChannelId: string;
  unbondingPeriod: number;
  minRedemptionRate: string;
  maxRedemptionRate: string;
  lsmLiquidStakeEnabled: boolean;
  communityPoolTreasuryAddress: string;
  maxMessagesPerIcaTx: number;
}

export interface MsgRegisterHostZoneResponse {
}

export interface MsgClaimUndelegatedTokens {
  creator: string;
  /** UserUnbondingRecords are keyed on {chain_id}.{epoch}.{receiver} */
  hostZoneId: string;
  epoch: number;
  receiver: string;
}

export interface MsgClaimUndelegatedTokensResponse {
}

export interface MsgRebalanceValidators {
  creator: string;
  hostZone: string;
  numRebalance: number;
}

export interface MsgRebalanceValidatorsResponse {
}

export interface MsgAddValidators {
  creator: string;
  hostZone: string;
  validators: Validator[];
}

export interface MsgAddValidatorsResponse {
}

export interface ValidatorWeight {
  address: string;
  weight: number;
}

export interface MsgChangeValidatorWeights {
  creator: string;
  hostZone: string;
  validatorWeights: ValidatorWeight[];
}

export interface MsgChangeValidatorWeightsResponse {
}

export interface MsgDeleteValidator {
  creator: string;
  hostZone: string;
  valAddr: string;
}

export interface MsgDeleteValidatorResponse {
}

export interface MsgRestoreInterchainAccount {
  creator: string;
  chainId: string;
  connectionId: string;
  accountOwner: string;
}

export interface MsgRestoreInterchainAccountResponse {
}

export interface MsgUpdateValidatorSharesExchRate {
  creator: string;
  chainId: string;
  valoper: string;
}

export interface MsgUpdateValidatorSharesExchRateResponse {
}

export interface MsgCalibrateDelegation {
  creator: string;
  chainId: string;
  valoper: string;
}

export interface MsgCalibrateDelegationResponse {
}

export interface MsgResumeHostZone {
  creator: string;
  chainId: string;
}

export interface MsgResumeHostZoneResponse {
}

/** Creates a new trade route */
export interface MsgCreateTradeRoute {
  /**
   * authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   */
  authority: string;
  /** The chain ID of the host zone */
  hostChainId: string;
  /** Connection IDs between stride and the other zones */
  strideToRewardConnectionId: string;
  strideToTradeConnectionId: string;
  /** Transfer channels between the host, reward, and trade zones */
  hostToRewardTransferChannelId: string;
  rewardToTradeTransferChannelId: string;
  tradeToHostTransferChannelId: string;
  /** ibc denom for the reward token on the host zone (e.g. ibc/usdc on dYdX) */
  rewardDenomOnHost: string;
  /** native denom of reward token on the reward zone (e.g. usdc on Noble) */
  rewardDenomOnReward: string;
  /** ibc denom of the reward token on the trade zone (e.g. ibc/usdc on Osmosis) */
  rewardDenomOnTrade: string;
  /** ibc denom of the host's token on the trade zone (e.g. ibc/dydx on Osmosis) */
  hostDenomOnTrade: string;
  /** the host zone's native denom (e.g. dydx on dYdX) */
  hostDenomOnHost: string;
  /** The osmosis pool ID */
  poolId: number;
  /**
   * Threshold defining the percentage of tokens that could be lost in the trade
   * This captures both the loss from slippage and from a stale price on stride
   * "0.05" means the output from the trade can be no less than a 5% deviation
   * from the current value
   */
  maxAllowedSwapLossRate: string;
  /**
   * minimum amount of reward tokens to initate a swap
   * if not provided, defaults to 0
   */
  minSwapAmount: string;
  /**
   * maximum amount of reward tokens in a single swap
   * if not provided, defaults to 10e24
   */
  maxSwapAmount: string;
}

export interface MsgCreateTradeRouteResponse {
}

/** Deletes a trade route */
export interface MsgDeleteTradeRoute {
  /**
   * authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   */
  authority: string;
  /** The reward denom of the route in it's native form (e.g. usdc) */
  rewardDenom: string;
  /** The host zone's denom in it's native form (e.g. dydx) */
  hostDenom: string;
}

export interface MsgDeleteTradeRouteResponse {
}

/** Updates the config of a trade route */
export interface MsgUpdateTradeRoute {
  /**
   * authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   */
  authority: string;
  /** The reward denom of the route in it's native form (e.g. usdc) */
  rewardDenom: string;
  /** The host zone's denom in it's native form (e.g. dydx) */
  hostDenom: string;
  /** The osmosis pool ID */
  poolId: number;
  /**
   * Threshold defining the percentage of tokens that could be lost in the trade
   * This captures both the loss from slippage and from a stale price on stride
   * "0.05" means the output from the trade can be no less than a 5% deviation
   * from the current value
   */
  maxAllowedSwapLossRate: string;
  /**
   * minimum amount of reward tokens to initate a swap
   * if not provided, defaults to 0
   */
  minSwapAmount: string;
  /**
   * maximum amount of reward tokens in a single swap
   * if not provided, defaults to 10e24
   */
  maxSwapAmount: string;
}

export interface MsgUpdateTradeRouteResponse {
}

/**
 * Registers or updates a community pool rebate by specifying the amount liquid
 * staked
 */
export interface MsgSetCommunityPoolRebate {
  /** Message signer (admin only) */
  creator: string;
  /**
   * Chain id of the chain whose community pool has a liquid staking rebate
   * arrangement with stride
   */
  chainId: string;
  /** Rebate percentage represented as a decimal (e.g. 0.2 for 20%) */
  rebateRate: string;
  /** Number of stTokens recieved by the community pool after liquid staking */
  liquidStakedStTokenAmount: string;
}

export interface MsgSetCommunityPoolRebateResponse {
}

/** Grants or revokes trade permissions to a given address via authz */
export interface MsgToggleTradeController {
  /** Message signer (admin only) */
  creator: string;
  /** Chain ID of the trade account */
  chainId: string;
  /** Permission change (either grant or revoke) */
  permissionChange: AuthzPermissionChange;
  /** Address of trade operator */
  address: string;
}

export interface MsgToggleTradeControllerResponse {
}

/** Updates host zone params */
export interface MsgUpdateHostZoneParams {
  /**
   * authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   */
  authority: string;
  /** Chain ID of the host zone */
  chainId: string;
  /** Max messages that can be sent in a single ICA message */
  maxMessagesPerIcaTx: number;
}

export interface MsgUpdateHostZoneParamsResponse {
}

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /**
   * authority is the address that controls the module (defaults to x/gov unless
   * overwritten).
   */
  authority: string;
  /**
   * params defines the x/staking parameters to update.
   *
   * NOTE: All parameters must be supplied.
   */
  params: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

function createBaseMsgUpdateInnerRedemptionRateBounds(): MsgUpdateInnerRedemptionRateBounds {
  return { creator: "", chainId: "", minInnerRedemptionRate: "", maxInnerRedemptionRate: "" };
}

export const MsgUpdateInnerRedemptionRateBounds = {
  encode(message: MsgUpdateInnerRedemptionRateBounds, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.chainId !== "") {
      writer.uint32(18).string(message.chainId);
    }
    if (message.minInnerRedemptionRate !== "") {
      writer.uint32(26).string(message.minInnerRedemptionRate);
    }
    if (message.maxInnerRedemptionRate !== "") {
      writer.uint32(34).string(message.maxInnerRedemptionRate);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateInnerRedemptionRateBounds {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateInnerRedemptionRateBounds();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chainId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.minInnerRedemptionRate = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.maxInnerRedemptionRate = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateInnerRedemptionRateBounds {
    return {
      creator: isSet(object.creator) ? gt.String(object.creator) : "",
      chainId: isSet(object.chainId) ? gt.String(object.chainId) : "",
      minInnerRedemptionRate: isSet(object.minInnerRedemptionRate) ? gt.String(object.minInnerRedemptionRate) : "",
      maxInnerRedemptionRate: isSet(object.maxInnerRedemptionRate) ? gt.String(object.maxInnerRedemptionRate) : "",
    };
  },

  toJSON(message: MsgUpdateInnerRedemptionRateBounds): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.minInnerRedemptionRate !== "") {
      obj.minInnerRedemptionRate = message.minInnerRedemptionRate;
    }
    if (message.maxInnerRedemptionRate !== "") {
      obj.maxInnerRedemptionRate = message.maxInnerRedemptionRate;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateInnerRedemptionRateBounds>): MsgUpdateInnerRedemptionRateBounds {
    return MsgUpdateInnerRedemptionRateBounds.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgUpdateInnerRedemptionRateBounds>): MsgUpdateInnerRedemptionRateBounds {
    const message = createBaseMsgUpdateInnerRedemptionRateBounds();
    message.creator = object.creator ?? "";
    message.chainId = object.chainId ?? "";
    message.minInnerRedemptionRate = object.minInnerRedemptionRate ?? "";
    message.maxInnerRedemptionRate = object.maxInnerRedemptionRate ?? "";
    return message;
  },
};

function createBaseMsgUpdateInnerRedemptionRateBoundsResponse(): MsgUpdateInnerRedemptionRateBoundsResponse {
  return {};
}

export const MsgUpdateInnerRedemptionRateBoundsResponse = {
  encode(_: MsgUpdateInnerRedemptionRateBoundsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateInnerRedemptionRateBoundsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateInnerRedemptionRateBoundsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateInnerRedemptionRateBoundsResponse {
    return {};
  },

  toJSON(_: MsgUpdateInnerRedemptionRateBoundsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateInnerRedemptionRateBoundsResponse>): MsgUpdateInnerRedemptionRateBoundsResponse {
    return MsgUpdateInnerRedemptionRateBoundsResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgUpdateInnerRedemptionRateBoundsResponse>): MsgUpdateInnerRedemptionRateBoundsResponse {
    const message = createBaseMsgUpdateInnerRedemptionRateBoundsResponse();
    return message;
  },
};

function createBaseMsgLiquidStake(): MsgLiquidStake {
  return { creator: "", amount: "", hostDenom: "" };
}

export const MsgLiquidStake = {
  encode(message: MsgLiquidStake, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.amount !== "") {
      writer.uint32(18).string(message.amount);
    }
    if (message.hostDenom !== "") {
      writer.uint32(26).string(message.hostDenom);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgLiquidStake {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLiquidStake();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.amount = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hostDenom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgLiquidStake {
    return {
      creator: isSet(object.creator) ? gt.String(object.creator) : "",
      amount: isSet(object.amount) ? gt.String(object.amount) : "",
      hostDenom: isSet(object.hostDenom) ? gt.String(object.hostDenom) : "",
    };
  },

  toJSON(message: MsgLiquidStake): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.hostDenom !== "") {
      obj.hostDenom = message.hostDenom;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgLiquidStake>): MsgLiquidStake {
    return MsgLiquidStake.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgLiquidStake>): MsgLiquidStake {
    const message = createBaseMsgLiquidStake();
    message.creator = object.creator ?? "";
    message.amount = object.amount ?? "";
    message.hostDenom = object.hostDenom ?? "";
    return message;
  },
};

function createBaseMsgLiquidStakeResponse(): MsgLiquidStakeResponse {
  return { stToken: undefined };
}

export const MsgLiquidStakeResponse = {
  encode(message: MsgLiquidStakeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.stToken !== undefined) {
      Coin.encode(message.stToken, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgLiquidStakeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLiquidStakeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.stToken = Coin.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgLiquidStakeResponse {
    return { stToken: isSet(object.stToken) ? Coin.fromJSON(object.stToken) : undefined };
  },

  toJSON(message: MsgLiquidStakeResponse): unknown {
    const obj: any = {};
    if (message.stToken !== undefined) {
      obj.stToken = Coin.toJSON(message.stToken);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgLiquidStakeResponse>): MsgLiquidStakeResponse {
    return MsgLiquidStakeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgLiquidStakeResponse>): MsgLiquidStakeResponse {
    const message = createBaseMsgLiquidStakeResponse();
    message.stToken = (object.stToken !== undefined && object.stToken !== null)
      ? Coin.fromPartial(object.stToken)
      : undefined;
    return message;
  },
};

function createBaseMsgLSMLiquidStake(): MsgLSMLiquidStake {
  return { creator: "", amount: "", lsmTokenIbcDenom: "" };
}

export const MsgLSMLiquidStake = {
  encode(message: MsgLSMLiquidStake, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.amount !== "") {
      writer.uint32(18).string(message.amount);
    }
    if (message.lsmTokenIbcDenom !== "") {
      writer.uint32(26).string(message.lsmTokenIbcDenom);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgLSMLiquidStake {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLSMLiquidStake();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.amount = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.lsmTokenIbcDenom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgLSMLiquidStake {
    return {
      creator: isSet(object.creator) ? gt.String(object.creator) : "",
      amount: isSet(object.amount) ? gt.String(object.amount) : "",
      lsmTokenIbcDenom: isSet(object.lsmTokenIbcDenom) ? gt.String(object.lsmTokenIbcDenom) : "",
    };
  },

  toJSON(message: MsgLSMLiquidStake): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.lsmTokenIbcDenom !== "") {
      obj.lsmTokenIbcDenom = message.lsmTokenIbcDenom;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgLSMLiquidStake>): MsgLSMLiquidStake {
    return MsgLSMLiquidStake.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgLSMLiquidStake>): MsgLSMLiquidStake {
    const message = createBaseMsgLSMLiquidStake();
    message.creator = object.creator ?? "";
    message.amount = object.amount ?? "";
    message.lsmTokenIbcDenom = object.lsmTokenIbcDenom ?? "";
    return message;
  },
};

function createBaseMsgLSMLiquidStakeResponse(): MsgLSMLiquidStakeResponse {
  return { transactionComplete: false };
}

export const MsgLSMLiquidStakeResponse = {
  encode(message: MsgLSMLiquidStakeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.transactionComplete !== false) {
      writer.uint32(8).bool(message.transactionComplete);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgLSMLiquidStakeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLSMLiquidStakeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.transactionComplete = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgLSMLiquidStakeResponse {
    return { transactionComplete: isSet(object.transactionComplete) ? gt.Boolean(object.transactionComplete) : false };
  },

  toJSON(message: MsgLSMLiquidStakeResponse): unknown {
    const obj: any = {};
    if (message.transactionComplete !== false) {
      obj.transactionComplete = message.transactionComplete;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgLSMLiquidStakeResponse>): MsgLSMLiquidStakeResponse {
    return MsgLSMLiquidStakeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgLSMLiquidStakeResponse>): MsgLSMLiquidStakeResponse {
    const message = createBaseMsgLSMLiquidStakeResponse();
    message.transactionComplete = object.transactionComplete ?? false;
    return message;
  },
};

function createBaseMsgClearBalance(): MsgClearBalance {
  return { creator: "", chainId: "", amount: "", channel: "" };
}

export const MsgClearBalance = {
  encode(message: MsgClearBalance, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.chainId !== "") {
      writer.uint32(18).string(message.chainId);
    }
    if (message.amount !== "") {
      writer.uint32(26).string(message.amount);
    }
    if (message.channel !== "") {
      writer.uint32(34).string(message.channel);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgClearBalance {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClearBalance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chainId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.amount = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.channel = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgClearBalance {
    return {
      creator: isSet(object.creator) ? gt.String(object.creator) : "",
      chainId: isSet(object.chainId) ? gt.String(object.chainId) : "",
      amount: isSet(object.amount) ? gt.String(object.amount) : "",
      channel: isSet(object.channel) ? gt.String(object.channel) : "",
    };
  },

  toJSON(message: MsgClearBalance): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgClearBalance>): MsgClearBalance {
    return MsgClearBalance.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgClearBalance>): MsgClearBalance {
    const message = createBaseMsgClearBalance();
    message.creator = object.creator ?? "";
    message.chainId = object.chainId ?? "";
    message.amount = object.amount ?? "";
    message.channel = object.channel ?? "";
    return message;
  },
};

function createBaseMsgClearBalanceResponse(): MsgClearBalanceResponse {
  return {};
}

export const MsgClearBalanceResponse = {
  encode(_: MsgClearBalanceResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgClearBalanceResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClearBalanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgClearBalanceResponse {
    return {};
  },

  toJSON(_: MsgClearBalanceResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgClearBalanceResponse>): MsgClearBalanceResponse {
    return MsgClearBalanceResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgClearBalanceResponse>): MsgClearBalanceResponse {
    const message = createBaseMsgClearBalanceResponse();
    return message;
  },
};

function createBaseMsgRedeemStake(): MsgRedeemStake {
  return { creator: "", amount: "", hostZone: "", receiver: "" };
}

export const MsgRedeemStake = {
  encode(message: MsgRedeemStake, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.amount !== "") {
      writer.uint32(18).string(message.amount);
    }
    if (message.hostZone !== "") {
      writer.uint32(26).string(message.hostZone);
    }
    if (message.receiver !== "") {
      writer.uint32(34).string(message.receiver);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRedeemStake {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRedeemStake();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.amount = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hostZone = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.receiver = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRedeemStake {
    return {
      creator: isSet(object.creator) ? gt.String(object.creator) : "",
      amount: isSet(object.amount) ? gt.String(object.amount) : "",
      hostZone: isSet(object.hostZone) ? gt.String(object.hostZone) : "",
      receiver: isSet(object.receiver) ? gt.String(object.receiver) : "",
    };
  },

  toJSON(message: MsgRedeemStake): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.hostZone !== "") {
      obj.hostZone = message.hostZone;
    }
    if (message.receiver !== "") {
      obj.receiver = message.receiver;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRedeemStake>): MsgRedeemStake {
    return MsgRedeemStake.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgRedeemStake>): MsgRedeemStake {
    const message = createBaseMsgRedeemStake();
    message.creator = object.creator ?? "";
    message.amount = object.amount ?? "";
    message.hostZone = object.hostZone ?? "";
    message.receiver = object.receiver ?? "";
    return message;
  },
};

function createBaseMsgRedeemStakeResponse(): MsgRedeemStakeResponse {
  return {};
}

export const MsgRedeemStakeResponse = {
  encode(_: MsgRedeemStakeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRedeemStakeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRedeemStakeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRedeemStakeResponse {
    return {};
  },

  toJSON(_: MsgRedeemStakeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgRedeemStakeResponse>): MsgRedeemStakeResponse {
    return MsgRedeemStakeResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgRedeemStakeResponse>): MsgRedeemStakeResponse {
    const message = createBaseMsgRedeemStakeResponse();
    return message;
  },
};

function createBaseMsgRegisterHostZone(): MsgRegisterHostZone {
  return {
    connectionId: "",
    bech32prefix: "",
    hostDenom: "",
    ibcDenom: "",
    creator: "",
    transferChannelId: "",
    unbondingPeriod: 0,
    minRedemptionRate: "",
    maxRedemptionRate: "",
    lsmLiquidStakeEnabled: false,
    communityPoolTreasuryAddress: "",
    maxMessagesPerIcaTx: 0,
  };
}

export const MsgRegisterHostZone = {
  encode(message: MsgRegisterHostZone, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.connectionId !== "") {
      writer.uint32(18).string(message.connectionId);
    }
    if (message.bech32prefix !== "") {
      writer.uint32(98).string(message.bech32prefix);
    }
    if (message.hostDenom !== "") {
      writer.uint32(34).string(message.hostDenom);
    }
    if (message.ibcDenom !== "") {
      writer.uint32(42).string(message.ibcDenom);
    }
    if (message.creator !== "") {
      writer.uint32(50).string(message.creator);
    }
    if (message.transferChannelId !== "") {
      writer.uint32(82).string(message.transferChannelId);
    }
    if (message.unbondingPeriod !== 0) {
      writer.uint32(88).uint64(message.unbondingPeriod);
    }
    if (message.minRedemptionRate !== "") {
      writer.uint32(106).string(message.minRedemptionRate);
    }
    if (message.maxRedemptionRate !== "") {
      writer.uint32(114).string(message.maxRedemptionRate);
    }
    if (message.lsmLiquidStakeEnabled !== false) {
      writer.uint32(120).bool(message.lsmLiquidStakeEnabled);
    }
    if (message.communityPoolTreasuryAddress !== "") {
      writer.uint32(130).string(message.communityPoolTreasuryAddress);
    }
    if (message.maxMessagesPerIcaTx !== 0) {
      writer.uint32(136).uint64(message.maxMessagesPerIcaTx);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRegisterHostZone {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterHostZone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.connectionId = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.bech32prefix = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.hostDenom = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.ibcDenom = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.transferChannelId = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.unbondingPeriod = longToNumber(reader.uint64() as Long);
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.minRedemptionRate = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.maxRedemptionRate = reader.string();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.lsmLiquidStakeEnabled = reader.bool();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.communityPoolTreasuryAddress = reader.string();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.maxMessagesPerIcaTx = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRegisterHostZone {
    return {
      connectionId: isSet(object.connectionId) ? gt.String(object.connectionId) : "",
      bech32prefix: isSet(object.bech32prefix) ? gt.String(object.bech32prefix) : "",
      hostDenom: isSet(object.hostDenom) ? gt.String(object.hostDenom) : "",
      ibcDenom: isSet(object.ibcDenom) ? gt.String(object.ibcDenom) : "",
      creator: isSet(object.creator) ? gt.String(object.creator) : "",
      transferChannelId: isSet(object.transferChannelId) ? gt.String(object.transferChannelId) : "",
      unbondingPeriod: isSet(object.unbondingPeriod) ? gt.Number(object.unbondingPeriod) : 0,
      minRedemptionRate: isSet(object.minRedemptionRate) ? gt.String(object.minRedemptionRate) : "",
      maxRedemptionRate: isSet(object.maxRedemptionRate) ? gt.String(object.maxRedemptionRate) : "",
      lsmLiquidStakeEnabled: isSet(object.lsmLiquidStakeEnabled) ? gt.Boolean(object.lsmLiquidStakeEnabled) : false,
      communityPoolTreasuryAddress: isSet(object.communityPoolTreasuryAddress)
        ? gt.String(object.communityPoolTreasuryAddress)
        : "",
      maxMessagesPerIcaTx: isSet(object.maxMessagesPerIcaTx) ? gt.Number(object.maxMessagesPerIcaTx) : 0,
    };
  },

  toJSON(message: MsgRegisterHostZone): unknown {
    const obj: any = {};
    if (message.connectionId !== "") {
      obj.connectionId = message.connectionId;
    }
    if (message.bech32prefix !== "") {
      obj.bech32prefix = message.bech32prefix;
    }
    if (message.hostDenom !== "") {
      obj.hostDenom = message.hostDenom;
    }
    if (message.ibcDenom !== "") {
      obj.ibcDenom = message.ibcDenom;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.transferChannelId !== "") {
      obj.transferChannelId = message.transferChannelId;
    }
    if (message.unbondingPeriod !== 0) {
      obj.unbondingPeriod = Math.round(message.unbondingPeriod);
    }
    if (message.minRedemptionRate !== "") {
      obj.minRedemptionRate = message.minRedemptionRate;
    }
    if (message.maxRedemptionRate !== "") {
      obj.maxRedemptionRate = message.maxRedemptionRate;
    }
    if (message.lsmLiquidStakeEnabled !== false) {
      obj.lsmLiquidStakeEnabled = message.lsmLiquidStakeEnabled;
    }
    if (message.communityPoolTreasuryAddress !== "") {
      obj.communityPoolTreasuryAddress = message.communityPoolTreasuryAddress;
    }
    if (message.maxMessagesPerIcaTx !== 0) {
      obj.maxMessagesPerIcaTx = Math.round(message.maxMessagesPerIcaTx);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRegisterHostZone>): MsgRegisterHostZone {
    return MsgRegisterHostZone.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgRegisterHostZone>): MsgRegisterHostZone {
    const message = createBaseMsgRegisterHostZone();
    message.connectionId = object.connectionId ?? "";
    message.bech32prefix = object.bech32prefix ?? "";
    message.hostDenom = object.hostDenom ?? "";
    message.ibcDenom = object.ibcDenom ?? "";
    message.creator = object.creator ?? "";
    message.transferChannelId = object.transferChannelId ?? "";
    message.unbondingPeriod = object.unbondingPeriod ?? 0;
    message.minRedemptionRate = object.minRedemptionRate ?? "";
    message.maxRedemptionRate = object.maxRedemptionRate ?? "";
    message.lsmLiquidStakeEnabled = object.lsmLiquidStakeEnabled ?? false;
    message.communityPoolTreasuryAddress = object.communityPoolTreasuryAddress ?? "";
    message.maxMessagesPerIcaTx = object.maxMessagesPerIcaTx ?? 0;
    return message;
  },
};

function createBaseMsgRegisterHostZoneResponse(): MsgRegisterHostZoneResponse {
  return {};
}

export const MsgRegisterHostZoneResponse = {
  encode(_: MsgRegisterHostZoneResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRegisterHostZoneResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterHostZoneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRegisterHostZoneResponse {
    return {};
  },

  toJSON(_: MsgRegisterHostZoneResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgRegisterHostZoneResponse>): MsgRegisterHostZoneResponse {
    return MsgRegisterHostZoneResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgRegisterHostZoneResponse>): MsgRegisterHostZoneResponse {
    const message = createBaseMsgRegisterHostZoneResponse();
    return message;
  },
};

function createBaseMsgClaimUndelegatedTokens(): MsgClaimUndelegatedTokens {
  return { creator: "", hostZoneId: "", epoch: 0, receiver: "" };
}

export const MsgClaimUndelegatedTokens = {
  encode(message: MsgClaimUndelegatedTokens, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.hostZoneId !== "") {
      writer.uint32(18).string(message.hostZoneId);
    }
    if (message.epoch !== 0) {
      writer.uint32(24).uint64(message.epoch);
    }
    if (message.receiver !== "") {
      writer.uint32(42).string(message.receiver);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgClaimUndelegatedTokens {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClaimUndelegatedTokens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hostZoneId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.epoch = longToNumber(reader.uint64() as Long);
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.receiver = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgClaimUndelegatedTokens {
    return {
      creator: isSet(object.creator) ? gt.String(object.creator) : "",
      hostZoneId: isSet(object.hostZoneId) ? gt.String(object.hostZoneId) : "",
      epoch: isSet(object.epoch) ? gt.Number(object.epoch) : 0,
      receiver: isSet(object.receiver) ? gt.String(object.receiver) : "",
    };
  },

  toJSON(message: MsgClaimUndelegatedTokens): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.hostZoneId !== "") {
      obj.hostZoneId = message.hostZoneId;
    }
    if (message.epoch !== 0) {
      obj.epoch = Math.round(message.epoch);
    }
    if (message.receiver !== "") {
      obj.receiver = message.receiver;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgClaimUndelegatedTokens>): MsgClaimUndelegatedTokens {
    return MsgClaimUndelegatedTokens.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgClaimUndelegatedTokens>): MsgClaimUndelegatedTokens {
    const message = createBaseMsgClaimUndelegatedTokens();
    message.creator = object.creator ?? "";
    message.hostZoneId = object.hostZoneId ?? "";
    message.epoch = object.epoch ?? 0;
    message.receiver = object.receiver ?? "";
    return message;
  },
};

function createBaseMsgClaimUndelegatedTokensResponse(): MsgClaimUndelegatedTokensResponse {
  return {};
}

export const MsgClaimUndelegatedTokensResponse = {
  encode(_: MsgClaimUndelegatedTokensResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgClaimUndelegatedTokensResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClaimUndelegatedTokensResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgClaimUndelegatedTokensResponse {
    return {};
  },

  toJSON(_: MsgClaimUndelegatedTokensResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgClaimUndelegatedTokensResponse>): MsgClaimUndelegatedTokensResponse {
    return MsgClaimUndelegatedTokensResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgClaimUndelegatedTokensResponse>): MsgClaimUndelegatedTokensResponse {
    const message = createBaseMsgClaimUndelegatedTokensResponse();
    return message;
  },
};

function createBaseMsgRebalanceValidators(): MsgRebalanceValidators {
  return { creator: "", hostZone: "", numRebalance: 0 };
}

export const MsgRebalanceValidators = {
  encode(message: MsgRebalanceValidators, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.hostZone !== "") {
      writer.uint32(18).string(message.hostZone);
    }
    if (message.numRebalance !== 0) {
      writer.uint32(24).uint64(message.numRebalance);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRebalanceValidators {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRebalanceValidators();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hostZone = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.numRebalance = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRebalanceValidators {
    return {
      creator: isSet(object.creator) ? gt.String(object.creator) : "",
      hostZone: isSet(object.hostZone) ? gt.String(object.hostZone) : "",
      numRebalance: isSet(object.numRebalance) ? gt.Number(object.numRebalance) : 0,
    };
  },

  toJSON(message: MsgRebalanceValidators): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.hostZone !== "") {
      obj.hostZone = message.hostZone;
    }
    if (message.numRebalance !== 0) {
      obj.numRebalance = Math.round(message.numRebalance);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRebalanceValidators>): MsgRebalanceValidators {
    return MsgRebalanceValidators.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgRebalanceValidators>): MsgRebalanceValidators {
    const message = createBaseMsgRebalanceValidators();
    message.creator = object.creator ?? "";
    message.hostZone = object.hostZone ?? "";
    message.numRebalance = object.numRebalance ?? 0;
    return message;
  },
};

function createBaseMsgRebalanceValidatorsResponse(): MsgRebalanceValidatorsResponse {
  return {};
}

export const MsgRebalanceValidatorsResponse = {
  encode(_: MsgRebalanceValidatorsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRebalanceValidatorsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRebalanceValidatorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRebalanceValidatorsResponse {
    return {};
  },

  toJSON(_: MsgRebalanceValidatorsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgRebalanceValidatorsResponse>): MsgRebalanceValidatorsResponse {
    return MsgRebalanceValidatorsResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgRebalanceValidatorsResponse>): MsgRebalanceValidatorsResponse {
    const message = createBaseMsgRebalanceValidatorsResponse();
    return message;
  },
};

function createBaseMsgAddValidators(): MsgAddValidators {
  return { creator: "", hostZone: "", validators: [] };
}

export const MsgAddValidators = {
  encode(message: MsgAddValidators, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.hostZone !== "") {
      writer.uint32(18).string(message.hostZone);
    }
    for (const v of message.validators) {
      Validator.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddValidators {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddValidators();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hostZone = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.validators.push(Validator.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAddValidators {
    return {
      creator: isSet(object.creator) ? gt.String(object.creator) : "",
      hostZone: isSet(object.hostZone) ? gt.String(object.hostZone) : "",
      validators: gt.Array.isArray(object?.validators) ? object.validators.map((e: any) => Validator.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgAddValidators): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.hostZone !== "") {
      obj.hostZone = message.hostZone;
    }
    if (message.validators?.length) {
      obj.validators = message.validators.map((e) => Validator.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgAddValidators>): MsgAddValidators {
    return MsgAddValidators.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgAddValidators>): MsgAddValidators {
    const message = createBaseMsgAddValidators();
    message.creator = object.creator ?? "";
    message.hostZone = object.hostZone ?? "";
    message.validators = object.validators?.map((e) => Validator.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgAddValidatorsResponse(): MsgAddValidatorsResponse {
  return {};
}

export const MsgAddValidatorsResponse = {
  encode(_: MsgAddValidatorsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddValidatorsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddValidatorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAddValidatorsResponse {
    return {};
  },

  toJSON(_: MsgAddValidatorsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgAddValidatorsResponse>): MsgAddValidatorsResponse {
    return MsgAddValidatorsResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgAddValidatorsResponse>): MsgAddValidatorsResponse {
    const message = createBaseMsgAddValidatorsResponse();
    return message;
  },
};

function createBaseValidatorWeight(): ValidatorWeight {
  return { address: "", weight: 0 };
}

export const ValidatorWeight = {
  encode(message: ValidatorWeight, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.weight !== 0) {
      writer.uint32(16).uint64(message.weight);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ValidatorWeight {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidatorWeight();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.weight = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidatorWeight {
    return {
      address: isSet(object.address) ? gt.String(object.address) : "",
      weight: isSet(object.weight) ? gt.Number(object.weight) : 0,
    };
  },

  toJSON(message: ValidatorWeight): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.weight !== 0) {
      obj.weight = Math.round(message.weight);
    }
    return obj;
  },

  create(base?: DeepPartial<ValidatorWeight>): ValidatorWeight {
    return ValidatorWeight.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidatorWeight>): ValidatorWeight {
    const message = createBaseValidatorWeight();
    message.address = object.address ?? "";
    message.weight = object.weight ?? 0;
    return message;
  },
};

function createBaseMsgChangeValidatorWeights(): MsgChangeValidatorWeights {
  return { creator: "", hostZone: "", validatorWeights: [] };
}

export const MsgChangeValidatorWeights = {
  encode(message: MsgChangeValidatorWeights, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.hostZone !== "") {
      writer.uint32(18).string(message.hostZone);
    }
    for (const v of message.validatorWeights) {
      ValidatorWeight.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgChangeValidatorWeights {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgChangeValidatorWeights();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hostZone = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.validatorWeights.push(ValidatorWeight.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgChangeValidatorWeights {
    return {
      creator: isSet(object.creator) ? gt.String(object.creator) : "",
      hostZone: isSet(object.hostZone) ? gt.String(object.hostZone) : "",
      validatorWeights: gt.Array.isArray(object?.validatorWeights)
        ? object.validatorWeights.map((e: any) => ValidatorWeight.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MsgChangeValidatorWeights): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.hostZone !== "") {
      obj.hostZone = message.hostZone;
    }
    if (message.validatorWeights?.length) {
      obj.validatorWeights = message.validatorWeights.map((e) => ValidatorWeight.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgChangeValidatorWeights>): MsgChangeValidatorWeights {
    return MsgChangeValidatorWeights.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgChangeValidatorWeights>): MsgChangeValidatorWeights {
    const message = createBaseMsgChangeValidatorWeights();
    message.creator = object.creator ?? "";
    message.hostZone = object.hostZone ?? "";
    message.validatorWeights = object.validatorWeights?.map((e) => ValidatorWeight.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgChangeValidatorWeightsResponse(): MsgChangeValidatorWeightsResponse {
  return {};
}

export const MsgChangeValidatorWeightsResponse = {
  encode(_: MsgChangeValidatorWeightsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgChangeValidatorWeightsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgChangeValidatorWeightsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgChangeValidatorWeightsResponse {
    return {};
  },

  toJSON(_: MsgChangeValidatorWeightsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgChangeValidatorWeightsResponse>): MsgChangeValidatorWeightsResponse {
    return MsgChangeValidatorWeightsResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgChangeValidatorWeightsResponse>): MsgChangeValidatorWeightsResponse {
    const message = createBaseMsgChangeValidatorWeightsResponse();
    return message;
  },
};

function createBaseMsgDeleteValidator(): MsgDeleteValidator {
  return { creator: "", hostZone: "", valAddr: "" };
}

export const MsgDeleteValidator = {
  encode(message: MsgDeleteValidator, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.hostZone !== "") {
      writer.uint32(18).string(message.hostZone);
    }
    if (message.valAddr !== "") {
      writer.uint32(26).string(message.valAddr);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgDeleteValidator {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteValidator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hostZone = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.valAddr = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteValidator {
    return {
      creator: isSet(object.creator) ? gt.String(object.creator) : "",
      hostZone: isSet(object.hostZone) ? gt.String(object.hostZone) : "",
      valAddr: isSet(object.valAddr) ? gt.String(object.valAddr) : "",
    };
  },

  toJSON(message: MsgDeleteValidator): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.hostZone !== "") {
      obj.hostZone = message.hostZone;
    }
    if (message.valAddr !== "") {
      obj.valAddr = message.valAddr;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgDeleteValidator>): MsgDeleteValidator {
    return MsgDeleteValidator.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgDeleteValidator>): MsgDeleteValidator {
    const message = createBaseMsgDeleteValidator();
    message.creator = object.creator ?? "";
    message.hostZone = object.hostZone ?? "";
    message.valAddr = object.valAddr ?? "";
    return message;
  },
};

function createBaseMsgDeleteValidatorResponse(): MsgDeleteValidatorResponse {
  return {};
}

export const MsgDeleteValidatorResponse = {
  encode(_: MsgDeleteValidatorResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgDeleteValidatorResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteValidatorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteValidatorResponse {
    return {};
  },

  toJSON(_: MsgDeleteValidatorResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgDeleteValidatorResponse>): MsgDeleteValidatorResponse {
    return MsgDeleteValidatorResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgDeleteValidatorResponse>): MsgDeleteValidatorResponse {
    const message = createBaseMsgDeleteValidatorResponse();
    return message;
  },
};

function createBaseMsgRestoreInterchainAccount(): MsgRestoreInterchainAccount {
  return { creator: "", chainId: "", connectionId: "", accountOwner: "" };
}

export const MsgRestoreInterchainAccount = {
  encode(message: MsgRestoreInterchainAccount, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.chainId !== "") {
      writer.uint32(18).string(message.chainId);
    }
    if (message.connectionId !== "") {
      writer.uint32(26).string(message.connectionId);
    }
    if (message.accountOwner !== "") {
      writer.uint32(34).string(message.accountOwner);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRestoreInterchainAccount {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRestoreInterchainAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chainId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.connectionId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.accountOwner = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRestoreInterchainAccount {
    return {
      creator: isSet(object.creator) ? gt.String(object.creator) : "",
      chainId: isSet(object.chainId) ? gt.String(object.chainId) : "",
      connectionId: isSet(object.connectionId) ? gt.String(object.connectionId) : "",
      accountOwner: isSet(object.accountOwner) ? gt.String(object.accountOwner) : "",
    };
  },

  toJSON(message: MsgRestoreInterchainAccount): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.connectionId !== "") {
      obj.connectionId = message.connectionId;
    }
    if (message.accountOwner !== "") {
      obj.accountOwner = message.accountOwner;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRestoreInterchainAccount>): MsgRestoreInterchainAccount {
    return MsgRestoreInterchainAccount.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgRestoreInterchainAccount>): MsgRestoreInterchainAccount {
    const message = createBaseMsgRestoreInterchainAccount();
    message.creator = object.creator ?? "";
    message.chainId = object.chainId ?? "";
    message.connectionId = object.connectionId ?? "";
    message.accountOwner = object.accountOwner ?? "";
    return message;
  },
};

function createBaseMsgRestoreInterchainAccountResponse(): MsgRestoreInterchainAccountResponse {
  return {};
}

export const MsgRestoreInterchainAccountResponse = {
  encode(_: MsgRestoreInterchainAccountResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRestoreInterchainAccountResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRestoreInterchainAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRestoreInterchainAccountResponse {
    return {};
  },

  toJSON(_: MsgRestoreInterchainAccountResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgRestoreInterchainAccountResponse>): MsgRestoreInterchainAccountResponse {
    return MsgRestoreInterchainAccountResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgRestoreInterchainAccountResponse>): MsgRestoreInterchainAccountResponse {
    const message = createBaseMsgRestoreInterchainAccountResponse();
    return message;
  },
};

function createBaseMsgUpdateValidatorSharesExchRate(): MsgUpdateValidatorSharesExchRate {
  return { creator: "", chainId: "", valoper: "" };
}

export const MsgUpdateValidatorSharesExchRate = {
  encode(message: MsgUpdateValidatorSharesExchRate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.chainId !== "") {
      writer.uint32(18).string(message.chainId);
    }
    if (message.valoper !== "") {
      writer.uint32(26).string(message.valoper);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateValidatorSharesExchRate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateValidatorSharesExchRate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chainId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.valoper = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateValidatorSharesExchRate {
    return {
      creator: isSet(object.creator) ? gt.String(object.creator) : "",
      chainId: isSet(object.chainId) ? gt.String(object.chainId) : "",
      valoper: isSet(object.valoper) ? gt.String(object.valoper) : "",
    };
  },

  toJSON(message: MsgUpdateValidatorSharesExchRate): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.valoper !== "") {
      obj.valoper = message.valoper;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateValidatorSharesExchRate>): MsgUpdateValidatorSharesExchRate {
    return MsgUpdateValidatorSharesExchRate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgUpdateValidatorSharesExchRate>): MsgUpdateValidatorSharesExchRate {
    const message = createBaseMsgUpdateValidatorSharesExchRate();
    message.creator = object.creator ?? "";
    message.chainId = object.chainId ?? "";
    message.valoper = object.valoper ?? "";
    return message;
  },
};

function createBaseMsgUpdateValidatorSharesExchRateResponse(): MsgUpdateValidatorSharesExchRateResponse {
  return {};
}

export const MsgUpdateValidatorSharesExchRateResponse = {
  encode(_: MsgUpdateValidatorSharesExchRateResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateValidatorSharesExchRateResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateValidatorSharesExchRateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateValidatorSharesExchRateResponse {
    return {};
  },

  toJSON(_: MsgUpdateValidatorSharesExchRateResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateValidatorSharesExchRateResponse>): MsgUpdateValidatorSharesExchRateResponse {
    return MsgUpdateValidatorSharesExchRateResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgUpdateValidatorSharesExchRateResponse>): MsgUpdateValidatorSharesExchRateResponse {
    const message = createBaseMsgUpdateValidatorSharesExchRateResponse();
    return message;
  },
};

function createBaseMsgCalibrateDelegation(): MsgCalibrateDelegation {
  return { creator: "", chainId: "", valoper: "" };
}

export const MsgCalibrateDelegation = {
  encode(message: MsgCalibrateDelegation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.chainId !== "") {
      writer.uint32(18).string(message.chainId);
    }
    if (message.valoper !== "") {
      writer.uint32(26).string(message.valoper);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCalibrateDelegation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCalibrateDelegation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chainId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.valoper = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCalibrateDelegation {
    return {
      creator: isSet(object.creator) ? gt.String(object.creator) : "",
      chainId: isSet(object.chainId) ? gt.String(object.chainId) : "",
      valoper: isSet(object.valoper) ? gt.String(object.valoper) : "",
    };
  },

  toJSON(message: MsgCalibrateDelegation): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.valoper !== "") {
      obj.valoper = message.valoper;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgCalibrateDelegation>): MsgCalibrateDelegation {
    return MsgCalibrateDelegation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgCalibrateDelegation>): MsgCalibrateDelegation {
    const message = createBaseMsgCalibrateDelegation();
    message.creator = object.creator ?? "";
    message.chainId = object.chainId ?? "";
    message.valoper = object.valoper ?? "";
    return message;
  },
};

function createBaseMsgCalibrateDelegationResponse(): MsgCalibrateDelegationResponse {
  return {};
}

export const MsgCalibrateDelegationResponse = {
  encode(_: MsgCalibrateDelegationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCalibrateDelegationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCalibrateDelegationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCalibrateDelegationResponse {
    return {};
  },

  toJSON(_: MsgCalibrateDelegationResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgCalibrateDelegationResponse>): MsgCalibrateDelegationResponse {
    return MsgCalibrateDelegationResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgCalibrateDelegationResponse>): MsgCalibrateDelegationResponse {
    const message = createBaseMsgCalibrateDelegationResponse();
    return message;
  },
};

function createBaseMsgResumeHostZone(): MsgResumeHostZone {
  return { creator: "", chainId: "" };
}

export const MsgResumeHostZone = {
  encode(message: MsgResumeHostZone, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.chainId !== "") {
      writer.uint32(18).string(message.chainId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgResumeHostZone {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgResumeHostZone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chainId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgResumeHostZone {
    return {
      creator: isSet(object.creator) ? gt.String(object.creator) : "",
      chainId: isSet(object.chainId) ? gt.String(object.chainId) : "",
    };
  },

  toJSON(message: MsgResumeHostZone): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgResumeHostZone>): MsgResumeHostZone {
    return MsgResumeHostZone.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgResumeHostZone>): MsgResumeHostZone {
    const message = createBaseMsgResumeHostZone();
    message.creator = object.creator ?? "";
    message.chainId = object.chainId ?? "";
    return message;
  },
};

function createBaseMsgResumeHostZoneResponse(): MsgResumeHostZoneResponse {
  return {};
}

export const MsgResumeHostZoneResponse = {
  encode(_: MsgResumeHostZoneResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgResumeHostZoneResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgResumeHostZoneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgResumeHostZoneResponse {
    return {};
  },

  toJSON(_: MsgResumeHostZoneResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgResumeHostZoneResponse>): MsgResumeHostZoneResponse {
    return MsgResumeHostZoneResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgResumeHostZoneResponse>): MsgResumeHostZoneResponse {
    const message = createBaseMsgResumeHostZoneResponse();
    return message;
  },
};

function createBaseMsgCreateTradeRoute(): MsgCreateTradeRoute {
  return {
    authority: "",
    hostChainId: "",
    strideToRewardConnectionId: "",
    strideToTradeConnectionId: "",
    hostToRewardTransferChannelId: "",
    rewardToTradeTransferChannelId: "",
    tradeToHostTransferChannelId: "",
    rewardDenomOnHost: "",
    rewardDenomOnReward: "",
    rewardDenomOnTrade: "",
    hostDenomOnTrade: "",
    hostDenomOnHost: "",
    poolId: 0,
    maxAllowedSwapLossRate: "",
    minSwapAmount: "",
    maxSwapAmount: "",
  };
}

export const MsgCreateTradeRoute = {
  encode(message: MsgCreateTradeRoute, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.hostChainId !== "") {
      writer.uint32(18).string(message.hostChainId);
    }
    if (message.strideToRewardConnectionId !== "") {
      writer.uint32(26).string(message.strideToRewardConnectionId);
    }
    if (message.strideToTradeConnectionId !== "") {
      writer.uint32(34).string(message.strideToTradeConnectionId);
    }
    if (message.hostToRewardTransferChannelId !== "") {
      writer.uint32(42).string(message.hostToRewardTransferChannelId);
    }
    if (message.rewardToTradeTransferChannelId !== "") {
      writer.uint32(50).string(message.rewardToTradeTransferChannelId);
    }
    if (message.tradeToHostTransferChannelId !== "") {
      writer.uint32(58).string(message.tradeToHostTransferChannelId);
    }
    if (message.rewardDenomOnHost !== "") {
      writer.uint32(66).string(message.rewardDenomOnHost);
    }
    if (message.rewardDenomOnReward !== "") {
      writer.uint32(74).string(message.rewardDenomOnReward);
    }
    if (message.rewardDenomOnTrade !== "") {
      writer.uint32(82).string(message.rewardDenomOnTrade);
    }
    if (message.hostDenomOnTrade !== "") {
      writer.uint32(90).string(message.hostDenomOnTrade);
    }
    if (message.hostDenomOnHost !== "") {
      writer.uint32(98).string(message.hostDenomOnHost);
    }
    if (message.poolId !== 0) {
      writer.uint32(104).uint64(message.poolId);
    }
    if (message.maxAllowedSwapLossRate !== "") {
      writer.uint32(114).string(message.maxAllowedSwapLossRate);
    }
    if (message.minSwapAmount !== "") {
      writer.uint32(122).string(message.minSwapAmount);
    }
    if (message.maxSwapAmount !== "") {
      writer.uint32(130).string(message.maxSwapAmount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateTradeRoute {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateTradeRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hostChainId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.strideToRewardConnectionId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.strideToTradeConnectionId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.hostToRewardTransferChannelId = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.rewardToTradeTransferChannelId = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.tradeToHostTransferChannelId = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.rewardDenomOnHost = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.rewardDenomOnReward = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.rewardDenomOnTrade = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.hostDenomOnTrade = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.hostDenomOnHost = reader.string();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.poolId = longToNumber(reader.uint64() as Long);
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.maxAllowedSwapLossRate = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.minSwapAmount = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.maxSwapAmount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateTradeRoute {
    return {
      authority: isSet(object.authority) ? gt.String(object.authority) : "",
      hostChainId: isSet(object.hostChainId) ? gt.String(object.hostChainId) : "",
      strideToRewardConnectionId: isSet(object.strideToRewardConnectionId)
        ? gt.String(object.strideToRewardConnectionId)
        : "",
      strideToTradeConnectionId: isSet(object.strideToTradeConnectionId)
        ? gt.String(object.strideToTradeConnectionId)
        : "",
      hostToRewardTransferChannelId: isSet(object.hostToRewardTransferChannelId)
        ? gt.String(object.hostToRewardTransferChannelId)
        : "",
      rewardToTradeTransferChannelId: isSet(object.rewardToTradeTransferChannelId)
        ? gt.String(object.rewardToTradeTransferChannelId)
        : "",
      tradeToHostTransferChannelId: isSet(object.tradeToHostTransferChannelId)
        ? gt.String(object.tradeToHostTransferChannelId)
        : "",
      rewardDenomOnHost: isSet(object.rewardDenomOnHost) ? gt.String(object.rewardDenomOnHost) : "",
      rewardDenomOnReward: isSet(object.rewardDenomOnReward) ? gt.String(object.rewardDenomOnReward) : "",
      rewardDenomOnTrade: isSet(object.rewardDenomOnTrade) ? gt.String(object.rewardDenomOnTrade) : "",
      hostDenomOnTrade: isSet(object.hostDenomOnTrade) ? gt.String(object.hostDenomOnTrade) : "",
      hostDenomOnHost: isSet(object.hostDenomOnHost) ? gt.String(object.hostDenomOnHost) : "",
      poolId: isSet(object.poolId) ? gt.Number(object.poolId) : 0,
      maxAllowedSwapLossRate: isSet(object.maxAllowedSwapLossRate) ? gt.String(object.maxAllowedSwapLossRate) : "",
      minSwapAmount: isSet(object.minSwapAmount) ? gt.String(object.minSwapAmount) : "",
      maxSwapAmount: isSet(object.maxSwapAmount) ? gt.String(object.maxSwapAmount) : "",
    };
  },

  toJSON(message: MsgCreateTradeRoute): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.hostChainId !== "") {
      obj.hostChainId = message.hostChainId;
    }
    if (message.strideToRewardConnectionId !== "") {
      obj.strideToRewardConnectionId = message.strideToRewardConnectionId;
    }
    if (message.strideToTradeConnectionId !== "") {
      obj.strideToTradeConnectionId = message.strideToTradeConnectionId;
    }
    if (message.hostToRewardTransferChannelId !== "") {
      obj.hostToRewardTransferChannelId = message.hostToRewardTransferChannelId;
    }
    if (message.rewardToTradeTransferChannelId !== "") {
      obj.rewardToTradeTransferChannelId = message.rewardToTradeTransferChannelId;
    }
    if (message.tradeToHostTransferChannelId !== "") {
      obj.tradeToHostTransferChannelId = message.tradeToHostTransferChannelId;
    }
    if (message.rewardDenomOnHost !== "") {
      obj.rewardDenomOnHost = message.rewardDenomOnHost;
    }
    if (message.rewardDenomOnReward !== "") {
      obj.rewardDenomOnReward = message.rewardDenomOnReward;
    }
    if (message.rewardDenomOnTrade !== "") {
      obj.rewardDenomOnTrade = message.rewardDenomOnTrade;
    }
    if (message.hostDenomOnTrade !== "") {
      obj.hostDenomOnTrade = message.hostDenomOnTrade;
    }
    if (message.hostDenomOnHost !== "") {
      obj.hostDenomOnHost = message.hostDenomOnHost;
    }
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    if (message.maxAllowedSwapLossRate !== "") {
      obj.maxAllowedSwapLossRate = message.maxAllowedSwapLossRate;
    }
    if (message.minSwapAmount !== "") {
      obj.minSwapAmount = message.minSwapAmount;
    }
    if (message.maxSwapAmount !== "") {
      obj.maxSwapAmount = message.maxSwapAmount;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgCreateTradeRoute>): MsgCreateTradeRoute {
    return MsgCreateTradeRoute.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgCreateTradeRoute>): MsgCreateTradeRoute {
    const message = createBaseMsgCreateTradeRoute();
    message.authority = object.authority ?? "";
    message.hostChainId = object.hostChainId ?? "";
    message.strideToRewardConnectionId = object.strideToRewardConnectionId ?? "";
    message.strideToTradeConnectionId = object.strideToTradeConnectionId ?? "";
    message.hostToRewardTransferChannelId = object.hostToRewardTransferChannelId ?? "";
    message.rewardToTradeTransferChannelId = object.rewardToTradeTransferChannelId ?? "";
    message.tradeToHostTransferChannelId = object.tradeToHostTransferChannelId ?? "";
    message.rewardDenomOnHost = object.rewardDenomOnHost ?? "";
    message.rewardDenomOnReward = object.rewardDenomOnReward ?? "";
    message.rewardDenomOnTrade = object.rewardDenomOnTrade ?? "";
    message.hostDenomOnTrade = object.hostDenomOnTrade ?? "";
    message.hostDenomOnHost = object.hostDenomOnHost ?? "";
    message.poolId = object.poolId ?? 0;
    message.maxAllowedSwapLossRate = object.maxAllowedSwapLossRate ?? "";
    message.minSwapAmount = object.minSwapAmount ?? "";
    message.maxSwapAmount = object.maxSwapAmount ?? "";
    return message;
  },
};

function createBaseMsgCreateTradeRouteResponse(): MsgCreateTradeRouteResponse {
  return {};
}

export const MsgCreateTradeRouteResponse = {
  encode(_: MsgCreateTradeRouteResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateTradeRouteResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateTradeRouteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateTradeRouteResponse {
    return {};
  },

  toJSON(_: MsgCreateTradeRouteResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgCreateTradeRouteResponse>): MsgCreateTradeRouteResponse {
    return MsgCreateTradeRouteResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgCreateTradeRouteResponse>): MsgCreateTradeRouteResponse {
    const message = createBaseMsgCreateTradeRouteResponse();
    return message;
  },
};

function createBaseMsgDeleteTradeRoute(): MsgDeleteTradeRoute {
  return { authority: "", rewardDenom: "", hostDenom: "" };
}

export const MsgDeleteTradeRoute = {
  encode(message: MsgDeleteTradeRoute, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.rewardDenom !== "") {
      writer.uint32(18).string(message.rewardDenom);
    }
    if (message.hostDenom !== "") {
      writer.uint32(26).string(message.hostDenom);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgDeleteTradeRoute {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteTradeRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rewardDenom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hostDenom = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteTradeRoute {
    return {
      authority: isSet(object.authority) ? gt.String(object.authority) : "",
      rewardDenom: isSet(object.rewardDenom) ? gt.String(object.rewardDenom) : "",
      hostDenom: isSet(object.hostDenom) ? gt.String(object.hostDenom) : "",
    };
  },

  toJSON(message: MsgDeleteTradeRoute): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.rewardDenom !== "") {
      obj.rewardDenom = message.rewardDenom;
    }
    if (message.hostDenom !== "") {
      obj.hostDenom = message.hostDenom;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgDeleteTradeRoute>): MsgDeleteTradeRoute {
    return MsgDeleteTradeRoute.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgDeleteTradeRoute>): MsgDeleteTradeRoute {
    const message = createBaseMsgDeleteTradeRoute();
    message.authority = object.authority ?? "";
    message.rewardDenom = object.rewardDenom ?? "";
    message.hostDenom = object.hostDenom ?? "";
    return message;
  },
};

function createBaseMsgDeleteTradeRouteResponse(): MsgDeleteTradeRouteResponse {
  return {};
}

export const MsgDeleteTradeRouteResponse = {
  encode(_: MsgDeleteTradeRouteResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgDeleteTradeRouteResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteTradeRouteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteTradeRouteResponse {
    return {};
  },

  toJSON(_: MsgDeleteTradeRouteResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgDeleteTradeRouteResponse>): MsgDeleteTradeRouteResponse {
    return MsgDeleteTradeRouteResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgDeleteTradeRouteResponse>): MsgDeleteTradeRouteResponse {
    const message = createBaseMsgDeleteTradeRouteResponse();
    return message;
  },
};

function createBaseMsgUpdateTradeRoute(): MsgUpdateTradeRoute {
  return {
    authority: "",
    rewardDenom: "",
    hostDenom: "",
    poolId: 0,
    maxAllowedSwapLossRate: "",
    minSwapAmount: "",
    maxSwapAmount: "",
  };
}

export const MsgUpdateTradeRoute = {
  encode(message: MsgUpdateTradeRoute, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.rewardDenom !== "") {
      writer.uint32(18).string(message.rewardDenom);
    }
    if (message.hostDenom !== "") {
      writer.uint32(26).string(message.hostDenom);
    }
    if (message.poolId !== 0) {
      writer.uint32(32).uint64(message.poolId);
    }
    if (message.maxAllowedSwapLossRate !== "") {
      writer.uint32(42).string(message.maxAllowedSwapLossRate);
    }
    if (message.minSwapAmount !== "") {
      writer.uint32(50).string(message.minSwapAmount);
    }
    if (message.maxSwapAmount !== "") {
      writer.uint32(58).string(message.maxSwapAmount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateTradeRoute {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateTradeRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rewardDenom = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.hostDenom = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.poolId = longToNumber(reader.uint64() as Long);
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.maxAllowedSwapLossRate = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.minSwapAmount = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.maxSwapAmount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateTradeRoute {
    return {
      authority: isSet(object.authority) ? gt.String(object.authority) : "",
      rewardDenom: isSet(object.rewardDenom) ? gt.String(object.rewardDenom) : "",
      hostDenom: isSet(object.hostDenom) ? gt.String(object.hostDenom) : "",
      poolId: isSet(object.poolId) ? gt.Number(object.poolId) : 0,
      maxAllowedSwapLossRate: isSet(object.maxAllowedSwapLossRate) ? gt.String(object.maxAllowedSwapLossRate) : "",
      minSwapAmount: isSet(object.minSwapAmount) ? gt.String(object.minSwapAmount) : "",
      maxSwapAmount: isSet(object.maxSwapAmount) ? gt.String(object.maxSwapAmount) : "",
    };
  },

  toJSON(message: MsgUpdateTradeRoute): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.rewardDenom !== "") {
      obj.rewardDenom = message.rewardDenom;
    }
    if (message.hostDenom !== "") {
      obj.hostDenom = message.hostDenom;
    }
    if (message.poolId !== 0) {
      obj.poolId = Math.round(message.poolId);
    }
    if (message.maxAllowedSwapLossRate !== "") {
      obj.maxAllowedSwapLossRate = message.maxAllowedSwapLossRate;
    }
    if (message.minSwapAmount !== "") {
      obj.minSwapAmount = message.minSwapAmount;
    }
    if (message.maxSwapAmount !== "") {
      obj.maxSwapAmount = message.maxSwapAmount;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateTradeRoute>): MsgUpdateTradeRoute {
    return MsgUpdateTradeRoute.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgUpdateTradeRoute>): MsgUpdateTradeRoute {
    const message = createBaseMsgUpdateTradeRoute();
    message.authority = object.authority ?? "";
    message.rewardDenom = object.rewardDenom ?? "";
    message.hostDenom = object.hostDenom ?? "";
    message.poolId = object.poolId ?? 0;
    message.maxAllowedSwapLossRate = object.maxAllowedSwapLossRate ?? "";
    message.minSwapAmount = object.minSwapAmount ?? "";
    message.maxSwapAmount = object.maxSwapAmount ?? "";
    return message;
  },
};

function createBaseMsgUpdateTradeRouteResponse(): MsgUpdateTradeRouteResponse {
  return {};
}

export const MsgUpdateTradeRouteResponse = {
  encode(_: MsgUpdateTradeRouteResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateTradeRouteResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateTradeRouteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateTradeRouteResponse {
    return {};
  },

  toJSON(_: MsgUpdateTradeRouteResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateTradeRouteResponse>): MsgUpdateTradeRouteResponse {
    return MsgUpdateTradeRouteResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgUpdateTradeRouteResponse>): MsgUpdateTradeRouteResponse {
    const message = createBaseMsgUpdateTradeRouteResponse();
    return message;
  },
};

function createBaseMsgSetCommunityPoolRebate(): MsgSetCommunityPoolRebate {
  return { creator: "", chainId: "", rebateRate: "", liquidStakedStTokenAmount: "" };
}

export const MsgSetCommunityPoolRebate = {
  encode(message: MsgSetCommunityPoolRebate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.chainId !== "") {
      writer.uint32(18).string(message.chainId);
    }
    if (message.rebateRate !== "") {
      writer.uint32(26).string(message.rebateRate);
    }
    if (message.liquidStakedStTokenAmount !== "") {
      writer.uint32(34).string(message.liquidStakedStTokenAmount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetCommunityPoolRebate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetCommunityPoolRebate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chainId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.rebateRate = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.liquidStakedStTokenAmount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSetCommunityPoolRebate {
    return {
      creator: isSet(object.creator) ? gt.String(object.creator) : "",
      chainId: isSet(object.chainId) ? gt.String(object.chainId) : "",
      rebateRate: isSet(object.rebateRate) ? gt.String(object.rebateRate) : "",
      liquidStakedStTokenAmount: isSet(object.liquidStakedStTokenAmount)
        ? gt.String(object.liquidStakedStTokenAmount)
        : "",
    };
  },

  toJSON(message: MsgSetCommunityPoolRebate): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.rebateRate !== "") {
      obj.rebateRate = message.rebateRate;
    }
    if (message.liquidStakedStTokenAmount !== "") {
      obj.liquidStakedStTokenAmount = message.liquidStakedStTokenAmount;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgSetCommunityPoolRebate>): MsgSetCommunityPoolRebate {
    return MsgSetCommunityPoolRebate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgSetCommunityPoolRebate>): MsgSetCommunityPoolRebate {
    const message = createBaseMsgSetCommunityPoolRebate();
    message.creator = object.creator ?? "";
    message.chainId = object.chainId ?? "";
    message.rebateRate = object.rebateRate ?? "";
    message.liquidStakedStTokenAmount = object.liquidStakedStTokenAmount ?? "";
    return message;
  },
};

function createBaseMsgSetCommunityPoolRebateResponse(): MsgSetCommunityPoolRebateResponse {
  return {};
}

export const MsgSetCommunityPoolRebateResponse = {
  encode(_: MsgSetCommunityPoolRebateResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetCommunityPoolRebateResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetCommunityPoolRebateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSetCommunityPoolRebateResponse {
    return {};
  },

  toJSON(_: MsgSetCommunityPoolRebateResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgSetCommunityPoolRebateResponse>): MsgSetCommunityPoolRebateResponse {
    return MsgSetCommunityPoolRebateResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgSetCommunityPoolRebateResponse>): MsgSetCommunityPoolRebateResponse {
    const message = createBaseMsgSetCommunityPoolRebateResponse();
    return message;
  },
};

function createBaseMsgToggleTradeController(): MsgToggleTradeController {
  return { creator: "", chainId: "", permissionChange: 0, address: "" };
}

export const MsgToggleTradeController = {
  encode(message: MsgToggleTradeController, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.chainId !== "") {
      writer.uint32(18).string(message.chainId);
    }
    if (message.permissionChange !== 0) {
      writer.uint32(24).int32(message.permissionChange);
    }
    if (message.address !== "") {
      writer.uint32(34).string(message.address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgToggleTradeController {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgToggleTradeController();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chainId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.permissionChange = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgToggleTradeController {
    return {
      creator: isSet(object.creator) ? gt.String(object.creator) : "",
      chainId: isSet(object.chainId) ? gt.String(object.chainId) : "",
      permissionChange: isSet(object.permissionChange) ? authzPermissionChangeFromJSON(object.permissionChange) : 0,
      address: isSet(object.address) ? gt.String(object.address) : "",
    };
  },

  toJSON(message: MsgToggleTradeController): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.permissionChange !== 0) {
      obj.permissionChange = authzPermissionChangeToJSON(message.permissionChange);
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgToggleTradeController>): MsgToggleTradeController {
    return MsgToggleTradeController.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgToggleTradeController>): MsgToggleTradeController {
    const message = createBaseMsgToggleTradeController();
    message.creator = object.creator ?? "";
    message.chainId = object.chainId ?? "";
    message.permissionChange = object.permissionChange ?? 0;
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseMsgToggleTradeControllerResponse(): MsgToggleTradeControllerResponse {
  return {};
}

export const MsgToggleTradeControllerResponse = {
  encode(_: MsgToggleTradeControllerResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgToggleTradeControllerResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgToggleTradeControllerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgToggleTradeControllerResponse {
    return {};
  },

  toJSON(_: MsgToggleTradeControllerResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgToggleTradeControllerResponse>): MsgToggleTradeControllerResponse {
    return MsgToggleTradeControllerResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgToggleTradeControllerResponse>): MsgToggleTradeControllerResponse {
    const message = createBaseMsgToggleTradeControllerResponse();
    return message;
  },
};

function createBaseMsgUpdateHostZoneParams(): MsgUpdateHostZoneParams {
  return { authority: "", chainId: "", maxMessagesPerIcaTx: 0 };
}

export const MsgUpdateHostZoneParams = {
  encode(message: MsgUpdateHostZoneParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.chainId !== "") {
      writer.uint32(18).string(message.chainId);
    }
    if (message.maxMessagesPerIcaTx !== 0) {
      writer.uint32(24).uint64(message.maxMessagesPerIcaTx);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateHostZoneParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateHostZoneParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.chainId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.maxMessagesPerIcaTx = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateHostZoneParams {
    return {
      authority: isSet(object.authority) ? gt.String(object.authority) : "",
      chainId: isSet(object.chainId) ? gt.String(object.chainId) : "",
      maxMessagesPerIcaTx: isSet(object.maxMessagesPerIcaTx) ? gt.Number(object.maxMessagesPerIcaTx) : 0,
    };
  },

  toJSON(message: MsgUpdateHostZoneParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.maxMessagesPerIcaTx !== 0) {
      obj.maxMessagesPerIcaTx = Math.round(message.maxMessagesPerIcaTx);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateHostZoneParams>): MsgUpdateHostZoneParams {
    return MsgUpdateHostZoneParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgUpdateHostZoneParams>): MsgUpdateHostZoneParams {
    const message = createBaseMsgUpdateHostZoneParams();
    message.authority = object.authority ?? "";
    message.chainId = object.chainId ?? "";
    message.maxMessagesPerIcaTx = object.maxMessagesPerIcaTx ?? 0;
    return message;
  },
};

function createBaseMsgUpdateHostZoneParamsResponse(): MsgUpdateHostZoneParamsResponse {
  return {};
}

export const MsgUpdateHostZoneParamsResponse = {
  encode(_: MsgUpdateHostZoneParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateHostZoneParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateHostZoneParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateHostZoneParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateHostZoneParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateHostZoneParamsResponse>): MsgUpdateHostZoneParamsResponse {
    return MsgUpdateHostZoneParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgUpdateHostZoneParamsResponse>): MsgUpdateHostZoneParamsResponse {
    const message = createBaseMsgUpdateHostZoneParamsResponse();
    return message;
  },
};

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams = {
  encode(message: MsgUpdateParams, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? gt.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateParams>): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgUpdateParams>): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse = {
  encode(_: MsgUpdateParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  LiquidStake(request: MsgLiquidStake): Promise<MsgLiquidStakeResponse>;
  LSMLiquidStake(request: MsgLSMLiquidStake): Promise<MsgLSMLiquidStakeResponse>;
  RedeemStake(request: MsgRedeemStake): Promise<MsgRedeemStakeResponse>;
  RegisterHostZone(request: MsgRegisterHostZone): Promise<MsgRegisterHostZoneResponse>;
  ClaimUndelegatedTokens(request: MsgClaimUndelegatedTokens): Promise<MsgClaimUndelegatedTokensResponse>;
  RebalanceValidators(request: MsgRebalanceValidators): Promise<MsgRebalanceValidatorsResponse>;
  AddValidators(request: MsgAddValidators): Promise<MsgAddValidatorsResponse>;
  ChangeValidatorWeight(request: MsgChangeValidatorWeights): Promise<MsgChangeValidatorWeightsResponse>;
  DeleteValidator(request: MsgDeleteValidator): Promise<MsgDeleteValidatorResponse>;
  RestoreInterchainAccount(request: MsgRestoreInterchainAccount): Promise<MsgRestoreInterchainAccountResponse>;
  UpdateValidatorSharesExchRate(
    request: MsgUpdateValidatorSharesExchRate,
  ): Promise<MsgUpdateValidatorSharesExchRateResponse>;
  CalibrateDelegation(request: MsgCalibrateDelegation): Promise<MsgCalibrateDelegationResponse>;
  ClearBalance(request: MsgClearBalance): Promise<MsgClearBalanceResponse>;
  UpdateInnerRedemptionRateBounds(
    request: MsgUpdateInnerRedemptionRateBounds,
  ): Promise<MsgUpdateInnerRedemptionRateBoundsResponse>;
  ResumeHostZone(request: MsgResumeHostZone): Promise<MsgResumeHostZoneResponse>;
  CreateTradeRoute(request: MsgCreateTradeRoute): Promise<MsgCreateTradeRouteResponse>;
  DeleteTradeRoute(request: MsgDeleteTradeRoute): Promise<MsgDeleteTradeRouteResponse>;
  UpdateTradeRoute(request: MsgUpdateTradeRoute): Promise<MsgUpdateTradeRouteResponse>;
  SetCommunityPoolRebate(request: MsgSetCommunityPoolRebate): Promise<MsgSetCommunityPoolRebateResponse>;
  ToggleTradeController(request: MsgToggleTradeController): Promise<MsgToggleTradeControllerResponse>;
  UpdateHostZoneParams(request: MsgUpdateHostZoneParams): Promise<MsgUpdateHostZoneParamsResponse>;
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}

export const MsgServiceName = "stride.stakeibc.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.LiquidStake = this.LiquidStake.bind(this);
    this.LSMLiquidStake = this.LSMLiquidStake.bind(this);
    this.RedeemStake = this.RedeemStake.bind(this);
    this.RegisterHostZone = this.RegisterHostZone.bind(this);
    this.ClaimUndelegatedTokens = this.ClaimUndelegatedTokens.bind(this);
    this.RebalanceValidators = this.RebalanceValidators.bind(this);
    this.AddValidators = this.AddValidators.bind(this);
    this.ChangeValidatorWeight = this.ChangeValidatorWeight.bind(this);
    this.DeleteValidator = this.DeleteValidator.bind(this);
    this.RestoreInterchainAccount = this.RestoreInterchainAccount.bind(this);
    this.UpdateValidatorSharesExchRate = this.UpdateValidatorSharesExchRate.bind(this);
    this.CalibrateDelegation = this.CalibrateDelegation.bind(this);
    this.ClearBalance = this.ClearBalance.bind(this);
    this.UpdateInnerRedemptionRateBounds = this.UpdateInnerRedemptionRateBounds.bind(this);
    this.ResumeHostZone = this.ResumeHostZone.bind(this);
    this.CreateTradeRoute = this.CreateTradeRoute.bind(this);
    this.DeleteTradeRoute = this.DeleteTradeRoute.bind(this);
    this.UpdateTradeRoute = this.UpdateTradeRoute.bind(this);
    this.SetCommunityPoolRebate = this.SetCommunityPoolRebate.bind(this);
    this.ToggleTradeController = this.ToggleTradeController.bind(this);
    this.UpdateHostZoneParams = this.UpdateHostZoneParams.bind(this);
    this.UpdateParams = this.UpdateParams.bind(this);
  }
  LiquidStake(request: MsgLiquidStake): Promise<MsgLiquidStakeResponse> {
    const data = MsgLiquidStake.encode(request).finish();
    const promise = this.rpc.request(this.service, "LiquidStake", data);
    return promise.then((data) => MsgLiquidStakeResponse.decode(_m0.Reader.create(data)));
  }

  LSMLiquidStake(request: MsgLSMLiquidStake): Promise<MsgLSMLiquidStakeResponse> {
    const data = MsgLSMLiquidStake.encode(request).finish();
    const promise = this.rpc.request(this.service, "LSMLiquidStake", data);
    return promise.then((data) => MsgLSMLiquidStakeResponse.decode(_m0.Reader.create(data)));
  }

  RedeemStake(request: MsgRedeemStake): Promise<MsgRedeemStakeResponse> {
    const data = MsgRedeemStake.encode(request).finish();
    const promise = this.rpc.request(this.service, "RedeemStake", data);
    return promise.then((data) => MsgRedeemStakeResponse.decode(_m0.Reader.create(data)));
  }

  RegisterHostZone(request: MsgRegisterHostZone): Promise<MsgRegisterHostZoneResponse> {
    const data = MsgRegisterHostZone.encode(request).finish();
    const promise = this.rpc.request(this.service, "RegisterHostZone", data);
    return promise.then((data) => MsgRegisterHostZoneResponse.decode(_m0.Reader.create(data)));
  }

  ClaimUndelegatedTokens(request: MsgClaimUndelegatedTokens): Promise<MsgClaimUndelegatedTokensResponse> {
    const data = MsgClaimUndelegatedTokens.encode(request).finish();
    const promise = this.rpc.request(this.service, "ClaimUndelegatedTokens", data);
    return promise.then((data) => MsgClaimUndelegatedTokensResponse.decode(_m0.Reader.create(data)));
  }

  RebalanceValidators(request: MsgRebalanceValidators): Promise<MsgRebalanceValidatorsResponse> {
    const data = MsgRebalanceValidators.encode(request).finish();
    const promise = this.rpc.request(this.service, "RebalanceValidators", data);
    return promise.then((data) => MsgRebalanceValidatorsResponse.decode(_m0.Reader.create(data)));
  }

  AddValidators(request: MsgAddValidators): Promise<MsgAddValidatorsResponse> {
    const data = MsgAddValidators.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddValidators", data);
    return promise.then((data) => MsgAddValidatorsResponse.decode(_m0.Reader.create(data)));
  }

  ChangeValidatorWeight(request: MsgChangeValidatorWeights): Promise<MsgChangeValidatorWeightsResponse> {
    const data = MsgChangeValidatorWeights.encode(request).finish();
    const promise = this.rpc.request(this.service, "ChangeValidatorWeight", data);
    return promise.then((data) => MsgChangeValidatorWeightsResponse.decode(_m0.Reader.create(data)));
  }

  DeleteValidator(request: MsgDeleteValidator): Promise<MsgDeleteValidatorResponse> {
    const data = MsgDeleteValidator.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteValidator", data);
    return promise.then((data) => MsgDeleteValidatorResponse.decode(_m0.Reader.create(data)));
  }

  RestoreInterchainAccount(request: MsgRestoreInterchainAccount): Promise<MsgRestoreInterchainAccountResponse> {
    const data = MsgRestoreInterchainAccount.encode(request).finish();
    const promise = this.rpc.request(this.service, "RestoreInterchainAccount", data);
    return promise.then((data) => MsgRestoreInterchainAccountResponse.decode(_m0.Reader.create(data)));
  }

  UpdateValidatorSharesExchRate(
    request: MsgUpdateValidatorSharesExchRate,
  ): Promise<MsgUpdateValidatorSharesExchRateResponse> {
    const data = MsgUpdateValidatorSharesExchRate.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateValidatorSharesExchRate", data);
    return promise.then((data) => MsgUpdateValidatorSharesExchRateResponse.decode(_m0.Reader.create(data)));
  }

  CalibrateDelegation(request: MsgCalibrateDelegation): Promise<MsgCalibrateDelegationResponse> {
    const data = MsgCalibrateDelegation.encode(request).finish();
    const promise = this.rpc.request(this.service, "CalibrateDelegation", data);
    return promise.then((data) => MsgCalibrateDelegationResponse.decode(_m0.Reader.create(data)));
  }

  ClearBalance(request: MsgClearBalance): Promise<MsgClearBalanceResponse> {
    const data = MsgClearBalance.encode(request).finish();
    const promise = this.rpc.request(this.service, "ClearBalance", data);
    return promise.then((data) => MsgClearBalanceResponse.decode(_m0.Reader.create(data)));
  }

  UpdateInnerRedemptionRateBounds(
    request: MsgUpdateInnerRedemptionRateBounds,
  ): Promise<MsgUpdateInnerRedemptionRateBoundsResponse> {
    const data = MsgUpdateInnerRedemptionRateBounds.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateInnerRedemptionRateBounds", data);
    return promise.then((data) => MsgUpdateInnerRedemptionRateBoundsResponse.decode(_m0.Reader.create(data)));
  }

  ResumeHostZone(request: MsgResumeHostZone): Promise<MsgResumeHostZoneResponse> {
    const data = MsgResumeHostZone.encode(request).finish();
    const promise = this.rpc.request(this.service, "ResumeHostZone", data);
    return promise.then((data) => MsgResumeHostZoneResponse.decode(_m0.Reader.create(data)));
  }

  CreateTradeRoute(request: MsgCreateTradeRoute): Promise<MsgCreateTradeRouteResponse> {
    const data = MsgCreateTradeRoute.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateTradeRoute", data);
    return promise.then((data) => MsgCreateTradeRouteResponse.decode(_m0.Reader.create(data)));
  }

  DeleteTradeRoute(request: MsgDeleteTradeRoute): Promise<MsgDeleteTradeRouteResponse> {
    const data = MsgDeleteTradeRoute.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteTradeRoute", data);
    return promise.then((data) => MsgDeleteTradeRouteResponse.decode(_m0.Reader.create(data)));
  }

  UpdateTradeRoute(request: MsgUpdateTradeRoute): Promise<MsgUpdateTradeRouteResponse> {
    const data = MsgUpdateTradeRoute.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateTradeRoute", data);
    return promise.then((data) => MsgUpdateTradeRouteResponse.decode(_m0.Reader.create(data)));
  }

  SetCommunityPoolRebate(request: MsgSetCommunityPoolRebate): Promise<MsgSetCommunityPoolRebateResponse> {
    const data = MsgSetCommunityPoolRebate.encode(request).finish();
    const promise = this.rpc.request(this.service, "SetCommunityPoolRebate", data);
    return promise.then((data) => MsgSetCommunityPoolRebateResponse.decode(_m0.Reader.create(data)));
  }

  ToggleTradeController(request: MsgToggleTradeController): Promise<MsgToggleTradeControllerResponse> {
    const data = MsgToggleTradeController.encode(request).finish();
    const promise = this.rpc.request(this.service, "ToggleTradeController", data);
    return promise.then((data) => MsgToggleTradeControllerResponse.decode(_m0.Reader.create(data)));
  }

  UpdateHostZoneParams(request: MsgUpdateHostZoneParams): Promise<MsgUpdateHostZoneParamsResponse> {
    const data = MsgUpdateHostZoneParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateHostZoneParams", data);
    return promise.then((data) => MsgUpdateHostZoneParamsResponse.decode(_m0.Reader.create(data)));
  }

  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(long: Long): number {
  if (long.gt(gt.Number.MAX_SAFE_INTEGER)) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(gt.Number.MIN_SAFE_INTEGER)) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
