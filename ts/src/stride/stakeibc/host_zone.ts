// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: stride/stakeibc/host_zone.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Validator } from "./validator";
import Long = require("long");

export const protobufPackage = "stride.stakeibc";

/**
 * CommunityPoolRebate stores the size of the community pool liquid stake
 * (denominated in stTokens) and the rebate rate as a decimal
 */
export interface CommunityPoolRebate {
  /** Rebate percentage as a decimal (e.g. 0.2 for 20%) */
  rebateRate: string;
  /** Number of stTokens received from the community pool liquid stake */
  liquidStakedStTokenAmount: string;
}

/** Core data structure to track liquid staking zones */
export interface HostZone {
  /** Chain ID of the host zone */
  chainId: string;
  /** Bech32 prefix of host zone's address */
  bech32prefix: string;
  /** ConnectionID from Stride to the host zone (ID is on the stride side) */
  connectionId: string;
  /** Transfer Channel ID from Stride to the host zone (ID is on the stride side) */
  transferChannelId: string;
  /** ibc denom of the host zone's native token on stride */
  ibcDenom: string;
  /** native denom on host zone */
  hostDenom: string;
  /** The unbonding period in days (e.g. 21) */
  unbondingPeriod: number;
  /** List of validators that are delegated to */
  validators: Validator[];
  /** Address that custodies native tokens during a liquid stake */
  depositAddress: string;
  /** ICA Address on the host zone responsible for collecting rewards */
  withdrawalIcaAddress: string;
  /** ICA Address on the host zone responsible for commission */
  feeIcaAddress: string;
  /** ICA Address on the host zone responsible for staking and unstaking */
  delegationIcaAddress: string;
  /** ICA Address that receives unstaked tokens after they've finished unbonding */
  redemptionIcaAddress: string;
  /**
   * ICA Address that receives tokens from a community pool to liquid stake or
   * redeem In the case of a liquid stake, the community pool deposits native
   * tokens In the case of a redemption, the community pool deposits stTokens
   */
  communityPoolDepositIcaAddress: string;
  /**
   * ICA Address that distributes tokens back to the community pool during a
   * community pool liquid stake or redeem In the case of a liquid stake, the
   * return address sends back stTokens In the case of a redemption, the return
   * address sends back native tokens
   */
  communityPoolReturnIcaAddress: string;
  /**
   * Module account on Stride that receives native tokens from the deposit ICA
   * and liquid stakes them
   */
  communityPoolStakeHoldingAddress: string;
  /**
   * Module account on Stride that receives stTokens from the deposit ICA and
   * redeems them
   */
  communityPoolRedeemHoldingAddress: string;
  /**
   * Optional community pool address to send tokens to after a community pool
   * liquid stake or redemption If this address is empty, the tokens are sent to
   * the main community pool
   */
  communityPoolTreasuryAddress: string;
  /** The total delegated balance on the host zone */
  totalDelegations: string;
  /** The redemption rate from the previous epoch */
  lastRedemptionRate: string;
  /** The current redemption rate */
  redemptionRate: string;
  /**
   * The min outer redemption rate bound - controlled only be governance
   * The min inner bound cannot exceed this bound
   */
  minRedemptionRate: string;
  /**
   * The max outer redemption rate bound - controlled only be governance
   * The max inner bound cannot exceed this bound
   */
  maxRedemptionRate: string;
  /**
   * The min minner redemption rate bound - controlled by the admin
   * If the redemption rate exceeds this bound, the host zone is halted
   */
  minInnerRedemptionRate: string;
  /**
   * The max minner redemption rate bound - controlled by the admin
   * If the redemption rate exceeds this bound, the host zone is halted
   */
  maxInnerRedemptionRate: string;
  /**
   * The max number of messages that can be sent in a delegation
   * or undelegation ICA tx
   */
  maxMessagesPerIcaTx: number;
  /**
   * An optional fee rebate
   * If there is no rebate for the host zone, this will be nil
   */
  communityPoolRebate:
    | CommunityPoolRebate
    | undefined;
  /** A boolean indicating whether the chain has LSM enabled */
  lsmLiquidStakeEnabled: boolean;
  /** A boolean indicating whether the chain is currently halted */
  halted: boolean;
}

function createBaseCommunityPoolRebate(): CommunityPoolRebate {
  return { rebateRate: "", liquidStakedStTokenAmount: "" };
}

export const CommunityPoolRebate = {
  encode(message: CommunityPoolRebate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.rebateRate !== "") {
      writer.uint32(10).string(message.rebateRate);
    }
    if (message.liquidStakedStTokenAmount !== "") {
      writer.uint32(18).string(message.liquidStakedStTokenAmount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CommunityPoolRebate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommunityPoolRebate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rebateRate = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.liquidStakedStTokenAmount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommunityPoolRebate {
    return {
      rebateRate: isSet(object.rebateRate) ? gt.String(object.rebateRate) : "",
      liquidStakedStTokenAmount: isSet(object.liquidStakedStTokenAmount)
        ? gt.String(object.liquidStakedStTokenAmount)
        : "",
    };
  },

  toJSON(message: CommunityPoolRebate): unknown {
    const obj: any = {};
    if (message.rebateRate !== "") {
      obj.rebateRate = message.rebateRate;
    }
    if (message.liquidStakedStTokenAmount !== "") {
      obj.liquidStakedStTokenAmount = message.liquidStakedStTokenAmount;
    }
    return obj;
  },

  create(base?: DeepPartial<CommunityPoolRebate>): CommunityPoolRebate {
    return CommunityPoolRebate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CommunityPoolRebate>): CommunityPoolRebate {
    const message = createBaseCommunityPoolRebate();
    message.rebateRate = object.rebateRate ?? "";
    message.liquidStakedStTokenAmount = object.liquidStakedStTokenAmount ?? "";
    return message;
  },
};

function createBaseHostZone(): HostZone {
  return {
    chainId: "",
    bech32prefix: "",
    connectionId: "",
    transferChannelId: "",
    ibcDenom: "",
    hostDenom: "",
    unbondingPeriod: 0,
    validators: [],
    depositAddress: "",
    withdrawalIcaAddress: "",
    feeIcaAddress: "",
    delegationIcaAddress: "",
    redemptionIcaAddress: "",
    communityPoolDepositIcaAddress: "",
    communityPoolReturnIcaAddress: "",
    communityPoolStakeHoldingAddress: "",
    communityPoolRedeemHoldingAddress: "",
    communityPoolTreasuryAddress: "",
    totalDelegations: "",
    lastRedemptionRate: "",
    redemptionRate: "",
    minRedemptionRate: "",
    maxRedemptionRate: "",
    minInnerRedemptionRate: "",
    maxInnerRedemptionRate: "",
    maxMessagesPerIcaTx: 0,
    communityPoolRebate: undefined,
    lsmLiquidStakeEnabled: false,
    halted: false,
  };
}

export const HostZone = {
  encode(message: HostZone, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.chainId !== "") {
      writer.uint32(10).string(message.chainId);
    }
    if (message.bech32prefix !== "") {
      writer.uint32(138).string(message.bech32prefix);
    }
    if (message.connectionId !== "") {
      writer.uint32(18).string(message.connectionId);
    }
    if (message.transferChannelId !== "") {
      writer.uint32(98).string(message.transferChannelId);
    }
    if (message.ibcDenom !== "") {
      writer.uint32(66).string(message.ibcDenom);
    }
    if (message.hostDenom !== "") {
      writer.uint32(74).string(message.hostDenom);
    }
    if (message.unbondingPeriod !== 0) {
      writer.uint32(208).uint64(message.unbondingPeriod);
    }
    for (const v of message.validators) {
      Validator.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.depositAddress !== "") {
      writer.uint32(146).string(message.depositAddress);
    }
    if (message.withdrawalIcaAddress !== "") {
      writer.uint32(178).string(message.withdrawalIcaAddress);
    }
    if (message.feeIcaAddress !== "") {
      writer.uint32(186).string(message.feeIcaAddress);
    }
    if (message.delegationIcaAddress !== "") {
      writer.uint32(194).string(message.delegationIcaAddress);
    }
    if (message.redemptionIcaAddress !== "") {
      writer.uint32(202).string(message.redemptionIcaAddress);
    }
    if (message.communityPoolDepositIcaAddress !== "") {
      writer.uint32(242).string(message.communityPoolDepositIcaAddress);
    }
    if (message.communityPoolReturnIcaAddress !== "") {
      writer.uint32(250).string(message.communityPoolReturnIcaAddress);
    }
    if (message.communityPoolStakeHoldingAddress !== "") {
      writer.uint32(258).string(message.communityPoolStakeHoldingAddress);
    }
    if (message.communityPoolRedeemHoldingAddress !== "") {
      writer.uint32(266).string(message.communityPoolRedeemHoldingAddress);
    }
    if (message.communityPoolTreasuryAddress !== "") {
      writer.uint32(282).string(message.communityPoolTreasuryAddress);
    }
    if (message.totalDelegations !== "") {
      writer.uint32(106).string(message.totalDelegations);
    }
    if (message.lastRedemptionRate !== "") {
      writer.uint32(82).string(message.lastRedemptionRate);
    }
    if (message.redemptionRate !== "") {
      writer.uint32(90).string(message.redemptionRate);
    }
    if (message.minRedemptionRate !== "") {
      writer.uint32(162).string(message.minRedemptionRate);
    }
    if (message.maxRedemptionRate !== "") {
      writer.uint32(170).string(message.maxRedemptionRate);
    }
    if (message.minInnerRedemptionRate !== "") {
      writer.uint32(226).string(message.minInnerRedemptionRate);
    }
    if (message.maxInnerRedemptionRate !== "") {
      writer.uint32(234).string(message.maxInnerRedemptionRate);
    }
    if (message.maxMessagesPerIcaTx !== 0) {
      writer.uint32(288).uint64(message.maxMessagesPerIcaTx);
    }
    if (message.communityPoolRebate !== undefined) {
      CommunityPoolRebate.encode(message.communityPoolRebate, writer.uint32(274).fork()).ldelim();
    }
    if (message.lsmLiquidStakeEnabled !== false) {
      writer.uint32(216).bool(message.lsmLiquidStakeEnabled);
    }
    if (message.halted !== false) {
      writer.uint32(152).bool(message.halted);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HostZone {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHostZone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chainId = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.bech32prefix = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.connectionId = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.transferChannelId = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.ibcDenom = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.hostDenom = reader.string();
          continue;
        case 26:
          if (tag !== 208) {
            break;
          }

          message.unbondingPeriod = longToNumber(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.validators.push(Validator.decode(reader, reader.uint32()));
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.depositAddress = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.withdrawalIcaAddress = reader.string();
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.feeIcaAddress = reader.string();
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.delegationIcaAddress = reader.string();
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.redemptionIcaAddress = reader.string();
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.communityPoolDepositIcaAddress = reader.string();
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.communityPoolReturnIcaAddress = reader.string();
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          message.communityPoolStakeHoldingAddress = reader.string();
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.communityPoolRedeemHoldingAddress = reader.string();
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.communityPoolTreasuryAddress = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.totalDelegations = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.lastRedemptionRate = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.redemptionRate = reader.string();
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.minRedemptionRate = reader.string();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.maxRedemptionRate = reader.string();
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.minInnerRedemptionRate = reader.string();
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.maxInnerRedemptionRate = reader.string();
          continue;
        case 36:
          if (tag !== 288) {
            break;
          }

          message.maxMessagesPerIcaTx = longToNumber(reader.uint64() as Long);
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.communityPoolRebate = CommunityPoolRebate.decode(reader, reader.uint32());
          continue;
        case 27:
          if (tag !== 216) {
            break;
          }

          message.lsmLiquidStakeEnabled = reader.bool();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.halted = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HostZone {
    return {
      chainId: isSet(object.chainId) ? gt.String(object.chainId) : "",
      bech32prefix: isSet(object.bech32prefix) ? gt.String(object.bech32prefix) : "",
      connectionId: isSet(object.connectionId) ? gt.String(object.connectionId) : "",
      transferChannelId: isSet(object.transferChannelId) ? gt.String(object.transferChannelId) : "",
      ibcDenom: isSet(object.ibcDenom) ? gt.String(object.ibcDenom) : "",
      hostDenom: isSet(object.hostDenom) ? gt.String(object.hostDenom) : "",
      unbondingPeriod: isSet(object.unbondingPeriod) ? gt.Number(object.unbondingPeriod) : 0,
      validators: gt.Array.isArray(object?.validators) ? object.validators.map((e: any) => Validator.fromJSON(e)) : [],
      depositAddress: isSet(object.depositAddress) ? gt.String(object.depositAddress) : "",
      withdrawalIcaAddress: isSet(object.withdrawalIcaAddress) ? gt.String(object.withdrawalIcaAddress) : "",
      feeIcaAddress: isSet(object.feeIcaAddress) ? gt.String(object.feeIcaAddress) : "",
      delegationIcaAddress: isSet(object.delegationIcaAddress) ? gt.String(object.delegationIcaAddress) : "",
      redemptionIcaAddress: isSet(object.redemptionIcaAddress) ? gt.String(object.redemptionIcaAddress) : "",
      communityPoolDepositIcaAddress: isSet(object.communityPoolDepositIcaAddress)
        ? gt.String(object.communityPoolDepositIcaAddress)
        : "",
      communityPoolReturnIcaAddress: isSet(object.communityPoolReturnIcaAddress)
        ? gt.String(object.communityPoolReturnIcaAddress)
        : "",
      communityPoolStakeHoldingAddress: isSet(object.communityPoolStakeHoldingAddress)
        ? gt.String(object.communityPoolStakeHoldingAddress)
        : "",
      communityPoolRedeemHoldingAddress: isSet(object.communityPoolRedeemHoldingAddress)
        ? gt.String(object.communityPoolRedeemHoldingAddress)
        : "",
      communityPoolTreasuryAddress: isSet(object.communityPoolTreasuryAddress)
        ? gt.String(object.communityPoolTreasuryAddress)
        : "",
      totalDelegations: isSet(object.totalDelegations) ? gt.String(object.totalDelegations) : "",
      lastRedemptionRate: isSet(object.lastRedemptionRate) ? gt.String(object.lastRedemptionRate) : "",
      redemptionRate: isSet(object.redemptionRate) ? gt.String(object.redemptionRate) : "",
      minRedemptionRate: isSet(object.minRedemptionRate) ? gt.String(object.minRedemptionRate) : "",
      maxRedemptionRate: isSet(object.maxRedemptionRate) ? gt.String(object.maxRedemptionRate) : "",
      minInnerRedemptionRate: isSet(object.minInnerRedemptionRate) ? gt.String(object.minInnerRedemptionRate) : "",
      maxInnerRedemptionRate: isSet(object.maxInnerRedemptionRate) ? gt.String(object.maxInnerRedemptionRate) : "",
      maxMessagesPerIcaTx: isSet(object.maxMessagesPerIcaTx) ? gt.Number(object.maxMessagesPerIcaTx) : 0,
      communityPoolRebate: isSet(object.communityPoolRebate)
        ? CommunityPoolRebate.fromJSON(object.communityPoolRebate)
        : undefined,
      lsmLiquidStakeEnabled: isSet(object.lsmLiquidStakeEnabled) ? gt.Boolean(object.lsmLiquidStakeEnabled) : false,
      halted: isSet(object.halted) ? gt.Boolean(object.halted) : false,
    };
  },

  toJSON(message: HostZone): unknown {
    const obj: any = {};
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.bech32prefix !== "") {
      obj.bech32prefix = message.bech32prefix;
    }
    if (message.connectionId !== "") {
      obj.connectionId = message.connectionId;
    }
    if (message.transferChannelId !== "") {
      obj.transferChannelId = message.transferChannelId;
    }
    if (message.ibcDenom !== "") {
      obj.ibcDenom = message.ibcDenom;
    }
    if (message.hostDenom !== "") {
      obj.hostDenom = message.hostDenom;
    }
    if (message.unbondingPeriod !== 0) {
      obj.unbondingPeriod = Math.round(message.unbondingPeriod);
    }
    if (message.validators?.length) {
      obj.validators = message.validators.map((e) => Validator.toJSON(e));
    }
    if (message.depositAddress !== "") {
      obj.depositAddress = message.depositAddress;
    }
    if (message.withdrawalIcaAddress !== "") {
      obj.withdrawalIcaAddress = message.withdrawalIcaAddress;
    }
    if (message.feeIcaAddress !== "") {
      obj.feeIcaAddress = message.feeIcaAddress;
    }
    if (message.delegationIcaAddress !== "") {
      obj.delegationIcaAddress = message.delegationIcaAddress;
    }
    if (message.redemptionIcaAddress !== "") {
      obj.redemptionIcaAddress = message.redemptionIcaAddress;
    }
    if (message.communityPoolDepositIcaAddress !== "") {
      obj.communityPoolDepositIcaAddress = message.communityPoolDepositIcaAddress;
    }
    if (message.communityPoolReturnIcaAddress !== "") {
      obj.communityPoolReturnIcaAddress = message.communityPoolReturnIcaAddress;
    }
    if (message.communityPoolStakeHoldingAddress !== "") {
      obj.communityPoolStakeHoldingAddress = message.communityPoolStakeHoldingAddress;
    }
    if (message.communityPoolRedeemHoldingAddress !== "") {
      obj.communityPoolRedeemHoldingAddress = message.communityPoolRedeemHoldingAddress;
    }
    if (message.communityPoolTreasuryAddress !== "") {
      obj.communityPoolTreasuryAddress = message.communityPoolTreasuryAddress;
    }
    if (message.totalDelegations !== "") {
      obj.totalDelegations = message.totalDelegations;
    }
    if (message.lastRedemptionRate !== "") {
      obj.lastRedemptionRate = message.lastRedemptionRate;
    }
    if (message.redemptionRate !== "") {
      obj.redemptionRate = message.redemptionRate;
    }
    if (message.minRedemptionRate !== "") {
      obj.minRedemptionRate = message.minRedemptionRate;
    }
    if (message.maxRedemptionRate !== "") {
      obj.maxRedemptionRate = message.maxRedemptionRate;
    }
    if (message.minInnerRedemptionRate !== "") {
      obj.minInnerRedemptionRate = message.minInnerRedemptionRate;
    }
    if (message.maxInnerRedemptionRate !== "") {
      obj.maxInnerRedemptionRate = message.maxInnerRedemptionRate;
    }
    if (message.maxMessagesPerIcaTx !== 0) {
      obj.maxMessagesPerIcaTx = Math.round(message.maxMessagesPerIcaTx);
    }
    if (message.communityPoolRebate !== undefined) {
      obj.communityPoolRebate = CommunityPoolRebate.toJSON(message.communityPoolRebate);
    }
    if (message.lsmLiquidStakeEnabled !== false) {
      obj.lsmLiquidStakeEnabled = message.lsmLiquidStakeEnabled;
    }
    if (message.halted !== false) {
      obj.halted = message.halted;
    }
    return obj;
  },

  create(base?: DeepPartial<HostZone>): HostZone {
    return HostZone.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HostZone>): HostZone {
    const message = createBaseHostZone();
    message.chainId = object.chainId ?? "";
    message.bech32prefix = object.bech32prefix ?? "";
    message.connectionId = object.connectionId ?? "";
    message.transferChannelId = object.transferChannelId ?? "";
    message.ibcDenom = object.ibcDenom ?? "";
    message.hostDenom = object.hostDenom ?? "";
    message.unbondingPeriod = object.unbondingPeriod ?? 0;
    message.validators = object.validators?.map((e) => Validator.fromPartial(e)) || [];
    message.depositAddress = object.depositAddress ?? "";
    message.withdrawalIcaAddress = object.withdrawalIcaAddress ?? "";
    message.feeIcaAddress = object.feeIcaAddress ?? "";
    message.delegationIcaAddress = object.delegationIcaAddress ?? "";
    message.redemptionIcaAddress = object.redemptionIcaAddress ?? "";
    message.communityPoolDepositIcaAddress = object.communityPoolDepositIcaAddress ?? "";
    message.communityPoolReturnIcaAddress = object.communityPoolReturnIcaAddress ?? "";
    message.communityPoolStakeHoldingAddress = object.communityPoolStakeHoldingAddress ?? "";
    message.communityPoolRedeemHoldingAddress = object.communityPoolRedeemHoldingAddress ?? "";
    message.communityPoolTreasuryAddress = object.communityPoolTreasuryAddress ?? "";
    message.totalDelegations = object.totalDelegations ?? "";
    message.lastRedemptionRate = object.lastRedemptionRate ?? "";
    message.redemptionRate = object.redemptionRate ?? "";
    message.minRedemptionRate = object.minRedemptionRate ?? "";
    message.maxRedemptionRate = object.maxRedemptionRate ?? "";
    message.minInnerRedemptionRate = object.minInnerRedemptionRate ?? "";
    message.maxInnerRedemptionRate = object.maxInnerRedemptionRate ?? "";
    message.maxMessagesPerIcaTx = object.maxMessagesPerIcaTx ?? 0;
    message.communityPoolRebate = (object.communityPoolRebate !== undefined && object.communityPoolRebate !== null)
      ? CommunityPoolRebate.fromPartial(object.communityPoolRebate)
      : undefined;
    message.lsmLiquidStakeEnabled = object.lsmLiquidStakeEnabled ?? false;
    message.halted = object.halted ?? false;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(long: Long): number {
  if (long.gt(gt.Number.MAX_SAFE_INTEGER)) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(gt.Number.MIN_SAFE_INTEGER)) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
