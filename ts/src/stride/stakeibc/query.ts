// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: stride/stakeibc/query.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { AddressUnbonding } from "./address_unbonding";
import { EpochTracker } from "./epoch_tracker";
import { HostZone } from "./host_zone";
import { Params } from "./params";
import { TradeRoute } from "./trade_route";
import { Validator } from "./validator";
import Long = require("long");

export const protobufPackage = "stride.stakeibc";

/**
 * QueryInterchainAccountFromAddressRequest is the request type for the
 * Query/InterchainAccountAddress RPC
 */
export interface QueryInterchainAccountFromAddressRequest {
  owner: string;
  connectionId: string;
}

/**
 * QueryInterchainAccountFromAddressResponse the response type for the
 * Query/InterchainAccountAddress RPC
 */
export interface QueryInterchainAccountFromAddressResponse {
  interchainAccountAddress: string;
}

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

export interface QueryGetValidatorsRequest {
  chainId: string;
}

export interface QueryGetValidatorsResponse {
  validators: Validator[];
}

export interface QueryGetHostZoneRequest {
  chainId: string;
}

export interface QueryGetHostZoneResponse {
  hostZone: HostZone | undefined;
}

export interface QueryAllHostZoneRequest {
  pagination: PageRequest | undefined;
}

export interface QueryAllHostZoneResponse {
  hostZone: HostZone[];
  pagination: PageResponse | undefined;
}

export interface QueryModuleAddressRequest {
  name: string;
}

export interface QueryModuleAddressResponse {
  addr: string;
}

export interface QueryGetEpochTrackerRequest {
  epochIdentifier: string;
}

export interface QueryGetEpochTrackerResponse {
  epochTracker: EpochTracker | undefined;
}

export interface QueryAllEpochTrackerRequest {
}

export interface QueryAllEpochTrackerResponse {
  epochTracker: EpochTracker[];
}

export interface QueryGetNextPacketSequenceRequest {
  channelId: string;
  portId: string;
}

export interface QueryGetNextPacketSequenceResponse {
  sequence: number;
}

export interface QueryAddressUnbondings {
  address: string;
}

export interface QueryAddressUnbondingsResponse {
  addressUnbondings: AddressUnbonding[];
}

export interface QueryAllTradeRoutes {
}

export interface QueryAllTradeRoutesResponse {
  tradeRoutes: TradeRoute[];
}

function createBaseQueryInterchainAccountFromAddressRequest(): QueryInterchainAccountFromAddressRequest {
  return { owner: "", connectionId: "" };
}

export const QueryInterchainAccountFromAddressRequest = {
  encode(message: QueryInterchainAccountFromAddressRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.connectionId !== "") {
      writer.uint32(18).string(message.connectionId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryInterchainAccountFromAddressRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInterchainAccountFromAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.connectionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryInterchainAccountFromAddressRequest {
    return {
      owner: isSet(object.owner) ? gt.String(object.owner) : "",
      connectionId: isSet(object.connectionId) ? gt.String(object.connectionId) : "",
    };
  },

  toJSON(message: QueryInterchainAccountFromAddressRequest): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.connectionId !== "") {
      obj.connectionId = message.connectionId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryInterchainAccountFromAddressRequest>): QueryInterchainAccountFromAddressRequest {
    return QueryInterchainAccountFromAddressRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryInterchainAccountFromAddressRequest>): QueryInterchainAccountFromAddressRequest {
    const message = createBaseQueryInterchainAccountFromAddressRequest();
    message.owner = object.owner ?? "";
    message.connectionId = object.connectionId ?? "";
    return message;
  },
};

function createBaseQueryInterchainAccountFromAddressResponse(): QueryInterchainAccountFromAddressResponse {
  return { interchainAccountAddress: "" };
}

export const QueryInterchainAccountFromAddressResponse = {
  encode(message: QueryInterchainAccountFromAddressResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.interchainAccountAddress !== "") {
      writer.uint32(10).string(message.interchainAccountAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryInterchainAccountFromAddressResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryInterchainAccountFromAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.interchainAccountAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryInterchainAccountFromAddressResponse {
    return {
      interchainAccountAddress: isSet(object.interchainAccountAddress)
        ? gt.String(object.interchainAccountAddress)
        : "",
    };
  },

  toJSON(message: QueryInterchainAccountFromAddressResponse): unknown {
    const obj: any = {};
    if (message.interchainAccountAddress !== "") {
      obj.interchainAccountAddress = message.interchainAccountAddress;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryInterchainAccountFromAddressResponse>): QueryInterchainAccountFromAddressResponse {
    return QueryInterchainAccountFromAddressResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<QueryInterchainAccountFromAddressResponse>,
  ): QueryInterchainAccountFromAddressResponse {
    const message = createBaseQueryInterchainAccountFromAddressResponse();
    message.interchainAccountAddress = object.interchainAccountAddress ?? "";
    return message;
  },
};

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest = {
  encode(_: QueryParamsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse = {
  encode(message: QueryParamsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGetValidatorsRequest(): QueryGetValidatorsRequest {
  return { chainId: "" };
}

export const QueryGetValidatorsRequest = {
  encode(message: QueryGetValidatorsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.chainId !== "") {
      writer.uint32(10).string(message.chainId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetValidatorsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetValidatorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chainId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetValidatorsRequest {
    return { chainId: isSet(object.chainId) ? gt.String(object.chainId) : "" };
  },

  toJSON(message: QueryGetValidatorsRequest): unknown {
    const obj: any = {};
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryGetValidatorsRequest>): QueryGetValidatorsRequest {
    return QueryGetValidatorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryGetValidatorsRequest>): QueryGetValidatorsRequest {
    const message = createBaseQueryGetValidatorsRequest();
    message.chainId = object.chainId ?? "";
    return message;
  },
};

function createBaseQueryGetValidatorsResponse(): QueryGetValidatorsResponse {
  return { validators: [] };
}

export const QueryGetValidatorsResponse = {
  encode(message: QueryGetValidatorsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.validators) {
      Validator.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetValidatorsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetValidatorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.validators.push(Validator.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetValidatorsResponse {
    return {
      validators: gt.Array.isArray(object?.validators) ? object.validators.map((e: any) => Validator.fromJSON(e)) : [],
    };
  },

  toJSON(message: QueryGetValidatorsResponse): unknown {
    const obj: any = {};
    if (message.validators?.length) {
      obj.validators = message.validators.map((e) => Validator.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryGetValidatorsResponse>): QueryGetValidatorsResponse {
    return QueryGetValidatorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryGetValidatorsResponse>): QueryGetValidatorsResponse {
    const message = createBaseQueryGetValidatorsResponse();
    message.validators = object.validators?.map((e) => Validator.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryGetHostZoneRequest(): QueryGetHostZoneRequest {
  return { chainId: "" };
}

export const QueryGetHostZoneRequest = {
  encode(message: QueryGetHostZoneRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.chainId !== "") {
      writer.uint32(10).string(message.chainId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetHostZoneRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetHostZoneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chainId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetHostZoneRequest {
    return { chainId: isSet(object.chainId) ? gt.String(object.chainId) : "" };
  },

  toJSON(message: QueryGetHostZoneRequest): unknown {
    const obj: any = {};
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryGetHostZoneRequest>): QueryGetHostZoneRequest {
    return QueryGetHostZoneRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryGetHostZoneRequest>): QueryGetHostZoneRequest {
    const message = createBaseQueryGetHostZoneRequest();
    message.chainId = object.chainId ?? "";
    return message;
  },
};

function createBaseQueryGetHostZoneResponse(): QueryGetHostZoneResponse {
  return { hostZone: undefined };
}

export const QueryGetHostZoneResponse = {
  encode(message: QueryGetHostZoneResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hostZone !== undefined) {
      HostZone.encode(message.hostZone, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetHostZoneResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetHostZoneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hostZone = HostZone.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetHostZoneResponse {
    return { hostZone: isSet(object.hostZone) ? HostZone.fromJSON(object.hostZone) : undefined };
  },

  toJSON(message: QueryGetHostZoneResponse): unknown {
    const obj: any = {};
    if (message.hostZone !== undefined) {
      obj.hostZone = HostZone.toJSON(message.hostZone);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryGetHostZoneResponse>): QueryGetHostZoneResponse {
    return QueryGetHostZoneResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryGetHostZoneResponse>): QueryGetHostZoneResponse {
    const message = createBaseQueryGetHostZoneResponse();
    message.hostZone = (object.hostZone !== undefined && object.hostZone !== null)
      ? HostZone.fromPartial(object.hostZone)
      : undefined;
    return message;
  },
};

function createBaseQueryAllHostZoneRequest(): QueryAllHostZoneRequest {
  return { pagination: undefined };
}

export const QueryAllHostZoneRequest = {
  encode(message: QueryAllHostZoneRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllHostZoneRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllHostZoneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllHostZoneRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllHostZoneRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryAllHostZoneRequest>): QueryAllHostZoneRequest {
    return QueryAllHostZoneRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryAllHostZoneRequest>): QueryAllHostZoneRequest {
    const message = createBaseQueryAllHostZoneRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllHostZoneResponse(): QueryAllHostZoneResponse {
  return { hostZone: [], pagination: undefined };
}

export const QueryAllHostZoneResponse = {
  encode(message: QueryAllHostZoneResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.hostZone) {
      HostZone.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllHostZoneResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllHostZoneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hostZone.push(HostZone.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllHostZoneResponse {
    return {
      hostZone: gt.Array.isArray(object?.hostZone) ? object.hostZone.map((e: any) => HostZone.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllHostZoneResponse): unknown {
    const obj: any = {};
    if (message.hostZone?.length) {
      obj.hostZone = message.hostZone.map((e) => HostZone.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryAllHostZoneResponse>): QueryAllHostZoneResponse {
    return QueryAllHostZoneResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryAllHostZoneResponse>): QueryAllHostZoneResponse {
    const message = createBaseQueryAllHostZoneResponse();
    message.hostZone = object.hostZone?.map((e) => HostZone.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryModuleAddressRequest(): QueryModuleAddressRequest {
  return { name: "" };
}

export const QueryModuleAddressRequest = {
  encode(message: QueryModuleAddressRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryModuleAddressRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryModuleAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryModuleAddressRequest {
    return { name: isSet(object.name) ? gt.String(object.name) : "" };
  },

  toJSON(message: QueryModuleAddressRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryModuleAddressRequest>): QueryModuleAddressRequest {
    return QueryModuleAddressRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryModuleAddressRequest>): QueryModuleAddressRequest {
    const message = createBaseQueryModuleAddressRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseQueryModuleAddressResponse(): QueryModuleAddressResponse {
  return { addr: "" };
}

export const QueryModuleAddressResponse = {
  encode(message: QueryModuleAddressResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.addr !== "") {
      writer.uint32(10).string(message.addr);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryModuleAddressResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryModuleAddressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.addr = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryModuleAddressResponse {
    return { addr: isSet(object.addr) ? gt.String(object.addr) : "" };
  },

  toJSON(message: QueryModuleAddressResponse): unknown {
    const obj: any = {};
    if (message.addr !== "") {
      obj.addr = message.addr;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryModuleAddressResponse>): QueryModuleAddressResponse {
    return QueryModuleAddressResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryModuleAddressResponse>): QueryModuleAddressResponse {
    const message = createBaseQueryModuleAddressResponse();
    message.addr = object.addr ?? "";
    return message;
  },
};

function createBaseQueryGetEpochTrackerRequest(): QueryGetEpochTrackerRequest {
  return { epochIdentifier: "" };
}

export const QueryGetEpochTrackerRequest = {
  encode(message: QueryGetEpochTrackerRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.epochIdentifier !== "") {
      writer.uint32(10).string(message.epochIdentifier);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetEpochTrackerRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetEpochTrackerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.epochIdentifier = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetEpochTrackerRequest {
    return { epochIdentifier: isSet(object.epochIdentifier) ? gt.String(object.epochIdentifier) : "" };
  },

  toJSON(message: QueryGetEpochTrackerRequest): unknown {
    const obj: any = {};
    if (message.epochIdentifier !== "") {
      obj.epochIdentifier = message.epochIdentifier;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryGetEpochTrackerRequest>): QueryGetEpochTrackerRequest {
    return QueryGetEpochTrackerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryGetEpochTrackerRequest>): QueryGetEpochTrackerRequest {
    const message = createBaseQueryGetEpochTrackerRequest();
    message.epochIdentifier = object.epochIdentifier ?? "";
    return message;
  },
};

function createBaseQueryGetEpochTrackerResponse(): QueryGetEpochTrackerResponse {
  return { epochTracker: undefined };
}

export const QueryGetEpochTrackerResponse = {
  encode(message: QueryGetEpochTrackerResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.epochTracker !== undefined) {
      EpochTracker.encode(message.epochTracker, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetEpochTrackerResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetEpochTrackerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.epochTracker = EpochTracker.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetEpochTrackerResponse {
    return { epochTracker: isSet(object.epochTracker) ? EpochTracker.fromJSON(object.epochTracker) : undefined };
  },

  toJSON(message: QueryGetEpochTrackerResponse): unknown {
    const obj: any = {};
    if (message.epochTracker !== undefined) {
      obj.epochTracker = EpochTracker.toJSON(message.epochTracker);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryGetEpochTrackerResponse>): QueryGetEpochTrackerResponse {
    return QueryGetEpochTrackerResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryGetEpochTrackerResponse>): QueryGetEpochTrackerResponse {
    const message = createBaseQueryGetEpochTrackerResponse();
    message.epochTracker = (object.epochTracker !== undefined && object.epochTracker !== null)
      ? EpochTracker.fromPartial(object.epochTracker)
      : undefined;
    return message;
  },
};

function createBaseQueryAllEpochTrackerRequest(): QueryAllEpochTrackerRequest {
  return {};
}

export const QueryAllEpochTrackerRequest = {
  encode(_: QueryAllEpochTrackerRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllEpochTrackerRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllEpochTrackerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryAllEpochTrackerRequest {
    return {};
  },

  toJSON(_: QueryAllEpochTrackerRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryAllEpochTrackerRequest>): QueryAllEpochTrackerRequest {
    return QueryAllEpochTrackerRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryAllEpochTrackerRequest>): QueryAllEpochTrackerRequest {
    const message = createBaseQueryAllEpochTrackerRequest();
    return message;
  },
};

function createBaseQueryAllEpochTrackerResponse(): QueryAllEpochTrackerResponse {
  return { epochTracker: [] };
}

export const QueryAllEpochTrackerResponse = {
  encode(message: QueryAllEpochTrackerResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.epochTracker) {
      EpochTracker.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllEpochTrackerResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllEpochTrackerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.epochTracker.push(EpochTracker.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllEpochTrackerResponse {
    return {
      epochTracker: gt.Array.isArray(object?.epochTracker)
        ? object.epochTracker.map((e: any) => EpochTracker.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryAllEpochTrackerResponse): unknown {
    const obj: any = {};
    if (message.epochTracker?.length) {
      obj.epochTracker = message.epochTracker.map((e) => EpochTracker.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryAllEpochTrackerResponse>): QueryAllEpochTrackerResponse {
    return QueryAllEpochTrackerResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryAllEpochTrackerResponse>): QueryAllEpochTrackerResponse {
    const message = createBaseQueryAllEpochTrackerResponse();
    message.epochTracker = object.epochTracker?.map((e) => EpochTracker.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryGetNextPacketSequenceRequest(): QueryGetNextPacketSequenceRequest {
  return { channelId: "", portId: "" };
}

export const QueryGetNextPacketSequenceRequest = {
  encode(message: QueryGetNextPacketSequenceRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.channelId !== "") {
      writer.uint32(10).string(message.channelId);
    }
    if (message.portId !== "") {
      writer.uint32(18).string(message.portId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetNextPacketSequenceRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetNextPacketSequenceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.channelId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.portId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetNextPacketSequenceRequest {
    return {
      channelId: isSet(object.channelId) ? gt.String(object.channelId) : "",
      portId: isSet(object.portId) ? gt.String(object.portId) : "",
    };
  },

  toJSON(message: QueryGetNextPacketSequenceRequest): unknown {
    const obj: any = {};
    if (message.channelId !== "") {
      obj.channelId = message.channelId;
    }
    if (message.portId !== "") {
      obj.portId = message.portId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryGetNextPacketSequenceRequest>): QueryGetNextPacketSequenceRequest {
    return QueryGetNextPacketSequenceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryGetNextPacketSequenceRequest>): QueryGetNextPacketSequenceRequest {
    const message = createBaseQueryGetNextPacketSequenceRequest();
    message.channelId = object.channelId ?? "";
    message.portId = object.portId ?? "";
    return message;
  },
};

function createBaseQueryGetNextPacketSequenceResponse(): QueryGetNextPacketSequenceResponse {
  return { sequence: 0 };
}

export const QueryGetNextPacketSequenceResponse = {
  encode(message: QueryGetNextPacketSequenceResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sequence !== 0) {
      writer.uint32(8).uint64(message.sequence);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryGetNextPacketSequenceResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGetNextPacketSequenceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.sequence = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGetNextPacketSequenceResponse {
    return { sequence: isSet(object.sequence) ? gt.Number(object.sequence) : 0 };
  },

  toJSON(message: QueryGetNextPacketSequenceResponse): unknown {
    const obj: any = {};
    if (message.sequence !== 0) {
      obj.sequence = Math.round(message.sequence);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryGetNextPacketSequenceResponse>): QueryGetNextPacketSequenceResponse {
    return QueryGetNextPacketSequenceResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryGetNextPacketSequenceResponse>): QueryGetNextPacketSequenceResponse {
    const message = createBaseQueryGetNextPacketSequenceResponse();
    message.sequence = object.sequence ?? 0;
    return message;
  },
};

function createBaseQueryAddressUnbondings(): QueryAddressUnbondings {
  return { address: "" };
}

export const QueryAddressUnbondings = {
  encode(message: QueryAddressUnbondings, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAddressUnbondings {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAddressUnbondings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAddressUnbondings {
    return { address: isSet(object.address) ? gt.String(object.address) : "" };
  },

  toJSON(message: QueryAddressUnbondings): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryAddressUnbondings>): QueryAddressUnbondings {
    return QueryAddressUnbondings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryAddressUnbondings>): QueryAddressUnbondings {
    const message = createBaseQueryAddressUnbondings();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryAddressUnbondingsResponse(): QueryAddressUnbondingsResponse {
  return { addressUnbondings: [] };
}

export const QueryAddressUnbondingsResponse = {
  encode(message: QueryAddressUnbondingsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.addressUnbondings) {
      AddressUnbonding.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAddressUnbondingsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAddressUnbondingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.addressUnbondings.push(AddressUnbonding.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAddressUnbondingsResponse {
    return {
      addressUnbondings: gt.Array.isArray(object?.addressUnbondings)
        ? object.addressUnbondings.map((e: any) => AddressUnbonding.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryAddressUnbondingsResponse): unknown {
    const obj: any = {};
    if (message.addressUnbondings?.length) {
      obj.addressUnbondings = message.addressUnbondings.map((e) => AddressUnbonding.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryAddressUnbondingsResponse>): QueryAddressUnbondingsResponse {
    return QueryAddressUnbondingsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryAddressUnbondingsResponse>): QueryAddressUnbondingsResponse {
    const message = createBaseQueryAddressUnbondingsResponse();
    message.addressUnbondings = object.addressUnbondings?.map((e) => AddressUnbonding.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryAllTradeRoutes(): QueryAllTradeRoutes {
  return {};
}

export const QueryAllTradeRoutes = {
  encode(_: QueryAllTradeRoutes, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllTradeRoutes {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllTradeRoutes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryAllTradeRoutes {
    return {};
  },

  toJSON(_: QueryAllTradeRoutes): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryAllTradeRoutes>): QueryAllTradeRoutes {
    return QueryAllTradeRoutes.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryAllTradeRoutes>): QueryAllTradeRoutes {
    const message = createBaseQueryAllTradeRoutes();
    return message;
  },
};

function createBaseQueryAllTradeRoutesResponse(): QueryAllTradeRoutesResponse {
  return { tradeRoutes: [] };
}

export const QueryAllTradeRoutesResponse = {
  encode(message: QueryAllTradeRoutesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.tradeRoutes) {
      TradeRoute.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllTradeRoutesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllTradeRoutesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tradeRoutes.push(TradeRoute.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllTradeRoutesResponse {
    return {
      tradeRoutes: gt.Array.isArray(object?.tradeRoutes)
        ? object.tradeRoutes.map((e: any) => TradeRoute.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryAllTradeRoutesResponse): unknown {
    const obj: any = {};
    if (message.tradeRoutes?.length) {
      obj.tradeRoutes = message.tradeRoutes.map((e) => TradeRoute.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryAllTradeRoutesResponse>): QueryAllTradeRoutesResponse {
    return QueryAllTradeRoutesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryAllTradeRoutesResponse>): QueryAllTradeRoutesResponse {
    const message = createBaseQueryAllTradeRoutesResponse();
    message.tradeRoutes = object.tradeRoutes?.map((e) => TradeRoute.fromPartial(e)) || [];
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Queries a Validator by host zone. */
  Validators(request: QueryGetValidatorsRequest): Promise<QueryGetValidatorsResponse>;
  /** Queries a HostZone by id. */
  HostZone(request: QueryGetHostZoneRequest): Promise<QueryGetHostZoneResponse>;
  /** Queries a list of HostZone items. */
  HostZoneAll(request: QueryAllHostZoneRequest): Promise<QueryAllHostZoneResponse>;
  /** Queries a list of ModuleAddress items. */
  ModuleAddress(request: QueryModuleAddressRequest): Promise<QueryModuleAddressResponse>;
  /**
   * QueryInterchainAccountFromAddress returns the interchain account for given
   * owner address on a given connection pair
   */
  InterchainAccountFromAddress(
    request: QueryInterchainAccountFromAddressRequest,
  ): Promise<QueryInterchainAccountFromAddressResponse>;
  /** Queries a EpochTracker by index. */
  EpochTracker(request: QueryGetEpochTrackerRequest): Promise<QueryGetEpochTrackerResponse>;
  /** Queries a list of EpochTracker items. */
  EpochTrackerAll(request: QueryAllEpochTrackerRequest): Promise<QueryAllEpochTrackerResponse>;
  /** Queries the next packet sequence for one for a given channel */
  NextPacketSequence(request: QueryGetNextPacketSequenceRequest): Promise<QueryGetNextPacketSequenceResponse>;
  /** Queries an address's unbondings */
  AddressUnbondings(request: QueryAddressUnbondings): Promise<QueryAddressUnbondingsResponse>;
  /** Queries all trade routes */
  AllTradeRoutes(request: QueryAllTradeRoutes): Promise<QueryAllTradeRoutesResponse>;
}

export const QueryServiceName = "stride.stakeibc.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.Validators = this.Validators.bind(this);
    this.HostZone = this.HostZone.bind(this);
    this.HostZoneAll = this.HostZoneAll.bind(this);
    this.ModuleAddress = this.ModuleAddress.bind(this);
    this.InterchainAccountFromAddress = this.InterchainAccountFromAddress.bind(this);
    this.EpochTracker = this.EpochTracker.bind(this);
    this.EpochTrackerAll = this.EpochTrackerAll.bind(this);
    this.NextPacketSequence = this.NextPacketSequence.bind(this);
    this.AddressUnbondings = this.AddressUnbondings.bind(this);
    this.AllTradeRoutes = this.AllTradeRoutes.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(_m0.Reader.create(data)));
  }

  Validators(request: QueryGetValidatorsRequest): Promise<QueryGetValidatorsResponse> {
    const data = QueryGetValidatorsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Validators", data);
    return promise.then((data) => QueryGetValidatorsResponse.decode(_m0.Reader.create(data)));
  }

  HostZone(request: QueryGetHostZoneRequest): Promise<QueryGetHostZoneResponse> {
    const data = QueryGetHostZoneRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "HostZone", data);
    return promise.then((data) => QueryGetHostZoneResponse.decode(_m0.Reader.create(data)));
  }

  HostZoneAll(request: QueryAllHostZoneRequest): Promise<QueryAllHostZoneResponse> {
    const data = QueryAllHostZoneRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "HostZoneAll", data);
    return promise.then((data) => QueryAllHostZoneResponse.decode(_m0.Reader.create(data)));
  }

  ModuleAddress(request: QueryModuleAddressRequest): Promise<QueryModuleAddressResponse> {
    const data = QueryModuleAddressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ModuleAddress", data);
    return promise.then((data) => QueryModuleAddressResponse.decode(_m0.Reader.create(data)));
  }

  InterchainAccountFromAddress(
    request: QueryInterchainAccountFromAddressRequest,
  ): Promise<QueryInterchainAccountFromAddressResponse> {
    const data = QueryInterchainAccountFromAddressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "InterchainAccountFromAddress", data);
    return promise.then((data) => QueryInterchainAccountFromAddressResponse.decode(_m0.Reader.create(data)));
  }

  EpochTracker(request: QueryGetEpochTrackerRequest): Promise<QueryGetEpochTrackerResponse> {
    const data = QueryGetEpochTrackerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "EpochTracker", data);
    return promise.then((data) => QueryGetEpochTrackerResponse.decode(_m0.Reader.create(data)));
  }

  EpochTrackerAll(request: QueryAllEpochTrackerRequest): Promise<QueryAllEpochTrackerResponse> {
    const data = QueryAllEpochTrackerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "EpochTrackerAll", data);
    return promise.then((data) => QueryAllEpochTrackerResponse.decode(_m0.Reader.create(data)));
  }

  NextPacketSequence(request: QueryGetNextPacketSequenceRequest): Promise<QueryGetNextPacketSequenceResponse> {
    const data = QueryGetNextPacketSequenceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "NextPacketSequence", data);
    return promise.then((data) => QueryGetNextPacketSequenceResponse.decode(_m0.Reader.create(data)));
  }

  AddressUnbondings(request: QueryAddressUnbondings): Promise<QueryAddressUnbondingsResponse> {
    const data = QueryAddressUnbondings.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddressUnbondings", data);
    return promise.then((data) => QueryAddressUnbondingsResponse.decode(_m0.Reader.create(data)));
  }

  AllTradeRoutes(request: QueryAllTradeRoutes): Promise<QueryAllTradeRoutesResponse> {
    const data = QueryAllTradeRoutes.encode(request).finish();
    const promise = this.rpc.request(this.service, "AllTradeRoutes", data);
    return promise.then((data) => QueryAllTradeRoutesResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(long: Long): number {
  if (long.gt(gt.Number.MAX_SAFE_INTEGER)) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(gt.Number.MIN_SAFE_INTEGER)) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
