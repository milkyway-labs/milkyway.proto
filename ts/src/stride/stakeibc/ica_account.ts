// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: stride/stakeibc/ica_account.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "stride.stakeibc";

export enum ICAAccountType {
  DELEGATION = 0,
  FEE = 1,
  WITHDRAWAL = 2,
  REDEMPTION = 3,
  COMMUNITY_POOL_DEPOSIT = 4,
  COMMUNITY_POOL_RETURN = 5,
  CONVERTER_UNWIND = 6,
  CONVERTER_TRADE = 7,
  UNRECOGNIZED = -1,
}

export function iCAAccountTypeFromJSON(object: any): ICAAccountType {
  switch (object) {
    case 0:
    case "DELEGATION":
      return ICAAccountType.DELEGATION;
    case 1:
    case "FEE":
      return ICAAccountType.FEE;
    case 2:
    case "WITHDRAWAL":
      return ICAAccountType.WITHDRAWAL;
    case 3:
    case "REDEMPTION":
      return ICAAccountType.REDEMPTION;
    case 4:
    case "COMMUNITY_POOL_DEPOSIT":
      return ICAAccountType.COMMUNITY_POOL_DEPOSIT;
    case 5:
    case "COMMUNITY_POOL_RETURN":
      return ICAAccountType.COMMUNITY_POOL_RETURN;
    case 6:
    case "CONVERTER_UNWIND":
      return ICAAccountType.CONVERTER_UNWIND;
    case 7:
    case "CONVERTER_TRADE":
      return ICAAccountType.CONVERTER_TRADE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ICAAccountType.UNRECOGNIZED;
  }
}

export function iCAAccountTypeToJSON(object: ICAAccountType): string {
  switch (object) {
    case ICAAccountType.DELEGATION:
      return "DELEGATION";
    case ICAAccountType.FEE:
      return "FEE";
    case ICAAccountType.WITHDRAWAL:
      return "WITHDRAWAL";
    case ICAAccountType.REDEMPTION:
      return "REDEMPTION";
    case ICAAccountType.COMMUNITY_POOL_DEPOSIT:
      return "COMMUNITY_POOL_DEPOSIT";
    case ICAAccountType.COMMUNITY_POOL_RETURN:
      return "COMMUNITY_POOL_RETURN";
    case ICAAccountType.CONVERTER_UNWIND:
      return "CONVERTER_UNWIND";
    case ICAAccountType.CONVERTER_TRADE:
      return "CONVERTER_TRADE";
    case ICAAccountType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ICAAccount {
  chainId: string;
  type: ICAAccountType;
  connectionId: string;
  address: string;
}

function createBaseICAAccount(): ICAAccount {
  return { chainId: "", type: 0, connectionId: "", address: "" };
}

export const ICAAccount = {
  encode(message: ICAAccount, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.chainId !== "") {
      writer.uint32(10).string(message.chainId);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.connectionId !== "") {
      writer.uint32(26).string(message.connectionId);
    }
    if (message.address !== "") {
      writer.uint32(34).string(message.address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ICAAccount {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseICAAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chainId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.connectionId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ICAAccount {
    return {
      chainId: isSet(object.chainId) ? gt.String(object.chainId) : "",
      type: isSet(object.type) ? iCAAccountTypeFromJSON(object.type) : 0,
      connectionId: isSet(object.connectionId) ? gt.String(object.connectionId) : "",
      address: isSet(object.address) ? gt.String(object.address) : "",
    };
  },

  toJSON(message: ICAAccount): unknown {
    const obj: any = {};
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.type !== 0) {
      obj.type = iCAAccountTypeToJSON(message.type);
    }
    if (message.connectionId !== "") {
      obj.connectionId = message.connectionId;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create(base?: DeepPartial<ICAAccount>): ICAAccount {
    return ICAAccount.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ICAAccount>): ICAAccount {
    const message = createBaseICAAccount();
    message.chainId = object.chainId ?? "";
    message.type = object.type ?? 0;
    message.connectionId = object.connectionId ?? "";
    message.address = object.address ?? "";
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
